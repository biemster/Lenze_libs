<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\mesh_gateway.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\mesh_gateway.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Dec 20 18:42:08 2021
<BR><P>
<H3>Maximum Stack Usage =       2416 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
bleMesh_ProcessEvent &rArr; UI_vendor_model_set &rArr; MS_vendormodel_client_send_reliable_pdu &rArr; MS_access_raw_data &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[34]">AACI_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[76]">ATT_BuildErrorRsp</a> from att_util.o(i.ATT_BuildErrorRsp) referenced from att_server.o(i.ATT_ErrorRsp)
 <LI><a href="#[77]">ATT_BuildExchangeMTURsp</a> from att_util.o(i.ATT_BuildExchangeMTURsp) referenced from att_server.o(i.ATT_ExchangeMTURsp)
 <LI><a href="#[78]">ATT_BuildExecuteWriteReq</a> from att_util.o(i.ATT_BuildExecuteWriteReq) referenced from att_client.o(i.ATT_ExecuteWriteReq)
 <LI><a href="#[79]">ATT_BuildFindByTypeValueReq</a> from att_util.o(i.ATT_BuildFindByTypeValueReq) referenced from att_client.o(i.ATT_FindByTypeValueReq)
 <LI><a href="#[7a]">ATT_BuildFindByTypeValueRsp</a> from att_util.o(i.ATT_BuildFindByTypeValueRsp) referenced from att_server.o(i.ATT_FindByTypeValueRsp)
 <LI><a href="#[7b]">ATT_BuildFindInfoReq</a> from att_util.o(i.ATT_BuildFindInfoReq) referenced from att_client.o(i.ATT_FindInfoReq)
 <LI><a href="#[7c]">ATT_BuildFindInfoRsp</a> from att_util.o(i.ATT_BuildFindInfoRsp) referenced from att_server.o(i.ATT_FindInfoRsp)
 <LI><a href="#[7d]">ATT_BuildHandleValueInd</a> from att_util.o(i.ATT_BuildHandleValueInd) referenced from att_server.o(i.ATT_HandleValueInd)
 <LI><a href="#[7d]">ATT_BuildHandleValueInd</a> from att_util.o(i.ATT_BuildHandleValueInd) referenced from att_server.o(i.ATT_HandleValueNoti)
 <LI><a href="#[7e]">ATT_BuildPrepareWriteReq</a> from att_util.o(i.ATT_BuildPrepareWriteReq) referenced from att_client.o(i.ATT_PrepareWriteReq)
 <LI><a href="#[7f]">ATT_BuildPrepareWriteRsp</a> from att_util.o(i.ATT_BuildPrepareWriteRsp) referenced from att_server.o(i.ATT_PrepareWriteRsp)
 <LI><a href="#[80]">ATT_BuildReadBlobReq</a> from att_util.o(i.ATT_BuildReadBlobReq) referenced from att_client.o(i.ATT_ReadBlobReq)
 <LI><a href="#[81]">ATT_BuildReadBlobRsp</a> from att_util.o(i.ATT_BuildReadBlobRsp) referenced from att_server.o(i.ATT_ReadBlobRsp)
 <LI><a href="#[83]">ATT_BuildReadByGrpTypeRsp</a> from att_util.o(i.ATT_BuildReadByGrpTypeRsp) referenced from att_server.o(i.ATT_ReadByGrpTypeRsp)
 <LI><a href="#[82]">ATT_BuildReadByTypeReq</a> from att_util.o(i.ATT_BuildReadByTypeReq) referenced from att_client.o(i.ATT_ReadByGrpTypeReq)
 <LI><a href="#[82]">ATT_BuildReadByTypeReq</a> from att_util.o(i.ATT_BuildReadByTypeReq) referenced from att_client.o(i.ATT_ReadByTypeReq)
 <LI><a href="#[84]">ATT_BuildReadByTypeRsp</a> from att_util.o(i.ATT_BuildReadByTypeRsp) referenced from att_server.o(i.ATT_ReadByTypeRsp)
 <LI><a href="#[85]">ATT_BuildReadMultiRsp</a> from att_util.o(i.ATT_BuildReadMultiRsp) referenced from att_server.o(i.ATT_ReadMultiRsp)
 <LI><a href="#[86]">ATT_BuildReadRsp</a> from att_util.o(i.ATT_BuildReadRsp) referenced from att_server.o(i.ATT_ReadRsp)
 <LI><a href="#[e1]">ATT_ParseExchangeMTUReq</a> from att_util.o(i.ATT_ParseExchangeMTUReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[f2]">ATT_ParseExecuteWriteReq</a> from att_util.o(i.ATT_ParseExecuteWriteReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[a4]">ATT_ParseExecuteWriteRsp</a> from att_util.o(i.ATT_ParseExecuteWriteRsp) referenced from gatt_client.o(i.gattProcessReliableWrites)
 <LI><a href="#[a4]">ATT_ParseExecuteWriteRsp</a> from att_util.o(i.ATT_ParseExecuteWriteRsp) referenced from gatt_client.o(i.gattProcessWriteLong)
 <LI><a href="#[e5]">ATT_ParseFindByTypeValueReq</a> from att_util.o(i.ATT_ParseFindByTypeValueReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[e3]">ATT_ParseFindInfoReq</a> from att_util.o(i.ATT_ParseFindInfoReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[89]">ATT_ParseFindInfoRsp</a> from att_util.o(i.ATT_ParseFindInfoRsp) referenced from gatt_client.o(i.GATT_DiscAllCharDescs)
 <LI><a href="#[f1]">ATT_ParsePrepareWriteReq</a> from att_util.o(i.ATT_ParsePrepareWriteReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[eb]">ATT_ParseReadBlobReq</a> from att_util.o(i.ATT_ParseReadBlobReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[e7]">ATT_ParseReadByTypeReq</a> from att_util.o(i.ATT_ParseReadByTypeReq) referenced 2 times from gatt_server.o(.constdata)
 <LI><a href="#[a5]">ATT_ParseReadByTypeRsp</a> from att_util.o(i.ATT_ParseReadByTypeRsp) referenced from gatt_client.o(i.gattReadByType)
 <LI><a href="#[ec]">ATT_ParseReadMultiReq</a> from att_util.o(i.ATT_ParseReadMultiReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[e9]">ATT_ParseReadReq</a> from att_util.o(i.ATT_ParseReadReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[ef]">ATT_ParseWriteReq</a> from att_util.o(i.ATT_ParseWriteReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[3b]">CAN_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[39]">CHLCD_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[35]">CLCD_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[3e]">CPU_CLCD_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[36]">ENET_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[3a]">FLEXRAY_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[5d]">GAPRole_ProcessEvent</a> from peripheral.o(i.GAPRole_ProcessEvent) referenced from osal_blemesh.o(.constdata)
 <LI><a href="#[5b]">GAP_ProcessEvent</a> from gap_task.o(i.GAP_ProcessEvent) referenced from osal_blemesh.o(.constdata)
 <LI><a href="#[5e]">GATTServApp_ProcessEvent</a> from gattservapp.o(i.GATTServApp_ProcessEvent) referenced from osal_blemesh.o(.constdata)
 <LI><a href="#[5c]">GATT_ProcessEvent</a> from gatt_task.o(i.GATT_ProcessEvent) referenced from osal_blemesh.o(.constdata)
 <LI><a href="#[58]">HCI_ProcessEvent</a> from bb_rom_sym_m0.txt(ABSOLUTE) referenced from osal_blemesh.o(.constdata)
 <LI><a href="#[26]">HardFault_Handler</a> from bb_rom_sym_m0.txt(ABSOLUTE) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[3d]">I2C_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[8f]">L2CAP_BuildCmdReject</a> from l2cap_util.o(i.L2CAP_BuildCmdReject) referenced from l2cap_if.o(i.L2CAP_CmdReject)
 <LI><a href="#[91]">L2CAP_BuildParamUpdateRsp</a> from l2cap_util.o(i.L2CAP_BuildParamUpdateRsp) referenced from l2cap_if.o(i.L2CAP_ConnParamUpdateRsp)
 <LI><a href="#[5a]">L2CAP_ProcessEvent</a> from l2cap_task.o(i.L2CAP_ProcessEvent) referenced from osal_blemesh.o(.constdata)
 <LI><a href="#[3c]">LIN_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[4f]">LL_CreateConn1</a> from patch.o(i.LL_CreateConn1) referenced from patch.o(i.ll_patch_master)
 <LI><a href="#[6a]">LL_ENC_AES128_Encrypt1</a> from patch.o(i.LL_ENC_AES128_Encrypt1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[51]">LL_ENC_Decrypt1</a> from patch.o(i.LL_ENC_Decrypt1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[51]">LL_ENC_Decrypt1</a> from patch.o(i.LL_ENC_Decrypt1) referenced from patch.o(i.ll_patch_master)
 <LI><a href="#[6b]">LL_ENC_Encrypt1</a> from patch.o(i.LL_ENC_Encrypt1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[67]">LL_IRQHandler1</a> from patch.o(i.LL_IRQHandler1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[57]">LL_ProcessEvent</a> from bb_rom_sym_m0.txt(ABSOLUTE) referenced from osal_blemesh.o(.constdata)
 <LI><a href="#[4b]">LL_SetAdvControl1</a> from patch.o(i.LL_SetAdvControl1) referenced from patch.o(i.ll_patch_master)
 <LI><a href="#[4a]">LL_SetAdvParam1</a> from patch.o(i.LL_SetAdvParam1) referenced from patch.o(i.ll_patch_master)
 <LI><a href="#[70]">LL_SetDataLengh1</a> from patch.o(i.LL_SetDataLengh1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[4e]">LL_SetScanControl1</a> from patch.o(i.LL_SetScanControl1) referenced from patch.o(i.ll_patch_master)
 <LI><a href="#[4d]">LL_SetScanParam1</a> from patch.o(i.LL_SetScanParam1) referenced from patch.o(i.ll_patch_master)
 <LI><a href="#[50]">LL_StartEncrypt1</a> from patch.o(i.LL_StartEncrypt1) referenced from patch.o(i.ll_patch_master)
 <LI><a href="#[75]">LL_set_default_conn_params1</a> from patch.o(i.LL_set_default_conn_params1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[2e]">MCIA_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[2f]">MCIB_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[25]">NMI_Handler</a> from bb_rom_sym_m0.txt(ABSOLUTE) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[28]">PendSV_Handler</a> from bb_rom_sym_m0.txt(ABSOLUTE) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[d5]">ProcessUartData</a> from blemesh.o(i.ProcessUartData) referenced from blemesh.o(.constdata)
 <LI><a href="#[2b]">RTC_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[24]">Reset_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[40]">SPI_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[27]">SVC_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[29]">SysTick_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[43]">SystemInit</a> from system_armcm0.o(i.SystemInit) referenced from startup_armcm0.o(.text)
 <LI><a href="#[2c]">TIM0_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[2d]">TIM2_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[30]">UART0_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[31]">UART1_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[32]">UART2_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[3f]">UART3_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[33]">UART4_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[9b]">UI_config_client_cb</a> from appl_sample_mesh_gateway.o(i.UI_config_client_cb) referenced from appl_sample_mesh_gateway.o(i.UI_register_config_model_client)
 <LI><a href="#[9c]">UI_generic_onoff_client_cb</a> from appl_sample_mesh_gateway.o(i.UI_generic_onoff_client_cb) referenced from appl_sample_mesh_gateway.o(i.UI_register_generic_onoff_model_client)
 <LI><a href="#[9e]">UI_phy_model_client_cb</a> from appl_sample_mesh_gateway.o(i.UI_phy_model_client_cb) referenced from appl_sample_mesh_gateway.o(i.UI_register_vendor_defined_model_client)
 <LI><a href="#[9d]">UI_prov_callback</a> from appl_sample_mesh_gateway.o(i.UI_prov_callback) referenced from appl_sample_mesh_gateway.o(i.UI_register_prov)
 <LI><a href="#[9a]">UI_provcfg_complete_timeout_handler</a> from appl_sample_mesh_gateway.o(i.UI_provcfg_complete_timeout_handler) referenced from appl_sample_mesh_gateway.o(i.UI_prov_callback)
 <LI><a href="#[37]">USBDC_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[38]">USBHC_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[2a]">WDT_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[44]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_armcm0.o(.text)
 <LI><a href="#[42]">_hard_fault</a> from jump_table.o(i._hard_fault) referenced from jump_table.o(.emb_text)
 <LI><a href="#[46]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[a3]">_uart_putc</a> from my_printf.o(i._uart_putc) referenced from my_printf.o(i.dbg_printf)
 <LI><a href="#[b1]">access_pkt_in</a> from libethermind_mesh_core.lib(i.access_pkt_in) referenced from libethermind_mesh_core.lib(i.ms_access_init)
 <LI><a href="#[1]">appl_mesh_prov_data_in_wt_cb</a> from blebrr_pl.o(i.appl_mesh_prov_data_in_wt_cb) referenced 2 times from blebrr_pl.o(.data)
 <LI><a href="#[2]">appl_mesh_prov_data_out_ccd_cb</a> from blebrr_pl.o(i.appl_mesh_prov_data_out_ccd_cb) referenced 2 times from blebrr_pl.o(.data)
 <LI><a href="#[3]">appl_mesh_proxy_data_in_wt_cb</a> from blebrr_pl.o(i.appl_mesh_proxy_data_in_wt_cb) referenced 2 times from blebrr_pl.o(.data)
 <LI><a href="#[4]">appl_mesh_proxy_data_out_ccd_cb</a> from blebrr_pl.o(i.appl_mesh_proxy_data_out_ccd_cb) referenced 2 times from blebrr_pl.o(.data)
 <LI><a href="#[5f]">bleMesh_ProcessEvent</a> from blemesh.o(i.bleMesh_ProcessEvent) referenced from osal_blemesh.o(.constdata)
 <LI><a href="#[a1]">blebrr_adv_send</a> from blebrr.o(i.blebrr_adv_send) referenced from blebrr.o(i.blebrr_register)
 <LI><a href="#[a2]">blebrr_advscan_timeout_handler</a> from blebrr.o(i.blebrr_advscan_timeout_handler) referenced from blebrr.o(i.blebrr_timer_start)
 <LI><a href="#[a0]">blebrr_gatt_send</a> from blebrr_gatt.o(i.blebrr_gatt_send) referenced from blebrr_gatt.o(i.blebrr_pl_gatt_connection)
 <LI><a href="#[92]">brr_read_data_ind</a> from libethermind_mesh_core.lib(i.brr_read_data_ind) referenced from libethermind_mesh_core.lib(i.MS_brr_add_bearer)
 <LI><a href="#[d3]">cli_core_modelc_config_key_refresh_phase_set</a> from cli_model.o(i.cli_core_modelc_config_key_refresh_phase_set) referenced from blemesh.o(.constdata)
 <LI><a href="#[d4]">cli_core_modelc_config_netkey_update</a> from cli_model.o(i.cli_core_modelc_config_netkey_update) referenced from blemesh.o(.constdata)
 <LI><a href="#[cb]">cli_demo_help</a> from cli_model.o(i.cli_demo_help) referenced from blemesh.o(.constdata)
 <LI><a href="#[d1]">cli_demo_reset</a> from cli_model.o(i.cli_demo_reset) referenced from blemesh.o(.constdata)
 <LI><a href="#[d0]">cli_group_select</a> from cli_model.o(i.cli_group_select) referenced from blemesh.o(.constdata)
 <LI><a href="#[d2]">cli_internal_status</a> from cli_model.o(i.cli_internal_status) referenced from blemesh.o(.constdata)
 <LI><a href="#[ce]">cli_off</a> from cli_model.o(i.cli_off) referenced from blemesh.o(.constdata)
 <LI><a href="#[cd]">cli_on</a> from cli_model.o(i.cli_on) referenced from blemesh.o(.constdata)
 <LI><a href="#[cf]">cli_seek</a> from cli_model.o(i.cli_seek) referenced from blemesh.o(.constdata)
 <LI><a href="#[cc]">cli_start</a> from cli_model.o(i.cli_start) referenced from blemesh.o(.constdata)
 <LI><a href="#[6c]">config_RTC1</a> from patch.o(i.config_RTC1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[93]">config_client_cb</a> from libethermind_mesh_core.lib(i.config_client_cb) referenced from libethermind_mesh_core.lib(i.MS_config_client_init)
 <LI><a href="#[bb]">cry_generate_random_bytes</a> from cry.o(i.cry_generate_random_bytes) referenced from cry.o(i.phyplus_ecdh_init)
 <LI><a href="#[c7]">devInfo_ReadAttrCB</a> from devinfoservice.o(i.devInfo_ReadAttrCB) referenced from devinfoservice.o(.constdata)
 <LI><a href="#[45]">fputc</a> from em_platform.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[45]">fputc</a> from em_platform.o(i.fputc) referenced from printfa.o(i.__0vprintf)
 <LI><a href="#[1f]">gapCancelLinkReq</a> from gap_centlinkmgr.o(i.gapCancelLinkReq) referenced 2 times from gap_centdevmgr.o(.data)
 <LI><a href="#[1d]">gapCentProcessHCICmdEvt</a> from gap_centdevmgr.o(i.gapCentProcessHCICmdEvt) referenced 2 times from gap_centdevmgr.o(.data)
 <LI><a href="#[21]">gapPeriProcessHCICmdCompleteEvt</a> from gap_peridevmgr.o(i.gapPeriProcessHCICmdCompleteEvt) referenced 2 times from gap_peridevmgr.o(.data)
 <LI><a href="#[22]">gapProcessAdvertisingEvt</a> from gap_peridevmgr.o(i.gapProcessAdvertisingEvt) referenced 2 times from gap_peridevmgr.o(.data)
 <LI><a href="#[20]">gapProcessConnEvt</a> from gap_centdevmgr.o(i.gapProcessConnEvt) referenced 2 times from gap_centdevmgr.o(.data)
 <LI><a href="#[1e]">gapProcessScanningEvt</a> from gap_centdevmgr.o(i.gapProcessScanningEvt) referenced 2 times from gap_centdevmgr.o(.data)
 <LI><a href="#[23]">gapSetAdvParams</a> from gap_peridevmgr.o(i.gapSetAdvParams) referenced 2 times from gap_peridevmgr.o(.data)
 <LI><a href="#[8c]">gattClientHandleConnStatusCB</a> from gatt_client.o(i.gattClientHandleConnStatusCB) referenced from gatt_client.o(i.GATT_InitClient)
 <LI><a href="#[a6]">gattClientHandleTimerCB</a> from gatt_client.o(i.gattClientHandleTimerCB) referenced from gatt_client.o(i.gattStoreClientInfo)
 <LI><a href="#[8b]">gattClientProcessMsgCB</a> from gatt_client.o(i.gattClientProcessMsgCB) referenced from gatt_client.o(i.GATT_InitClient)
 <LI><a href="#[e2]">gattProcessExchangeMTUReq</a> from gatt_server.o(i.gattProcessExchangeMTUReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[f3]">gattProcessExecuteWriteReq</a> from gatt_server.o(i.gattProcessExecuteWriteReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[e6]">gattProcessFindByTypeValueReq</a> from gatt_server.o(i.gattProcessFindByTypeValueReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[e4]">gattProcessFindInfoReq</a> from gatt_server.o(i.gattProcessFindInfoReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[ee]">gattProcessReadByGrpTypeReq</a> from gatt_server.o(i.gattProcessReadByGrpTypeReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[e8]">gattProcessReadByTypeReq</a> from gatt_server.o(i.gattProcessReadByTypeReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[ed]">gattProcessReadMultiReq</a> from gatt_server.o(i.gattProcessReadMultiReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[ea]">gattProcessReadReq</a> from gatt_server.o(i.gattProcessReadReq) referenced 2 times from gatt_server.o(.constdata)
 <LI><a href="#[f0]">gattProcessWriteReq</a> from gatt_server.o(i.gattProcessWriteReq) referenced 2 times from gatt_server.o(.constdata)
 <LI><a href="#[88]">gattServApp_HandleConnStatusCB</a> from gattservapp.o(i.gattServApp_HandleConnStatusCB) referenced from gattservapp.o(i.GATTServApp_Init)
 <LI><a href="#[c8]">gattServApp_WriteAttrCB</a> from gattservapp.o(i.gattServApp_WriteAttrCB) referenced from gattservapp.o(.constdata)
 <LI><a href="#[8e]">gattServerHandleConnStatusCB</a> from gatt_server.o(i.gattServerHandleConnStatusCB) referenced from gatt_server.o(i.GATT_InitServer)
 <LI><a href="#[8a]">gattServerHandleTimerCB</a> from gatt_server.o(i.gattServerHandleTimerCB) referenced from gatt_server.o(i.GATT_Indication)
 <LI><a href="#[8d]">gattServerProcessMsgCB</a> from gatt_server.o(i.gattServerProcessMsgCB) referenced from gatt_server.o(i.GATT_InitServer)
 <LI><a href="#[94]">generic_onoff_client_cb</a> from libethermind_mesh_models.lib(i.generic_onoff_client_cb) referenced from libethermind_mesh_models.lib(i.MS_generic_onoff_client_init)
 <LI><a href="#[c9]">ggs_ReadAttrCB</a> from gapgattserver.o(i.ggs_ReadAttrCB) referenced from gapgattserver.o(.constdata)
 <LI><a href="#[ca]">ggs_WriteAttrCB</a> from gapgattserver.o(i.ggs_WriteAttrCB) referenced from gapgattserver.o(.constdata)
 <LI><a href="#[a9]">hal_GPIO_IRQHandler</a> from gpio.o(i.hal_GPIO_IRQHandler) referenced from gpio.o(i.hal_gpioin_register)
 <LI><a href="#[65]">hal_UART0_IRQHandler</a> from uart.o(_section_sram_code_) referenced from uart.o(i.uart_hw_init)
 <LI><a href="#[65]">hal_UART0_IRQHandler</a> from uart.o(_section_sram_code_) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[c6]">hal_UART1_IRQHandler</a> from uart.o(_section_sram_code_) referenced from uart.o(i.uart_hw_init)
 <LI><a href="#[a8]">hal_gpio_sleep_handler</a> from gpio.o(i.hal_gpio_sleep_handler) referenced from gpio.o(i.hal_gpio_init)
 <LI><a href="#[a7]">hal_gpio_wakeup_handler</a> from gpio.o(i.hal_gpio_wakeup_handler) referenced from gpio.o(i.hal_gpio_init)
 <LI><a href="#[61]">hal_pwrmgr_sleep_process</a> from pwrmgr.o(i.hal_pwrmgr_sleep_process) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[62]">hal_pwrmgr_wakeup_process</a> from pwrmgr.o(i.hal_pwrmgr_wakeup_process) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[64]">hard_fault</a> from jump_table.o(.emb_text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[49]">hw_spif_cache_config</a> from flash.o(i.hw_spif_cache_config) referenced from flash.o(i.hal_spif_cache_init)
 <LI><a href="#[9f]">key_press_process</a> from blemesh.o(i.key_press_process) referenced from blemesh.o(i.bleMesh_Init)
 <LI><a href="#[90]">l2capBuildParamUpdateReq</a> from l2cap_util.o(i.l2capBuildParamUpdateReq) referenced from l2cap_if.o(i.L2CAP_ConnParamUpdateReq)
 <LI><a href="#[ac]">l2capHandleTimerCB</a> from l2cap_util.o(i.l2capHandleTimerCB) referenced from l2cap_util.o(i.l2capSendReq)
 <LI><a href="#[6f]">l2capPocessFragmentTxData</a> from l2cap_util.o(_section_sram_code_) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[74]">llConnTerminate1</a> from patch.o(i.llConnTerminate1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[4c]">llMasterEvt_TaskEndOk1</a> from patch.o(i.llMasterEvt_TaskEndOk1) referenced from patch.o(i.ll_patch_master)
 <LI><a href="#[52]">llProcessMasterControlProcedures1</a> from patch.o(i.llProcessMasterControlProcedures1) referenced from patch.o(i.ll_patch_master)
 <LI><a href="#[53]">llProcessSlaveControlProcedures1</a> from patch.o(i.llProcessSlaveControlProcedures1) referenced from patch.o(i.ll_patch_master)
 <LI><a href="#[71]">llProcessTxData1</a> from patch.o(i.llProcessTxData1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[56]">llSetupSecScan1</a> from patch.o(i.llSetupSecScan1) referenced from patch.o(i.ll_patch_master)
 <LI><a href="#[73]">ll_adptive_adj_next_time1</a> from patch.o(i.ll_adptive_adj_next_time1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[72]">ll_generateTxBuffer1</a> from patch.o(i.ll_generateTxBuffer1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[66]">ll_hw_go1</a> from patch.o(i.ll_hw_go1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[54]">ll_processBasicIRQ_SRX0</a> from patch.o(i.ll_processBasicIRQ_SRX0) referenced from patch.o(i.ll_patch_master)
 <LI><a href="#[55]">ll_processBasicIRQ_ScanTRX0</a> from patch.o(i.ll_processBasicIRQ_ScanTRX0) referenced from patch.o(i.ll_patch_master)
 <LI><a href="#[af]">ltrn_ack_timeout_handler</a> from libethermind_mesh_core.lib(i.ltrn_ack_timeout_handler) referenced from libethermind_mesh_core.lib(i.ltrn_sar_start_ack_timer)
 <LI><a href="#[ad]">ltrn_handle_segment_ack_timeout_handler</a> from libethermind_mesh_core.lib(i.ltrn_handle_segment_ack_timeout_handler) referenced from libethermind_mesh_core.lib(i.ltrn_handle_segment_ack)
 <LI><a href="#[ae]">ltrn_incomplete_timeout_handler</a> from libethermind_mesh_core.lib(i.ltrn_incomplete_timeout_handler) referenced from libethermind_mesh_core.lib(i.ltrn_sar_restart_incomplete_timer)
 <LI><a href="#[b2]">ltrn_pkt_in</a> from libethermind_mesh_core.lib(i.ltrn_pkt_in) referenced from libethermind_mesh_core.lib(i.ms_ltrn_init)
 <LI><a href="#[b0]">ltrn_rtx_timeout_handler</a> from libethermind_mesh_core.lib(i.ltrn_rtx_timeout_handler) referenced from libethermind_mesh_core.lib(i.ltrn_sar_transmit_segments)
 <LI><a href="#[41]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[95]">ms_iv_update_timeout_handler</a> from libethermind_mesh_core.lib(i.ms_iv_update_timeout_handler) referenced from libethermind_mesh_core.lib(i.MS_net_start_iv_update_timer)
 <LI><a href="#[95]">ms_iv_update_timeout_handler</a> from libethermind_mesh_core.lib(i.ms_iv_update_timeout_handler) referenced from libethermind_mesh_core.lib(i.ms_iv_update_timeout_handler)
 <LI><a href="#[96]">ms_key_refresh_timeout_handler</a> from libethermind_mesh_core.lib(i.ms_key_refresh_timeout_handler) referenced from libethermind_mesh_core.lib(i.MS_net_start_key_refresh_timer)
 <LI><a href="#[e]">ms_load_appkeys</a> from libethermind_mesh_core.lib(i.ms_load_appkeys) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[c]">ms_load_dev_key</a> from libethermind_mesh_core.lib(i.ms_load_dev_key) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[10]">ms_load_element_addresses</a> from libethermind_mesh_core.lib(i.ms_load_element_addresses) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[6]">ms_load_elements</a> from libethermind_mesh_core.lib(i.ms_load_elements) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[8]">ms_load_models</a> from libethermind_mesh_core.lib(i.ms_load_models) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[14]">ms_load_non_virtual_addresses</a> from libethermind_mesh_core.lib(i.ms_load_non_virtual_addresses) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[1a]">ms_load_provisioner_address</a> from libethermind_mesh_core.lib(i.ms_load_provisioner_address) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[1c]">ms_load_proxy_filter_address</a> from libethermind_mesh_core.lib(i.ms_load_proxy_filter_address) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[16]">ms_load_seq_number</a> from libethermind_mesh_core.lib(i.ms_load_seq_number) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[a]">ms_load_subnets</a> from libethermind_mesh_core.lib(i.ms_load_subnets) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[18]">ms_load_tx_states_and_features</a> from libethermind_mesh_core.lib(i.ms_load_tx_states_and_features) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[12]">ms_load_virtual_addresses</a> from libethermind_mesh_core.lib(i.ms_load_virtual_addresses) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[98]">ms_prov_beacon_interleave</a> from libethermind_mesh_core.lib(i.ms_prov_beacon_interleave) referenced from libethermind_mesh_core.lib(i.MS_prov_setup)
 <LI><a href="#[98]">ms_prov_beacon_interleave</a> from libethermind_mesh_core.lib(i.ms_prov_beacon_interleave) referenced from libethermind_mesh_core.lib(i.ms_prov_beacon_interleave)
 <LI><a href="#[97]">ms_snb_timeout_handler</a> from libethermind_mesh_core.lib(i.ms_snb_timeout_handler) referenced from libethermind_mesh_core.lib(i.MS_net_start_snb_timer)
 <LI><a href="#[d]">ms_store_appkeys</a> from libethermind_mesh_core.lib(i.ms_store_appkeys) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[b]">ms_store_dev_key</a> from libethermind_mesh_core.lib(i.ms_store_dev_key) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[f]">ms_store_element_addresses</a> from libethermind_mesh_core.lib(i.ms_store_element_addresses) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[5]">ms_store_elements</a> from libethermind_mesh_core.lib(i.ms_store_elements) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[7]">ms_store_models</a> from libethermind_mesh_core.lib(i.ms_store_models) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[13]">ms_store_non_virtual_addresses</a> from libethermind_mesh_core.lib(i.ms_store_non_virtual_addresses) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[19]">ms_store_provisioner_address</a> from libethermind_mesh_core.lib(i.ms_store_provisioner_address) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[1b]">ms_store_proxy_filter_address</a> from libethermind_mesh_core.lib(i.ms_store_proxy_filter_address) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[15]">ms_store_seq_number</a> from libethermind_mesh_core.lib(i.ms_store_seq_number) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[9]">ms_store_subnets</a> from libethermind_mesh_core.lib(i.ms_store_subnets) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[17]">ms_store_tx_states_and_features</a> from libethermind_mesh_core.lib(i.ms_store_tx_states_and_features) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[11]">ms_store_virtual_addresses</a> from libethermind_mesh_core.lib(i.ms_store_virtual_addresses) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[b3]">net_handle_secure_beacon</a> from libethermind_mesh_core.lib(i.net_handle_secure_beacon) referenced from libethermind_mesh_core.lib(i.ms_net_init)
 <LI><a href="#[b8]">net_tx_timeout_handler</a> from libethermind_mesh_core.lib(i.net_tx_timeout_handler) referenced from libethermind_mesh_core.lib(i.net_trigger_tx)
 <LI><a href="#[b9]">netif_adv_recv_cb</a> from libethermind_mesh_core.lib(i.netif_adv_recv_cb) referenced from libethermind_mesh_core.lib(i.netif_init)
 <LI><a href="#[ba]">netif_gatt_recv_cb</a> from libethermind_mesh_core.lib(i.netif_gatt_recv_cb) referenced from libethermind_mesh_core.lib(i.netif_init)
 <LI><a href="#[60]">osalInitTasks</a> from osal_blemesh.o(i.osalInitTasks) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[59]">osal_CbTimerProcessEvent</a> from bb_rom_sym_m0.txt(ABSOLUTE) referenced from osal_blemesh.o(.constdata)
 <LI><a href="#[48]">osal_idle_task</a> from pwrmgr.o(_section_sram_code_) referenced from pwrmgr.o(i.hal_pwrmgr_init)
 <LI><a href="#[47]">pin_event_handler</a> from donglekey.o(i.pin_event_handler) referenced from donglekey.o(i.dongleKey_init)
 <LI><a href="#[d6]">prov_access_state_handler</a> from libethermind_mesh_core.lib(i.prov_access_state_handler) referenced from libethermind_mesh_core.lib(.constdata)
 <LI><a href="#[b4]">prov_adv_recv_cb</a> from libethermind_mesh_core.lib(i.prov_adv_recv_cb) referenced from libethermind_mesh_core.lib(i.ms_prov_init)
 <LI><a href="#[bf]">prov_complete_timeout_handler</a> from libethermind_mesh_core.lib(i.prov_complete_timeout_handler) referenced from libethermind_mesh_core.lib(i.se_prov_complete_handler)
 <LI><a href="#[b5]">prov_gatt_recv_cb</a> from libethermind_mesh_core.lib(i.prov_gatt_recv_cb) referenced from libethermind_mesh_core.lib(i.ms_prov_init)
 <LI><a href="#[b6]">prov_handle_unprovisioned_beacon</a> from libethermind_mesh_core.lib(i.prov_handle_unprovisioned_beacon) referenced from libethermind_mesh_core.lib(i.ms_prov_init)
 <LI><a href="#[bd]">prov_link_ack_timeout_handler</a> from libethermind_mesh_core.lib(i.prov_link_ack_timeout_handler) referenced from libethermind_mesh_core.lib(i.prov_handle_adv_message)
 <LI><a href="#[bd]">prov_link_ack_timeout_handler</a> from libethermind_mesh_core.lib(i.prov_link_ack_timeout_handler) referenced from libethermind_mesh_core.lib(i.prov_link_open)
 <LI><a href="#[bc]">prov_pdu_ack_timeout_handler</a> from libethermind_mesh_core.lib(i.prov_pdu_ack_timeout_handler) referenced from libethermind_mesh_core.lib(i.prov_framensend_pb_adv_pdu)
 <LI><a href="#[be]">prov_proc_timeout_handler</a> from libethermind_mesh_core.lib(i.prov_proc_timeout_handler) referenced from libethermind_mesh_core.lib(i.prov_restart_proc_timer)
 <LI><a href="#[68]">rf_calibrate1</a> from rf_phy_driver.o(i.rf_calibrate1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[69]">rf_phy_change_cfg0</a> from rf_phy_driver.o(i.rf_phy_change_cfg0) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[63]">rf_phy_ini</a> from rf_phy_driver.o(i.rf_phy_ini) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[d9]">se_prov_capabilities_handler</a> from libethermind_mesh_core.lib(i.se_prov_capabilities_handler) referenced from libethermind_mesh_core.lib(.constdata)
 <LI><a href="#[e0]">se_prov_complete_handler</a> from libethermind_mesh_core.lib(i.se_prov_complete_handler) referenced from libethermind_mesh_core.lib(.constdata)
 <LI><a href="#[dd]">se_prov_confirmation_handler</a> from libethermind_mesh_core.lib(i.se_prov_confirmation_handler) referenced from libethermind_mesh_core.lib(.constdata)
 <LI><a href="#[df]">se_prov_data_handler</a> from libethermind_mesh_core.lib(i.se_prov_data_handler) referenced from libethermind_mesh_core.lib(.constdata)
 <LI><a href="#[d8]">se_prov_error_handler</a> from libethermind_mesh_core.lib(i.se_prov_error_handler) referenced 9 times from libethermind_mesh_core.lib(.constdata)
 <LI><a href="#[dc]">se_prov_inputcom_handler</a> from libethermind_mesh_core.lib(i.se_prov_inputcom_handler) referenced from libethermind_mesh_core.lib(.constdata)
 <LI><a href="#[d7]">se_prov_invite_handler</a> from libethermind_mesh_core.lib(i.se_prov_invite_handler) referenced from libethermind_mesh_core.lib(.constdata)
 <LI><a href="#[db]">se_prov_pubkey_handler</a> from libethermind_mesh_core.lib(i.se_prov_pubkey_handler) referenced from libethermind_mesh_core.lib(.constdata)
 <LI><a href="#[de]">se_prov_random_handler</a> from libethermind_mesh_core.lib(i.se_prov_random_handler) referenced from libethermind_mesh_core.lib(.constdata)
 <LI><a href="#[da]">se_prov_start_handler</a> from libethermind_mesh_core.lib(i.se_prov_start_handler) referenced from libethermind_mesh_core.lib(.constdata)
 <LI><a href="#[c3]">smTo_timerCB</a> from sm_task.o(i.smTo_timerCB) referenced from sm_mgr.o(i.smStartRspTimer)
 <LI><a href="#[c2]">smpBuildPairingFailed</a> from smp.o(i.smpBuildPairingFailed) referenced from sm_pairing.o(i.smSendFailAndEnd)
 <LI><a href="#[c0]">smpBuildPairingReq</a> from smp.o(i.smpBuildPairingReq) referenced from sm_pairing.o(i.smGeneratePairingReqRsp)
 <LI><a href="#[c1]">smpBuildPairingRsp</a> from smp.o(i.smpBuildPairingRsp) referenced from sm_pairing.o(i.smGeneratePairingReqRsp)
 <LI><a href="#[87]">smpBuildSecurityReq</a> from smp.o(i.smpBuildSecurityReq) referenced from gap_perilinkmgr.o(i.GAP_SendSlaveSecurityRequest)
 <LI><a href="#[c4]">timer_timeout_handler</a> from em_timer.o(i.timer_timeout_handler) referenced from em_timer.o(i.timer_add_entity)
 <LI><a href="#[b7]">trn_pkt_in</a> from libethermind_mesh_core.lib(i.trn_pkt_in) referenced from libethermind_mesh_core.lib(i.ms_trn_init)
 <LI><a href="#[c5]">trn_sub_timeout_handler</a> from libethermind_mesh_core.lib(i.trn_sub_timeout_handler) referenced from libethermind_mesh_core.lib(i.trn_start_heartbeat_sub_timer)
 <LI><a href="#[ab]">uart_wakeup_process_0</a> from uart.o(i.uart_wakeup_process_0) referenced from uart.o(i.hal_uart_init)
 <LI><a href="#[aa]">uart_wakeup_process_1</a> from uart.o(i.uart_wakeup_process_1) referenced from uart.o(i.hal_uart_init)
 <LI><a href="#[99]">vendormodel_client_cb</a> from vendormodel_client.o(i.vendormodel_client_cb) referenced from vendormodel_client.o(i.MS_vendormodel_client_init)
 <LI><a href="#[6e]">wakeupProcess1</a> from patch.o(i.wakeupProcess1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[6d]">wakeup_init1</a> from patch.o(i.wakeup_init1) referenced from patch.o(_section_xip_code_)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4a6]"></a>P256_ecdh_keygen</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyplus_ecdh_init (via Veneer)
</UL>

<P><STRONG><a name="[4a5]"></a>P256_ecdh_shared_secret</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyplus_ecdh_generate_secret (via Veneer)
</UL>

<P><STRONG><a name="[117]"></a>__aeabi_uidivmod</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_init (via Veneer)
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;number (via Veneer)
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByTypeReq (via Veneer)
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq (via Veneer)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer (via Veneer)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ParseReadByTypeRsp (via Veneer)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ParseFindInfoRsp (via Veneer)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnUpdate1 (via Veneer)
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capPktToSegmentBuff (via Veneer)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1 (via Veneer)
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_ScanTRX0 (via Veneer)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_adptive_adj_next_time1 (via Veneer)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core (via Veneer)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pb_adv_pdu (via Veneer)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_send_seg_pdu (via Veneer)
</UL>

<P><STRONG><a name="[1e7]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txmit_buf_use_tx_buf (via Veneer)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_SetParameter (via Veneer)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer (via Veneer)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_encr_start (via Veneer)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_auth_start (via Veneer)
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_init (via Veneer)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_reflash (via Veneer)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_delete_device_key (via Veneer)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_setup (via Veneer)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_set_authval (via Veneer)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_send_pdu (via Veneer)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_bind (via Veneer)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_read_static_oob_auth_pl (via Veneer)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_read_device_oob_pubkey_pl (via Veneer)
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_send (via Veneer)
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_bcon_send (via Veneer)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_cmac (via Veneer)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_ccm_encrypt (via Veneer)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_config_client_send_reliable_pdu (via Veneer)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_vendormodel_client_send_reliable_pdu (via Veneer)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_config_client_appkey_binding (via Veneer)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_config_client_appkey_add (via Veneer)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_netkey_generate (via Veneer)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_generate_subkeys (via Veneer)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_finalize_mac (via Veneer)
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_virtual_addresses (via Veneer)
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_tx_states_and_features (via Veneer)
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_subnets (via Veneer)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_seq_number (via Veneer)
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_proxy_filter_address (via Veneer)
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_provisioner_address (via Veneer)
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_non_virtual_addresses (via Veneer)
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_models (via Veneer)
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_elements (via Veneer)
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_element_addresses (via Veneer)
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_dev_key (via Veneer)
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_appkeys (via Veneer)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pb_adv_pdu (via Veneer)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_unprovisioned_beacon (via Veneer)
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_generate_authkeys (via Veneer)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_calc_confirm (via Veneer)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_start_handler (via Veneer)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_random_handler (via Veneer)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_pubkey_handler (via Veneer)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_invite_handler (via Veneer)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_data_handler (via Veneer)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_confirmation_handler (via Veneer)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_capabilities_handler (via Veneer)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_link_open (via Veneer)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k3 (via Veneer)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k2 (via Veneer)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_search_and_add_virtual_address (via Veneer)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_update_key_refresh_phase (via Veneer)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_save_netkey_at_offset (via Veneer)
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_create_keys_from_netkey (via Veneer)
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_appkey_refresh (via Veneer)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_update_delete_appkey (via Veneer)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_device_key (via Veneer)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_appkey (via Veneer)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_send_pdu (via Veneer)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_subnet_privacy_key (via Veneer)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_subnet_network_id (via Veneer)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_subnet_encryption_key (via Veneer)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_subnet_beacon_key (via Veneer)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_netkey_at_offset (via Veneer)
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tx_enqueue (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_net_netkey_update (via Veneer)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_send (via Veneer)
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_lookup_nid (via Veneer)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_lookup_network_id (via Veneer)
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_decode_frame (via Veneer)
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_create_pecb_input (via Veneer)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frame_secure_pdu (via Veneer)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_lookup_aid (via Veneer)
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frame_decrypt_pdu (via Veneer)
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_transmit_segment (via Veneer)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_send_seg_pdu (via Veneer)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ltrn_send_pdu (via Veneer)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_seg_pdu (via Veneer)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_send_pdu (via Veneer)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_bcast_unprovisioned_beacon (via Veneer)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;brr_read_data_ind (via Veneer)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_init (via Veneer)
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_gatt_message (via Veneer)
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_adv_message (via Veneer)
</UL>

<P><STRONG><a name="[16b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_low_power_io_init (via Veneer)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unregister (via Veneer)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add_entity (via Veneer)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_send_pdu (via Veneer)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_add_bearer (via Veneer)
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyplus_ecdh_init (via Veneer)
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_set_provision_data (via Veneer)
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete (via Veneer)
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitarray_get_lowest_bit_set (via Veneer)
</UL>

<P><STRONG><a name="[49a]"></a>__aeabi_memset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init (via Veneer)
</UL>

<P><STRONG><a name="[22c]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_auth_start (via Veneer)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_vendor_model_set (via Veneer)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_delete_device_key (via Veneer)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_reset (via Veneer)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLI_strtoarray (via Veneer)
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_init_dev_key_table (via Veneer)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_model_publication (via Veneer)
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_init (via Veneer)
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_server_set_filter (via Veneer)
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_iface_down (via Veneer)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_init (via Veneer)
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_create_pecb_input (via Veneer)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_trn_init (via Veneer)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_init (via Veneer)
</UL>

<P><STRONG><a name="[170]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init (via Veneer)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_init (via Veneer)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init (via Veneer)
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_deinit (via Veneer)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_reset (via Veneer)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_remove_bearer (via Veneer)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_dump_bytes (via Veneer)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_set_publish_address (via Veneer)
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_virtual_addresses (via Veneer)
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_subnets (via Veneer)
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_non_virtual_addresses (via Veneer)
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_models (via Veneer)
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_elements (via Veneer)
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_dev_key (via Veneer)
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_appkeys (via Veneer)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_unprovisioned_beacon (via Veneer)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_random_handler (via Veneer)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_pubkey_handler (via Veneer)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_data_handler (via Veneer)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_confirmation_handler (via Veneer)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_link_open (via Veneer)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_free_context (via Veneer)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_alloc_context (via Veneer)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitarray_reset_all (via Veneer)
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_init (via Veneer)
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_config_client_set_publish_address (via Veneer)
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_init_sar_contexts (via Veneer)
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_init_replay_cache (via Veneer)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_alloc_replay_cache (via Veneer)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_trn_init (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_net_init (via Veneer)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_common_init_transition_timer (via Veneer)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_brr_init (via Veneer)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_init (via Veneer)
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_gatt_message (via Veneer)
</UL>

<P><STRONG><a name="[36d]"></a>strlen</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_start (via Veneer)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_group_select (via Veneer)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_core_modelc_config_netkey_update (via Veneer)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_core_modelc_config_key_refresh_phase_set (via Veneer)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_prov_callback (via Veneer)
</UL>

<P><STRONG><a name="[22a]"></a>strcmp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLI_process_line (via Veneer)
</UL>

<P><STRONG><a name="[2cd]"></a>memcmp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_ad (via Veneer)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_cmac (via Veneer)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_update_netkey (via Veneer)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sample_binding_app_key (via Veneer)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_prov_callback (via Veneer)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_finalize_mac (via Veneer)
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_findcontext_by_uuid (via Veneer)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_findcontext_by_brr (via Veneer)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_calc_confirm (via Veneer)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_data_handler (via Veneer)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_search_and_add_virtual_address (via Veneer)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_appkey (via Veneer)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_lookup_network_id (via Veneer)
</UL>

<P><STRONG><a name="[11d]"></a>__aeabi_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_Encrypt1 (via Veneer)
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_Decrypt1 (via Veneer)
</UL>

<P><STRONG><a name="[115]"></a>HCI_CommandStatusEvent</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ConnUpdateCmd (via Veneer)
</UL>

<P><STRONG><a name="[284]"></a>HCI_DisconnectCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_TerminateLinkReq (via Veneer)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnectNext (via Veneer)
</UL>

<P><STRONG><a name="[273]"></a>HCI_GAPTaskRegister</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init (via Veneer)
</UL>

<P><STRONG><a name="[2bc]"></a>HCI_HostNumCompletedPktCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HostNumCompletedPkts (via Veneer)
</UL>

<P><STRONG><a name="[1de]"></a>HCI_Init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks (via Veneer)
</UL>

<P><STRONG><a name="[2bd]"></a>HCI_L2CAPTaskRegister</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Init (via Veneer)
</UL>

<P><STRONG><a name="[3dd]"></a>HCI_LE_CreateConnCancelCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapCancelLinkReq (via Veneer)
</UL>

<P><STRONG><a name="[3ff]"></a>HCI_LE_ReadBufSizeCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapReadBD_ADDRStatus (via Veneer)
</UL>

<P><STRONG><a name="[285]"></a>HCI_LE_SetAdvDataCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_UpdateAdvertisingData (via Veneer)
</UL>

<P><STRONG><a name="[271]"></a>HCI_LE_SetAdvEnableCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_EndDiscoverable (via Veneer)
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetAdvParamsStatus (via Veneer)
</UL>

<P><STRONG><a name="[405]"></a>HCI_LE_SetAdvParamCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetAdvParams (via Veneer)
</UL>

<P><STRONG><a name="[3fc]"></a>HCI_LE_SetRandomAddressCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessNewAddr (via Veneer)
</UL>

<P><STRONG><a name="[403]"></a>HCI_LE_SetScanEnableCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendScanEnable (via Veneer)
</UL>

<P><STRONG><a name="[270]"></a>HCI_LE_SetScanParamCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceDiscoveryRequest (via Veneer)
</UL>

<P><STRONG><a name="[286]"></a>HCI_LE_SetScanRspDataCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_UpdateAdvertisingData (via Veneer)
</UL>

<P><STRONG><a name="[58]"></a>HCI_ProcessEvent</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> osal_blemesh.o(.constdata)
</UL>
<P><STRONG><a name="[278]"></a>HCI_ReadBDADDRCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ParamsInit (via Veneer)
</UL>

<P><STRONG><a name="[253]"></a>HCI_ReadRssiCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent (via Veneer)
</UL>

<P><STRONG><a name="[111]"></a>HCI_SendDataPkt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Fragment_SendDataPkt (via Veneer)
</UL>

<P><STRONG><a name="[3fa]"></a>HCI_ValidConnTimeParams</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessL2CAPSignalEvt (via Veneer)
</UL>

<P><STRONG><a name="[2c7]"></a>HCI_bm_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_bm_alloc (via Veneer)
</UL>

<P><STRONG><a name="[26]"></a>HardFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[1cb]"></a>LL_AdvReportCback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_ScanTRX0 (via Veneer)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
</UL>

<P><STRONG><a name="[116]"></a>LL_ConnActive</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnUpdate1 (via Veneer)
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartEncrypt1 (via Veneer)
</UL>

<P><STRONG><a name="[119]"></a>LL_CreateConn0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CreateConn1 (via Veneer)
</UL>

<P><STRONG><a name="[1a7]"></a>LL_ENC_AES128_Encrypt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_Rand (via Veneer)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_netkey_generate (via Veneer)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[11a]"></a>LL_ENC_AES128_Encrypt0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_AES128_Encrypt1 (via Veneer)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finidv (via Veneer)
</UL>

<P><STRONG><a name="[1b8]"></a>LL_ENC_Encrypt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupStartEncRsp (via Veneer)
</UL>

<P><STRONG><a name="[13f]"></a>LL_ENC_GenDeviceIV</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartEncrypt1 (via Veneer)
</UL>

<P><STRONG><a name="[13e]"></a>LL_ENC_GenDeviceSKD</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartEncrypt1 (via Veneer)
</UL>

<P><STRONG><a name="[11c]"></a>LL_ENC_GenerateNonce</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_Encrypt1 (via Veneer)
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_Decrypt1 (via Veneer)
</UL>

<P><STRONG><a name="[1d2]"></a>LL_ENC_GeneratePseudoRandNum</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_ScanTRX0 (via Veneer)
</UL>

<P><STRONG><a name="[140]"></a>LL_ENC_GenerateTrueRandNum</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartEncrypt1 (via Veneer)
</UL>

<P><STRONG><a name="[11b]"></a>LL_ENC_LoadKey</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_Encrypt1 (via Veneer)
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_Decrypt1 (via Veneer)
</UL>

<P><STRONG><a name="[190]"></a>LL_EncChangeCback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[191]"></a>LL_EncKeyRefreshCback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[1a6]"></a>LL_EncLtkReqCback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[3d4]"></a>LL_Encrypt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_encrypt (via Veneer)
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEncryptLocal (via Veneer)
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEncrypt (via Veneer)
</UL>

<P><STRONG><a name="[1dd]"></a>LL_Init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks (via Veneer)
</UL>

<P><STRONG><a name="[17a]"></a>LL_InitConnectContext</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init (via Veneer)
</UL>

<P><STRONG><a name="[57]"></a>LL_ProcessEvent</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> osal_blemesh.o(.constdata)
</UL>
<P><STRONG><a name="[3c9]"></a>LL_Rand</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_queue_depth_check (via Veneer)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_generate_random_bytes (via Veneer)
</UL>

<P><STRONG><a name="[197]"></a>LL_ReadRemoteUsedFeaturesCompleteCback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[19a]"></a>LL_ReadRemoteVersionInfoCback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[13a]"></a>LL_SetAdvParam0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvParam1 (via Veneer)
</UL>

<P><STRONG><a name="[13b]"></a>LL_SetDataLengh0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetDataLengh1 (via Veneer)
</UL>

<P><STRONG><a name="[13d]"></a>LL_SetScanParam0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanParam1 (via Veneer)
</UL>

<P><STRONG><a name="[2bb]"></a>LL_TX_bm_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Fragment_bm_alloc (via Veneer)
</UL>

<P><STRONG><a name="[13c]"></a>LL_evt_schedule</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_ScanTRX0 (via Veneer)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanControl1 (via Veneer)
</UL>

<P><STRONG><a name="[141]"></a>LL_set_default_conn_params0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_set_default_conn_params1 (via Veneer)
</UL>

<P><STRONG><a name="[25]"></a>NMI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[153]"></a>WaitRTCCount</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spif_wait_nobusy_x (via Veneer)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_96MXtal_by_rcTracking (via Veneer)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_16MXtal_by_rcTracking (via Veneer)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_Output (via Veneer)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc32k_calibration (via Veneer)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1 (via Veneer)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_RTC1 (via Veneer)
</UL>

<P><STRONG><a name="[134]"></a>__ARM_common_switch8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg (via Veneer)
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessGAPMsg (via Veneer)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_SetParameter (via Veneer)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ggs_ReadAttrCB (via Veneer)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_config_client_send_reliable_pdu (via Veneer)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_prov_callback (via Veneer)
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPeriProcessHCICmdCompleteEvt (via Veneer)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_tp_cal (via Veneer)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rxDcoc_cfg (via Veneer)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvControl1 (via Veneer)
</UL>

<P><STRONG><a name="[1f4]"></a>app_wakeup_process</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1 (via Veneer)
</UL>

<P><STRONG><a name="[139]"></a>clear_timer</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanControl1 (via Veneer)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvControl1 (via Veneer)
</UL>

<P><STRONG><a name="[4cb]"></a>clk_get_pclk</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_init (via Veneer)
</UL>

<P><STRONG><a name="[1d6]"></a>clk_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
</UL>

<P><STRONG><a name="[10d]"></a>config_RTC</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_enter_sleep_rtc_reset (via Veneer)
</UL>

<P><STRONG><a name="[171]"></a>disableSleep</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unlock (via Veneer)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_lock (via Veneer)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_init (via Veneer)
</UL>

<P><STRONG><a name="[107]"></a>drv_disable_irq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txmit_buf_use_tx_buf (via Veneer)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write (via Veneer)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read (via Veneer)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase_sector (via Veneer)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_tag_flush (via Veneer)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_unlock (via Veneer)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_lock (via Veneer)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unlock (via Veneer)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_lock (via Veneer)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_enter_sleep_rtc_reset (via Veneer)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unregister (via Veneer)
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_ScanTRX0 (via Veneer)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSecScan1 (via Veneer)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanControl1 (via Veneer)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvControl1 (via Veneer)
</UL>

<P><STRONG><a name="[108]"></a>drv_enable_irq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txmit_buf_use_tx_buf (via Veneer)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write (via Veneer)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read (via Veneer)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase_sector (via Veneer)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_tag_flush (via Veneer)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_unlock (via Veneer)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_lock (via Veneer)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unlock (via Veneer)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_lock (via Veneer)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unregister (via Veneer)
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_ScanTRX0 (via Veneer)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSecScan1 (via Veneer)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanControl1 (via Veneer)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvControl1 (via Veneer)
</UL>

<P><STRONG><a name="[1d3]"></a>drv_irq_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1 (via Veneer)
</UL>

<P><STRONG><a name="[147]"></a>efuse_read</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finidv (via Veneer)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_efuse_chip_version_check (via Veneer)
</UL>

<P><STRONG><a name="[172]"></a>enableSleep</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unlock (via Veneer)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config (via Veneer)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_init (via Veneer)
</UL>

<P><STRONG><a name="[10f]"></a>enter_sleep_off_mode</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_enter_sleep_rtc_reset (via Veneer)
</UL>

<P><STRONG><a name="[17f]"></a>getMcuPrecisionCount</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_release_debonce_timer_handler (via Veneer)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_press_debonce_timer_handler (via Veneer)
</UL>

<P><STRONG><a name="[185]"></a>getRxBufferSize</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llMasterEvt_TaskEndOk1 (via Veneer)
</UL>

<P><STRONG><a name="[1bd]"></a>getTxBufferSize</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_generateTxBuffer1 (via Veneer)
</UL>

<P><STRONG><a name="[1be]"></a>get_tx_read_ptr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_generateTxBuffer1 (via Veneer)
</UL>

<P><STRONG><a name="[1ad]"></a>llCalcMaxScanTime</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSecScan1 (via Veneer)
</UL>

<P><STRONG><a name="[184]"></a>llConnTerminate</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llMasterEvt_TaskEndOk1 (via Veneer)
</UL>

<P><STRONG><a name="[181]"></a>llConnTerminate0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llConnTerminate1 (via Veneer)
</UL>

<P><STRONG><a name="[18c]"></a>llDequeueCtrlPkt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[118]"></a>llEnqueueCtrlPkt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnUpdate1 (via Veneer)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_generateTxBuffer1 (via Veneer)
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartEncrypt1 (via Veneer)
</UL>

<P><STRONG><a name="[3a2]"></a>llInitFeatureSet2MPHY</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_Init (via Veneer)
</UL>

<P><STRONG><a name="[3a3]"></a>llInitFeatureSetDLE</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_Init (via Veneer)
</UL>

<P><STRONG><a name="[19d]"></a>llPduLengthUpdate</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[183]"></a>llPhyModeCtrlUpdateNotify</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llMasterEvt_TaskEndOk1 (via Veneer)
</UL>

<P><STRONG><a name="[182]"></a>llProcessChanMap</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llConnTerminate1 (via Veneer)
</UL>

<P><STRONG><a name="[187]"></a>llProcessMasterControlProcedures</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llMasterEvt_TaskEndOk1 (via Veneer)
</UL>

<P><STRONG><a name="[186]"></a>llProcessRxData</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llMasterEvt_TaskEndOk1 (via Veneer)
</UL>

<P><STRONG><a name="[188]"></a>llProcessTxData</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llMasterEvt_TaskEndOk1 (via Veneer)
</UL>

<P><STRONG><a name="[1ac]"></a>llProcessTxData0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessTxData1 (via Veneer)
</UL>

<P><STRONG><a name="[1cf]"></a>llReleaseConnId</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
</UL>

<P><STRONG><a name="[194]"></a>llReplaceCtrlPkt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[12f]"></a>llSecAdvAllow</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[135]"></a>llSetupAdv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvControl1 (via Veneer)
</UL>

<P><STRONG><a name="[1a1]"></a>llSetupCTEReq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[1a3]"></a>llSetupCTERsp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[19b]"></a>llSetupDataLenghtReq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[19c]"></a>llSetupDataLenghtRsp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[18f]"></a>llSetupEncReq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[1a5]"></a>llSetupEncRsp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[196]"></a>llSetupFeatureSetReq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[198]"></a>llSetupFeatureSetRsp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[189]"></a>llSetupNextMasterEvent</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llMasterEvt_TaskEndOk1 (via Veneer)
</UL>

<P><STRONG><a name="[193]"></a>llSetupPauseEncReq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[195]"></a>llSetupPauseEncRsp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[19e]"></a>llSetupPhyReq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[1aa]"></a>llSetupPhyRsp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[19f]"></a>llSetupPhyUpdateInd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[1a0]"></a>llSetupRejectExtInd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[1a9]"></a>llSetupRejectInd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[1d0]"></a>llSetupScan</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_ScanTRX0 (via Veneer)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
</UL>

<P><STRONG><a name="[130]"></a>llSetupSecAdvEvt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[133]"></a>llSetupSecInit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[132]"></a>llSetupSecScan</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[1a8]"></a>llSetupStartEncReq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[18b]"></a>llSetupTermInd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[1a4]"></a>llSetupUnknownRsp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[18e]"></a>llSetupUpdateChanReq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[18d]"></a>llSetupUpdateParamReq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[199]"></a>llSetupVersionIndReq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[1ca]"></a>ll_CalcRandomAddr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
</UL>

<P><STRONG><a name="[1cc]"></a>ll_ResolveRandomAddrs</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
</UL>

<P><STRONG><a name="[11f]"></a>ll_debug_output</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1 (via Veneer)
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_ScanTRX0 (via Veneer)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanControl1 (via Veneer)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvControl1 (via Veneer)
</UL>

<P><STRONG><a name="[1c5]"></a>ll_getRPAListEntry</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_ScanTRX0 (via Veneer)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
</UL>

<P><STRONG><a name="[122]"></a>ll_hw_clr_irq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_ScanTRX0 (via Veneer)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
</UL>

<P><STRONG><a name="[1ba]"></a>ll_hw_get_anchor</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_adptive_adj_next_time1 (via Veneer)
</UL>

<P><STRONG><a name="[120]"></a>ll_hw_get_irq_status</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[1b9]"></a>ll_hw_get_loop_cycle</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_adptive_adj_next_time1 (via Veneer)
</UL>

<P><STRONG><a name="[1c3]"></a>ll_hw_get_rfifo_depth</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_ScanTRX0 (via Veneer)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
</UL>

<P><STRONG><a name="[1c2]"></a>ll_hw_get_rfifo_info</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_read_rfifo1 (via Veneer)
</UL>

<P><STRONG><a name="[1bc]"></a>ll_hw_get_tfifo_wrptr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_generateTxBuffer1 (via Veneer)
</UL>

<P><STRONG><a name="[121]"></a>ll_hw_get_tr_mode</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_go1 (via Veneer)
</UL>

<P><STRONG><a name="[1b7]"></a>ll_hw_go</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSecScan1 (via Veneer)
</UL>

<P><STRONG><a name="[1b6]"></a>ll_hw_ign_rfifo</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSecScan1 (via Veneer)
</UL>

<P><STRONG><a name="[1af]"></a>ll_hw_rst_rfifo</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSecScan1 (via Veneer)
</UL>

<P><STRONG><a name="[1ae]"></a>ll_hw_rst_tfifo</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSecScan1 (via Veneer)
</UL>

<P><STRONG><a name="[1ed]"></a>ll_hw_set_crc_fmt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_bb_cfg (via Veneer)
</UL>

<P><STRONG><a name="[1ab]"></a>ll_hw_set_cte_txSupp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[1f8]"></a>ll_hw_set_empty_head</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
</UL>

<P><STRONG><a name="[1fa]"></a>ll_hw_set_loop_timeout</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
</UL>

<P><STRONG><a name="[131]"></a>ll_hw_set_rx_timeout</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_go1 (via Veneer)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSecScan1 (via Veneer)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanControl1 (via Veneer)
</UL>

<P><STRONG><a name="[1f9]"></a>ll_hw_set_rx_timeout_1st</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
</UL>

<P><STRONG><a name="[1b5]"></a>ll_hw_set_srx</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSecScan1 (via Veneer)
</UL>

<P><STRONG><a name="[1cd]"></a>ll_hw_set_stx</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
</UL>

<P><STRONG><a name="[1fb]"></a>ll_hw_set_timing</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
</UL>

<P><STRONG><a name="[1c8]"></a>ll_hw_set_trx</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
</UL>

<P><STRONG><a name="[1c9]"></a>ll_hw_set_trx_settle</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
</UL>

<P><STRONG><a name="[1c7]"></a>ll_hw_set_tx_rx_interval</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
</UL>

<P><STRONG><a name="[1f0]"></a>ll_hw_tx2rx_timing_config</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ini (via Veneer)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1 (via Veneer)
</UL>

<P><STRONG><a name="[1bb]"></a>ll_hw_write_tfifo</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_generateTxBuffer1 (via Veneer)
</UL>

<P><STRONG><a name="[1c6]"></a>ll_isAddrInWhiteList</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
</UL>

<P><STRONG><a name="[1c4]"></a>ll_isIrkAllZero</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
</UL>

<P><STRONG><a name="[12b]"></a>ll_processBasicIRQ</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_secondaryScanSRX (via Veneer)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_secondaryInitSRX (via Veneer)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_secondaryAdvTRX (via Veneer)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_ScanTRX (via Veneer)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX (via Veneer)
</UL>

<P><STRONG><a name="[123]"></a>ll_processExtAdvIRQ</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[125]"></a>ll_processExtInitIRQ</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[124]"></a>ll_processExtScanIRQ</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[126]"></a>ll_processPrdAdvIRQ</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[127]"></a>ll_processPrdScanIRQ</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[12e]"></a>ll_schedule_next_event</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_ScanTRX0 (via Veneer)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
</UL>

<P><STRONG><a name="[18a]"></a>ll_scheduler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llMasterEvt_TaskEndOk1 (via Veneer)
</UL>

<P><STRONG><a name="[14b]"></a>log_printf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hard_fault (via Veneer)
</UL>

<P><STRONG><a name="[1ce]"></a>move_to_master_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
</UL>

<P><STRONG><a name="[23a]"></a>osalFindTimer</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer (via Veneer)
</UL>

<P><STRONG><a name="[1f2]"></a>osalTimeUpdate</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer (via Veneer)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer (via Veneer)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1 (via Veneer)
</UL>

<P><STRONG><a name="[1df]"></a>osal_CbTimerInit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks (via Veneer)
</UL>

<P><STRONG><a name="[59]"></a>osal_CbTimerProcessEvent</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> osal_blemesh.o(.constdata)
</UL>
<P><STRONG><a name="[41c]"></a>osal_CbTimerStart</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add_entity (via Veneer)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendReq (via Veneer)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattStartTimer (via Veneer)
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smStartRspTimer (via Veneer)
</UL>

<P><STRONG><a name="[23c]"></a>osal_CbTimerStop</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer (via Veneer)
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capStopTimer (via Veneer)
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattStopTimer (via Veneer)
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smStopRspTimer (via Veneer)
</UL>

<P><STRONG><a name="[239]"></a>osal_CbTimerUpdate</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer (via Veneer)
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessWriteLong (via Veneer)
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReliableWrites (via Veneer)
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadByType (via Veneer)
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadByGrpType (via Veneer)
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessMultiReqs (via Veneer)
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessFindInfo (via Veneer)
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smStartRspTimer (via Veneer)
</UL>

<P><STRONG><a name="[3dc]"></a>osal_GetSystemClock</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_timer_get_ms_timestamp (via Veneer)
</UL>

<P><STRONG><a name="[2c8]"></a>osal_bm_adjust_header</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_bm_alloc (via Veneer)
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capParsePacket (via Veneer)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capEncapSendData (via Veneer)
</UL>

<P><STRONG><a name="[2c1]"></a>osal_bm_free</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg (via Veneer)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSarBufReset (via Veneer)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRxData (via Veneer)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendCmd (via Veneer)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessRxData (via Veneer)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg (via Veneer)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SegmentPkt_Reset (via Veneer)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ReassemblePkt_Reset (via Veneer)
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capPktToSegmentBuff (via Veneer)
</UL>

<P><STRONG><a name="[23d]"></a>osal_clear_event</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer (via Veneer)
</UL>

<P><STRONG><a name="[401]"></a>osal_get_timeoutEx</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg (via Veneer)
</UL>

<P><STRONG><a name="[391]"></a>osal_init_system</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
</UL>

<P><STRONG><a name="[245]"></a>osal_isbufset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr (via Veneer)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst (via Veneer)
</UL>

<P><STRONG><a name="[1dc]"></a>osal_mem_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_RegisterService (via Veneer)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterService (via Veneer)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks (via Veneer)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authenticate (via Veneer)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceDiscoveryRequest (via Veneer)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable (via Veneer)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_alloc_mem (via Veneer)
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessAdvertDevInfo (via Veneer)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapAllocScanRecs (via Veneer)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_VerifyAuthenSig (via Veneer)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_GenerateAuthenSig (via Veneer)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapAllocAdvRecs (via Veneer)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_StartPairing (via Veneer)
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPairingCompleteCB (via Veneer)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CMAC (via Veneer)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_subkey (via Veneer)
</UL>

<P><STRONG><a name="[234]"></a>osal_mem_free</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Bond (via Veneer)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PeriDevMgrInit (via Veneer)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_free_mem (via Veneer)
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeEstLink (via Veneer)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDevDiscEvent (via Veneer)
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessAdvertDevInfo (via Veneer)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeScanRecs (via Veneer)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_VerifyAuthenSig (via Veneer)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_GenerateAuthenSig (via Veneer)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattResetClientInfo (via Veneer)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeAdvertState (via Veneer)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapAllocAdvRecs (via Veneer)
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Remove (via Veneer)
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPairingCompleteCB (via Veneer)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeAuthLink (via Veneer)
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smFreePairingParams (via Veneer)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CMAC (via Veneer)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_subkey (via Veneer)
</UL>

<P><STRONG><a name="[179]"></a>osal_mem_set_heap</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init (via Veneer)
</UL>

<P><STRONG><a name="[15d]"></a>osal_memcmp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_CompareUUID (via Veneer)
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessFindByTypeValueReq (via Veneer)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr (via Veneer)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrFindAddr (via Veneer)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ConfigDeviceAddr (via Veneer)
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessAdvertDevInfo (via Veneer)
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFindScanRec (via Veneer)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_VerifyAuthenSig (via Veneer)
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReliableWrites (via Veneer)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ResolveRandomAddrs (via Veneer)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finidv (via Veneer)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llConnTerminate1 (via Veneer)
</UL>

<P><STRONG><a name="[1c0]"></a>osal_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg (via Veneer)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_RegisterService (via Veneer)
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr (via Veneer)
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadMultiReq (via Veneer)
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByTypeReq (via Veneer)
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq (via Veneer)
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessPrepareWriteReq (via Veneer)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devInfo_ReadAttrCB (via Veneer)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUartData (via Veneer)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Signable (via Veneer)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authenticate (via Veneer)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr (via Veneer)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrGetPublicAddr (via Veneer)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAuthenticate (via Veneer)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceDiscoveryRequest (via Veneer)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_SetParameter (via Veneer)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ggs_WriteAttrCB (via Veneer)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ggs_ReadAttrCB (via Veneer)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_UpdateAdvertisingData (via Veneer)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable (via Veneer)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent (via Veneer)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_Rand (via Veneer)
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_proxy_notify_data_out (via Veneer)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_prov_notify_data_out (via Veneer)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ConfigDeviceAddr (via Veneer)
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendEstLinkEvent (via Veneer)
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDeviceInfoEvent (via Veneer)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDevDiscEvent (via Veneer)
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessAdvertDevInfo (via Veneer)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ParseWriteReq (via Veneer)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ParseReadByTypeRsp (via Veneer)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ParseReadByTypeReq (via Veneer)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ParsePrepareWriteReq (via Veneer)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ParseHandleValueInd (via Veneer)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ParseFindInfoRsp (via Veneer)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ParseFindByTypeValueReq (via Veneer)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ConvertUUIDto128 (via Veneer)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_BuildReadByTypeReq (via Veneer)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_BuildPrepareWriteReq (via Veneer)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_BuildFindByTypeValueReq (via Veneer)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_BuildReadRsp (via Veneer)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_BuildReadMultiRsp (via Veneer)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_BuildReadByTypeRsp (via Veneer)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_BuildReadByGrpTypeRsp (via Veneer)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_BuildReadBlobRsp (via Veneer)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_BuildPrepareWriteRsp (via Veneer)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_BuildHandleValueInd (via Veneer)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_BuildFindInfoRsp (via Veneer)
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capParsePacket (via Veneer)
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifySignal (via Veneer)
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyData (via Veneer)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessFindInfoReq (via Veneer)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent (via Veneer)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattStoreClientInfo (via Veneer)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattReadByType (via Veneer)
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessWriteLong (via Veneer)
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadByType (via Veneer)
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Add (via Veneer)
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPairingCompleteCB (via Veneer)
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAuthEvent (via Veneer)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ResolveRandomAddrs (via Veneer)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_CalcRandomAddr (via Veneer)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapUpdateConnSignCounter (via Veneer)
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapReadBD_ADDRStatus (via Veneer)
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessRandomAddrComplete (via Veneer)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessNewAddr (via Veneer)
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDeviceInitDoneEvent (via Veneer)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CMAC (via Veneer)
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capPktToSegmentBuff (via Veneer)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_go1 (via Veneer)
</UL>

<P><STRONG><a name="[25d]"></a>osal_memdup</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Bond (via Veneer)
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPairingCompleteCB (via Veneer)
</UL>

<P><STRONG><a name="[1a2]"></a>osal_memset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg (via Veneer)
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr (via Veneer)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_SetNumPrepareWrites (via Veneer)
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessFindByTypeValueReq (via Veneer)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessExecuteWriteReq (via Veneer)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_HandleConnStatusCB (via Veneer)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks (via Veneer)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authenticate (via Veneer)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrBondReq (via Veneer)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAuthenticate (via Veneer)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ParamsInit (via Veneer)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_SetParameter (via Veneer)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_UpdateAdvertisingData (via Veneer)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst (via Veneer)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_Init (via Veneer)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_init (via Veneer)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_InitClient (via Veneer)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_gap_set_adv_params (via Veneer)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ConfigDeviceAddr (via Veneer)
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendEstLinkEvent (via Veneer)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeScanRecs (via Veneer)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapAllocScanRecs (via Veneer)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_VerifyAuthenSig (via Veneer)
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifySignal (via Veneer)
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyData (via Veneer)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent (via Veneer)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattResetClientInfo (via Veneer)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapAllocAdvRecs (via Veneer)
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Remove (via Veneer)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_StartPairing (via Veneer)
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAuthEvent (via Veneer)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSetPairingReqRsp (via Veneer)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ah (via Veneer)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CMAC (via Veneer)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_subkey (via Veneer)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[299]"></a>osal_msg_allocate</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_SendCCCUpdatedEvent (via Veneer)
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendEstLinkEvent (via Veneer)
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendLinkUpdateEvent (via Veneer)
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDeviceInfoEvent (via Veneer)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDevDiscEvent (via Veneer)
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifySignal (via Veneer)
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyData (via Veneer)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capEncapSendData (via Veneer)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent (via Veneer)
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvEnableStatus (via Veneer)
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvDataStatus (via Veneer)
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendMakeDiscEvent (via Veneer)
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTerminateEvent (via Veneer)
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAuthEvent (via Veneer)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapUpdateConnSignCounter (via Veneer)
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessRandomAddrComplete (via Veneer)
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDeviceInitDoneEvent (via Veneer)
</UL>

<P><STRONG><a name="[252]"></a>osal_msg_deallocate</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessEvent (via Veneer)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent (via Veneer)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ProcessEvent (via Veneer)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ProcessEvent (via Veneer)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent (via Veneer)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessEvent (via Veneer)
</UL>

<P><STRONG><a name="[250]"></a>osal_msg_receive</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessEvent (via Veneer)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent (via Veneer)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ProcessEvent (via Veneer)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ProcessEvent (via Veneer)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent (via Veneer)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessEvent (via Veneer)
</UL>

<P><STRONG><a name="[27d]"></a>osal_msg_send</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_SendCCCUpdatedEvent (via Veneer)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent (via Veneer)
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendEstLinkEvent (via Veneer)
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendLinkUpdateEvent (via Veneer)
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDeviceInfoEvent (via Veneer)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDevDiscEvent (via Veneer)
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifySignal (via Veneer)
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyData (via Veneer)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capEncapSendData (via Veneer)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent (via Veneer)
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvEnableStatus (via Veneer)
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvDataStatus (via Veneer)
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendMakeDiscEvent (via Veneer)
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTerminateEvent (via Veneer)
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAuthEvent (via Veneer)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapUpdateConnSignCounter (via Veneer)
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessRandomAddrComplete (via Veneer)
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDeviceInitDoneEvent (via Veneer)
</UL>

<P><STRONG><a name="[392]"></a>osal_pwrmgr_device</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
</UL>

<P><STRONG><a name="[10b]"></a>osal_pwrmgr_powerconserve0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_idle_task (via Veneer)
</UL>

<P><STRONG><a name="[4bf]"></a>osal_rand</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateRandBuf (via Veneer)
</UL>

<P><STRONG><a name="[35f]"></a>osal_revmemcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_VerifyAuthenSig (via Veneer)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_GenerateAuthenSig (via Veneer)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ah (via Veneer)
</UL>

<P><STRONG><a name="[137]"></a>osal_set_event</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg (via Veneer)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_press_process (via Veneer)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUartData (via Veneer)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessEvent (via Veneer)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_Init (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_gap_set_scan_enable (via Veneer)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapIncSignCounter (via Veneer)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanControl1 (via Veneer)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvControl1 (via Veneer)
</UL>

<P><STRONG><a name="[26d]"></a>osal_start_reload_timer</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable (via Veneer)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ConfigDeviceAddr (via Veneer)
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvEnableStatus (via Veneer)
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessRandomAddrComplete (via Veneer)
</UL>

<P><STRONG><a name="[1f5]"></a>osal_start_system</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1 (via Veneer)
</UL>

<P><STRONG><a name="[138]"></a>osal_start_timerEx</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_startConnUpdate (via Veneer)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessOSALMsg (via Veneer)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg (via Veneer)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_timer_start (via Veneer)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent (via Veneer)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_blink_porcess_evt (via Veneer)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessEvent (via Veneer)
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetScanParamStatus (via Veneer)
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvEnableStatus (via Veneer)
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessAdvertisingEvt (via Veneer)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvControl1 (via Veneer)
</UL>

<P><STRONG><a name="[136]"></a>osal_stop_timerEx</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessOSALMsg (via Veneer)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg (via Veneer)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_release_debonce_timer_handler (via Veneer)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceDiscoveryCancel (via Veneer)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_EndDiscoverable (via Veneer)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SendUpdateParam (via Veneer)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent (via Veneer)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_blink_porcess_evt (via Veneer)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ConfigDeviceAddr (via Veneer)
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetScanParamStatus (via Veneer)
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessAdvertisingEvt (via Veneer)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanControl1 (via Veneer)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvControl1 (via Veneer)
</UL>

<P><STRONG><a name="[297]"></a>osal_strlen</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr (via Veneer)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ggs_WriteAttrCB (via Veneer)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ggs_ReadAttrCB (via Veneer)
</UL>

<P><STRONG><a name="[158]"></a>read_LL_remainder_time</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_RTC1 (via Veneer)
</UL>

<P><STRONG><a name="[11e]"></a>read_current_fine_time</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_Rand (via Veneer)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1 (via Veneer)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_go1 (via Veneer)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSecScan1 (via Veneer)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llMasterEvt_TaskEndOk1 (via Veneer)
</UL>

<P><STRONG><a name="[155]"></a>rtc_get_counter</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_16MXtal_by_rcTracking (via Veneer)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1 (via Veneer)
</UL>

<P><STRONG><a name="[1fc]"></a>setSleepMode</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config (via Veneer)
</UL>

<P><STRONG><a name="[1b1]"></a>set_access_address</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSecScan1 (via Veneer)
</UL>

<P><STRONG><a name="[1b2]"></a>set_channel</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSecScan1 (via Veneer)
</UL>

<P><STRONG><a name="[1b0]"></a>set_crc_seed</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSecScan1 (via Veneer)
</UL>

<P><STRONG><a name="[1b4]"></a>set_max_length</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_go1 (via Veneer)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSecScan1 (via Veneer)
</UL>

<P><STRONG><a name="[156]"></a>set_sleep_flag</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_16MXtal_by_rcTracking (via Veneer)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1 (via Veneer)
</UL>

<P><STRONG><a name="[1f3]"></a>set_timer</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1 (via Veneer)
</UL>

<P><STRONG><a name="[1b3]"></a>set_whiten_seed</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSecScan1 (via Veneer)
</UL>

<P><STRONG><a name="[151]"></a>spif_cmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_flash_info (via Veneer)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spif_wait_nobusy_x (via Veneer)
</UL>

<P><STRONG><a name="[17c]"></a>spif_config</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spif_cache_config (via Veneer)
</UL>

<P><STRONG><a name="[166]"></a>spif_erase_sector</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase_sector (via Veneer)
</UL>

<P><STRONG><a name="[152]"></a>spif_rddata</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_flash_info (via Veneer)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spif_wait_nobusy_x (via Veneer)
</UL>

<P><STRONG><a name="[168]"></a>spif_write</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write (via Veneer)
</UL>

<P><STRONG><a name="[1bf]"></a>update_tx_read_ptr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_generateTxBuffer1 (via Veneer)
</UL>

<P><STRONG><a name="[1d4]"></a>init_config</STRONG> (Thumb, 586 bytes, Stack size 24 bytes, patch.o(_section_xip_code_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = init_config
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSleep (via Veneer)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSleepMode (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[1fe]"></a>TRNG_INIT</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, patch.o(_section_xip_code_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TRNG_INIT &rArr; TRNG_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_Init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_Rand
</UL>

<P><STRONG><a name="[1ff]"></a>TRNG_Rand</STRONG> (Thumb, 152 bytes, Stack size 64 bytes, patch.o(_section_xip_code_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TRNG_Rand &rArr; TRNG_INIT &rArr; TRNG_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_INIT
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_current_fine_time (via Veneer)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_AES128_Encrypt (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_rand_generate
</UL>

<P><STRONG><a name="[76]"></a>ATT_BuildErrorRsp</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, att_util.o(i.ATT_BuildErrorRsp))
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_ErrorRsp)
</UL>
<P><STRONG><a name="[77]"></a>ATT_BuildExchangeMTURsp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, att_util.o(i.ATT_BuildExchangeMTURsp))
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_ExchangeMTURsp)
</UL>
<P><STRONG><a name="[78]"></a>ATT_BuildExecuteWriteReq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, att_util.o(i.ATT_BuildExecuteWriteReq))
<BR>[Address Reference Count : 1]<UL><LI> att_client.o(i.ATT_ExecuteWriteReq)
</UL>
<P><STRONG><a name="[79]"></a>ATT_BuildFindByTypeValueReq</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, att_util.o(i.ATT_BuildFindByTypeValueReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ATT_BuildFindByTypeValueReq
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_client.o(i.ATT_FindByTypeValueReq)
</UL>
<P><STRONG><a name="[7a]"></a>ATT_BuildFindByTypeValueRsp</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, att_util.o(i.ATT_BuildFindByTypeValueRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_BuildFindByTypeValueRsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_FindByTypeValueRsp)
</UL>
<P><STRONG><a name="[7b]"></a>ATT_BuildFindInfoReq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, att_util.o(i.ATT_BuildFindInfoReq))
<BR>[Address Reference Count : 1]<UL><LI> att_client.o(i.ATT_FindInfoReq)
</UL>
<P><STRONG><a name="[7c]"></a>ATT_BuildFindInfoRsp</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, att_util.o(i.ATT_BuildFindInfoRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ATT_BuildFindInfoRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_FindInfoRsp)
</UL>
<P><STRONG><a name="[7d]"></a>ATT_BuildHandleValueInd</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, att_util.o(i.ATT_BuildHandleValueInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_BuildHandleValueInd
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> att_server.o(i.ATT_HandleValueInd)
<LI> att_server.o(i.ATT_HandleValueNoti)
</UL>
<P><STRONG><a name="[7e]"></a>ATT_BuildPrepareWriteReq</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, att_util.o(i.ATT_BuildPrepareWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_BuildPrepareWriteReq
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_client.o(i.ATT_PrepareWriteReq)
</UL>
<P><STRONG><a name="[7f]"></a>ATT_BuildPrepareWriteRsp</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, att_util.o(i.ATT_BuildPrepareWriteRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_BuildPrepareWriteRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_PrepareWriteRsp)
</UL>
<P><STRONG><a name="[80]"></a>ATT_BuildReadBlobReq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, att_util.o(i.ATT_BuildReadBlobReq))
<BR>[Address Reference Count : 1]<UL><LI> att_client.o(i.ATT_ReadBlobReq)
</UL>
<P><STRONG><a name="[81]"></a>ATT_BuildReadBlobRsp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, att_util.o(i.ATT_BuildReadBlobRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_BuildReadBlobRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_ReadBlobRsp)
</UL>
<P><STRONG><a name="[83]"></a>ATT_BuildReadByGrpTypeRsp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, att_util.o(i.ATT_BuildReadByGrpTypeRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_BuildReadByGrpTypeRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_ReadByGrpTypeRsp)
</UL>
<P><STRONG><a name="[82]"></a>ATT_BuildReadByTypeReq</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, att_util.o(i.ATT_BuildReadByTypeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_BuildReadByTypeReq
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> att_client.o(i.ATT_ReadByGrpTypeReq)
<LI> att_client.o(i.ATT_ReadByTypeReq)
</UL>
<P><STRONG><a name="[84]"></a>ATT_BuildReadByTypeRsp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, att_util.o(i.ATT_BuildReadByTypeRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_BuildReadByTypeRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_ReadByTypeRsp)
</UL>
<P><STRONG><a name="[85]"></a>ATT_BuildReadMultiRsp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, att_util.o(i.ATT_BuildReadMultiRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_BuildReadMultiRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_ReadMultiRsp)
</UL>
<P><STRONG><a name="[86]"></a>ATT_BuildReadRsp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, att_util.o(i.ATT_BuildReadRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_BuildReadRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_ReadRsp)
</UL>
<P><STRONG><a name="[200]"></a>ATT_CompareUUID</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, att_util.o(i.ATT_CompareUUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ConvertUUIDto128
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_RegisterService
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindNextAttr
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadByGrpTypeReq
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadByType
</UL>

<P><STRONG><a name="[201]"></a>ATT_ConvertUUIDto128</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, att_util.o(i.ATT_ConvertUUIDto128))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_CompareUUID
</UL>

<P><STRONG><a name="[202]"></a>ATT_ErrorRsp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, att_server.o(i.ATT_ErrorRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_ErrorRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessRxData
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerProcessMsgCB
</UL>

<P><STRONG><a name="[204]"></a>ATT_ExchangeMTURsp</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, att_server.o(i.ATT_ExchangeMTURsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = ATT_ExchangeMTURsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_UpdateMtuSize
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[206]"></a>ATT_ExecuteWriteReq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, att_client.o(i.ATT_ExecuteWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_ExecuteWriteReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessWriteLong
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReliableWrites
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattClientHandleTimerCB
</UL>

<P><STRONG><a name="[207]"></a>ATT_ExecuteWriteRsp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, att_server.o(i.ATT_ExecuteWriteRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_ExecuteWriteRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessExecuteWriteReq
</UL>

<P><STRONG><a name="[208]"></a>ATT_FindByTypeValueReq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, att_client.o(i.ATT_FindByTypeValueReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_FindByTypeValueReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessMultiReqs
</UL>

<P><STRONG><a name="[209]"></a>ATT_FindByTypeValueRsp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, att_server.o(i.ATT_FindByTypeValueRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_FindByTypeValueRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessFindByTypeValueReq
</UL>

<P><STRONG><a name="[20a]"></a>ATT_FindInfoReq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, att_client.o(i.ATT_FindInfoReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_FindInfoReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_DiscAllCharDescs
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessFindInfo
</UL>

<P><STRONG><a name="[20b]"></a>ATT_FindInfoRsp</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, att_server.o(i.ATT_FindInfoRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_FindInfoRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessFindInfoReq
</UL>

<P><STRONG><a name="[317]"></a>ATT_GetCurrentMTUSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, att_util.o(i.ATT_GetCurrentMTUSize))
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capPktToSegmentBuff
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_send_pdu
</UL>

<P><STRONG><a name="[20c]"></a>ATT_HandleValueInd</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, att_server.o(i.ATT_HandleValueInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Indication
</UL>

<P><STRONG><a name="[20d]"></a>ATT_HandleValueNoti</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, att_server.o(i.ATT_HandleValueNoti))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Notification
</UL>

<P><STRONG><a name="[2aa]"></a>ATT_InitMtuSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, att_util.o(i.ATT_InitMtuSize))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Init
</UL>

<P><STRONG><a name="[409]"></a>ATT_ParseErrorRsp</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, att_util.o(i.ATT_ParseErrorRsp))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattClientProcessMsgCB
</UL>

<P><STRONG><a name="[e1]"></a>ATT_ParseExchangeMTUReq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, att_util.o(i.ATT_ParseExchangeMTUReq))
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>ATT_ParseExecuteWriteReq</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, att_util.o(i.ATT_ParseExecuteWriteReq))
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>ATT_ParseExecuteWriteRsp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, att_util.o(i.ATT_ParseExecuteWriteRsp))
<BR>[Address Reference Count : 2]<UL><LI> gatt_client.o(i.gattProcessReliableWrites)
<LI> gatt_client.o(i.gattProcessWriteLong)
</UL>
<P><STRONG><a name="[e5]"></a>ATT_ParseFindByTypeValueReq</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, att_util.o(i.ATT_ParseFindByTypeValueReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ATT_ParseFindByTypeValueReq
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>ATT_ParseFindInfoReq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, att_util.o(i.ATT_ParseFindInfoReq))
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>ATT_ParseFindInfoRsp</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, att_util.o(i.ATT_ParseFindInfoRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ATT_ParseFindInfoRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_client.o(i.GATT_DiscAllCharDescs)
</UL>
<P><STRONG><a name="[20e]"></a>ATT_ParseHandleValueInd</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, att_util.o(i.ATT_ParseHandleValueInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_ParseHandleValueInd
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattClientProcessMsgCB
</UL>

<P><STRONG><a name="[20f]"></a>ATT_ParsePacket</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, att_util.o(i.ATT_ParsePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = ATT_ParsePacket &rArr; SM_VerifyAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_VerifyAuthenSig
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessRxData
</UL>

<P><STRONG><a name="[f1]"></a>ATT_ParsePrepareWriteReq</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, att_util.o(i.ATT_ParsePrepareWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_ParsePrepareWriteReq
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>ATT_ParseReadBlobReq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, att_util.o(i.ATT_ParseReadBlobReq))
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>ATT_ParseReadByTypeReq</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, att_util.o(i.ATT_ParseReadByTypeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_ParseReadByTypeReq
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>ATT_ParseReadByTypeRsp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, att_util.o(i.ATT_ParseReadByTypeRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ATT_ParseReadByTypeRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_client.o(i.gattReadByType)
</UL>
<P><STRONG><a name="[ec]"></a>ATT_ParseReadMultiReq</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, att_util.o(i.ATT_ParseReadMultiReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ATT_ParseReadMultiReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>ATT_ParseReadReq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, att_util.o(i.ATT_ParseReadReq))
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[ef]"></a>ATT_ParseWriteReq</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, att_util.o(i.ATT_ParseWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ATT_ParseWriteReq
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[211]"></a>ATT_PrepareWriteReq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, att_client.o(i.ATT_PrepareWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_PrepareWriteReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessWriteLong
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReliableWrites
</UL>

<P><STRONG><a name="[212]"></a>ATT_PrepareWriteRsp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, att_server.o(i.ATT_PrepareWriteRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_PrepareWriteRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessPrepareWriteReq
</UL>

<P><STRONG><a name="[213]"></a>ATT_ReadBlobReq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, att_client.o(i.ATT_ReadBlobReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_ReadBlobReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessMultiReqs
</UL>

<P><STRONG><a name="[214]"></a>ATT_ReadBlobRsp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, att_server.o(i.ATT_ReadBlobRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_ReadBlobRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[215]"></a>ATT_ReadByGrpTypeReq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, att_client.o(i.ATT_ReadByGrpTypeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_ReadByGrpTypeReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadByGrpType
</UL>

<P><STRONG><a name="[216]"></a>ATT_ReadByGrpTypeRsp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, att_server.o(i.ATT_ReadByGrpTypeRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_ReadByGrpTypeRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq
</UL>

<P><STRONG><a name="[217]"></a>ATT_ReadByTypeReq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, att_client.o(i.ATT_ReadByTypeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_ReadByTypeReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattReadByType
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadByType
</UL>

<P><STRONG><a name="[218]"></a>ATT_ReadByTypeRsp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, att_server.o(i.ATT_ReadByTypeRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_ReadByTypeRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByTypeReq
</UL>

<P><STRONG><a name="[219]"></a>ATT_ReadMultiRsp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, att_server.o(i.ATT_ReadMultiRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_ReadMultiRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadMultiReq
</UL>

<P><STRONG><a name="[21a]"></a>ATT_ReadRsp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, att_server.o(i.ATT_ReadRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_ReadRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[205]"></a>ATT_UpdateMtuSize</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, att_util.o(i.ATT_UpdateMtuSize))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ExchangeMTURsp
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattClientProcessMsgCB
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessDisconnectCompleteEvt
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnectionCompleteEvt
</UL>

<P><STRONG><a name="[21b]"></a>ATT_WriteRsp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, att_server.o(i.ATT_WriteRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_WriteRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessWriteReq
</UL>

<P><STRONG><a name="[21c]"></a>BLE_gap_disconnect</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, blemesh.o(i.BLE_gap_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BLE_gap_disconnect &rArr; GAP_TerminateLinkReq &rArr; disconnectNext &rArr; linkDB_FindFirst
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_TerminateLinkReq
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_disconnect_pl
</UL>

<P><STRONG><a name="[21e]"></a>BLE_gap_set_adv_enable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, blemesh.o(i.BLE_gap_set_adv_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = BLE_gap_set_adv_enable &rArr; GAP_MakeDiscoverable &rArr; gapSetAdvParams &rArr; isLimitedDiscoverableMode &rArr; gapFindADType
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_EndDiscoverable
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_advertise_pl
</UL>

<P><STRONG><a name="[221]"></a>BLE_gap_set_adv_params</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, blemesh.o(i.BLE_gap_set_adv_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BLE_gap_set_adv_params
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SetParamValue
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_advertise_data_pl
</UL>

<P><STRONG><a name="[223]"></a>BLE_gap_set_advscanrsp_data</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, blemesh.o(i.BLE_gap_set_advscanrsp_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BLE_gap_set_advscanrsp_data &rArr; GAP_UpdateAdvertisingData
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_UpdateAdvertisingData
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_advertise_data_pl
</UL>

<P><STRONG><a name="[225]"></a>BLE_gap_set_scan_enable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, blemesh.o(i.BLE_gap_set_scan_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BLE_gap_set_scan_enable &rArr; GAP_DeviceDiscoveryCancel &rArr; gapSendDevDiscEvent &rArr; gapFreeScanRecs
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceDiscoveryRequest
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceDiscoveryCancel
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_scan_pl
</UL>

<P><STRONG><a name="[228]"></a>BLE_gap_set_scan_params</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, blemesh.o(i.BLE_gap_set_scan_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BLE_gap_set_scan_params
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SetParamValue
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_init_pl
</UL>

<P><STRONG><a name="[3ab]"></a>CLI_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, libethermind_utils.lib(i.CLI_init))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessEvent
</UL>

<P><STRONG><a name="[229]"></a>CLI_process_line</STRONG> (Thumb, 164 bytes, Stack size 88 bytes, libethermind_utils.lib(i.CLI_process_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CLI_process_line
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessEvent
</UL>

<P><STRONG><a name="[22b]"></a>CLI_strtoarray</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, libethermind_utils.lib(i.CLI_strtoarray))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLI_strtoarray
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_core_modelc_config_netkey_update
</UL>

<P><STRONG><a name="[3ce]"></a>CLI_strtoi</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, libethermind_utils.lib(i.CLI_strtoi))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLI_strtoi
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_start
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_group_select
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_core_modelc_config_netkey_update
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_core_modelc_config_key_refresh_phase_set
</UL>

<P><STRONG><a name="[22d]"></a>DevInfo_AddService</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, devinfoservice.o(i.DevInfo_AddService))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DevInfo_AddService &rArr; GATTServApp_RegisterService &rArr; GATT_RegisterService &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterService
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_Init
</UL>

<P><STRONG><a name="[22f]"></a>EM_alloc_mem</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, em_os.o(i.EM_alloc_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_init
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_send
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_cmac
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tx_enqueue
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_alloc_ctx
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_search_and_alloc_ctx
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_adv_message
</UL>

<P><STRONG><a name="[39a]"></a>EM_debug_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, em_debug.o(i.EM_debug_init))
<BR><BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[231]"></a>EM_debug_printf</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, em_debug.o(i.EM_debug_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EM_debug_printf &rArr; vprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_fsm_register_module
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_fsm_post_event
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_init
</UL>

<P><STRONG><a name="[233]"></a>EM_free_mem</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, em_os.o(i.EM_free_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EM_free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_del_entity
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_deinit
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_update_advdata
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_bcon_send
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_cmac
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tx_timeout_handler
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_free_ctx
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_pdu
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_adv_message
</UL>

<P><STRONG><a name="[399]"></a>EM_os_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, em_os.o(i.EM_os_init))
<BR><BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[3cc]"></a>EM_set_debug_level</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, em_debug.o(i.EM_set_debug_level))
<BR><BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_register
</UL>

<P><STRONG><a name="[3cd]"></a>EM_sleep</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, em_os.o(i.EM_sleep))
<BR><BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_register
</UL>

<P><STRONG><a name="[235]"></a>EM_start_timer</STRONG> (Thumb, 120 bytes, Stack size 112 bytes, em_timer.o(i.EM_start_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EM_start_timer &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimeUpdate (via Veneer)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add_entity
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_free_mem
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_setup
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_timer_start
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_prov_callback
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_iv_update_timeout_handler
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pb_adv_pdu
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_complete_handler
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_link_open
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_prov_beacon_interleave
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_trigger_tx
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_start_snb_timer
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_start_key_refresh_timer
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_start_heartbeat_sub_timer
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_start_iv_update_timer
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_transmit_segments
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_start_ack_timer
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_restart_incomplete_timer
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_segment_ack
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_restart_proc_timer
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_adv_message
</UL>

<P><STRONG><a name="[237]"></a>EM_stop_timer</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, em_timer.o(i.EM_stop_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EM_stop_timer &rArr; timer_del_entity &rArr; EM_free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerStop (via Veneer)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_clear_event (via Veneer)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerUpdate (via Veneer)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimeUpdate (via Veneer)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalFindTimer (via Veneer)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_search_entity
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_del_entity
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_register
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_send
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_config_client_cb
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_ack
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_invite_handler
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_stop_interleave_timer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_stop_snb_timer
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_stop_key_refresh_timer
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_stop_iv_update_timer
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tx_queue_init
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_stop_heartbeat_sub_timer
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_restart_incomplete_timer
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_free_ctx
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_segment_ack
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_restart_proc_timer
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_adv_message
</UL>

<P><STRONG><a name="[23e]"></a>EM_timer_init</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, em_timer.o(i.EM_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EM_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init_entity
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[3cb]"></a>EM_update_module_debug_flag</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, em_debug.o(i.EM_update_module_debug_flag))
<BR><BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_register
</UL>

<P><STRONG><a name="[240]"></a>GAPBondMgr_LinkEst</STRONG> (Thumb, 280 bytes, Stack size 88 bytes, gapbondmgr.o(i.GAPBondMgr_LinkEst))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = GAPBondMgr_LinkEst &rArr; GATTServApp_SendServiceChangedInd &rArr; GATT_ServiceChangedInd &rArr; GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_UpdateCharCfg
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_SendServiceChangedInd
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_read
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_isbufset (via Veneer)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Signable
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrSlaveSecurityReq
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrInvertCharCfgItem
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrGetStateFlags
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrBondReq
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAuthenticate
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg
</UL>

<P><STRONG><a name="[241]"></a>GAPBondMgr_ResolveAddr</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, gapbondmgr.o(i.GAPBondMgr_ResolveAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GAPBondMgr_ResolveAddr &rArr; GAP_ResolvePrivateAddr &rArr; SM_ResolveRandomAddrs &rArr; sm_ah &rArr; smEncrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_read
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_isbufset (via Veneer)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ResolvePrivateAddr
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrGetPublicAddr
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrFindAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
</UL>

<P><STRONG><a name="[1e3]"></a>GAPRole_Init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, peripheral.o(i.GAPRole_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GAPRole_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_RegisterForHCIMsgs
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks (via Veneer)
</UL>

<P><STRONG><a name="[5d]"></a>GAPRole_ProcessEvent</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, peripheral.o(i.GAPRole_ProcessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = GAPRole_ProcessEvent &rArr; gapRole_ProcessOSALMsg &rArr; gapRole_ProcessGAPMsg &rArr; GAPBondMgr_LinkEst &rArr; GATTServApp_SendServiceChangedInd &rArr; GATT_ServiceChangedInd &rArr; GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_startConnUpdate
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessOSALMsg
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive (via Veneer)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate (via Veneer)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ReadRssiCmd (via Veneer)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_TerminateConnection
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SendUpdateParam
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_blemesh.o(.constdata)
</UL>
<P><STRONG><a name="[255]"></a>GAPRole_SendUpdateParam</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, peripheral.o(i.GAPRole_SendUpdateParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = GAPRole_SendUpdateParam &rArr; gapRole_startConnUpdate &rArr; L2CAP_ConnParamUpdateReq &rArr; l2capSendReq &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_startConnUpdate
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent
</UL>

<P><STRONG><a name="[256]"></a>GAPRole_TerminateConnection</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, peripheral.o(i.GAPRole_TerminateConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GAPRole_TerminateConnection &rArr; GAP_TerminateLinkReq &rArr; disconnectNext &rArr; linkDB_FindFirst
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_TerminateLinkReq
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessOSALMsg
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent
</UL>

<P><STRONG><a name="[257]"></a>GAP_Authenticate</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, gap_linkmgr.o(i.GAP_Authenticate))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = GAP_Authenticate &rArr; SM_StartPairing &rArr; smGeneratePairingReqRsp &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessPairingReq
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_StartPairing
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeAuthLink
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAuthenticate
</UL>

<P><STRONG><a name="[25c]"></a>GAP_Bond</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, gap_linkmgr.o(i.GAP_Bond))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GAP_Bond &rArr; smStartEncryption
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memdup (via Veneer)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smStartEncryption
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrBondReq
</UL>

<P><STRONG><a name="[25f]"></a>GAP_CentConnRegister</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_centdevmgr.o(i.GAP_CentConnRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GAP_CentConnRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRegisterCentralConn
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_Init
</UL>

<P><STRONG><a name="[261]"></a>GAP_CentDevMgrInit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gap_centdevmgr.o(i.GAP_CentDevMgrInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GAP_CentDevMgrInit &rArr; gapFreeScanRecs
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRegisterCentral
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeScanRecs
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapAllocScanRecs
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_Init
</UL>

<P><STRONG><a name="[265]"></a>GAP_ConfigDeviceAddr</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, gap_configmgr.o(i.GAP_ConfigDeviceAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GAP_ConfigDeviceAddr &rArr; SM_CalcRandomAddr &rArr; sm_ah &rArr; smEncrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_NumActiveConnections
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapIsScanning
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_reload_timer (via Veneer)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateRandBuf
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapIsAdvertising
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_CalcRandomAddr
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessNewAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_init_pl
</UL>

<P><STRONG><a name="[227]"></a>GAP_DeviceDiscoveryCancel</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gap_centdevmgr.o(i.GAP_DeviceDiscoveryCancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GAP_DeviceDiscoveryCancel &rArr; gapSendDevDiscEvent &rArr; gapFreeScanRecs
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendScanEnable
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDevDiscEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessGAPMsg
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_gap_set_scan_enable
</UL>

<P><STRONG><a name="[226]"></a>GAP_DeviceDiscoveryRequest</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, gap_centdevmgr.o(i.GAP_DeviceDiscoveryRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GAP_DeviceDiscoveryRequest &rArr; GAP_NumActiveConnections
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_NumActiveConnections
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetScanParamCmd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessGAPMsg
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_gap_set_scan_enable
</UL>

<P><STRONG><a name="[220]"></a>GAP_EndDiscoverable</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, gap_peridevmgr.o(i.GAP_EndDiscoverable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GAP_EndDiscoverable
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetAdvEnableCmd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessGAPMsg
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_gap_set_adv_enable
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessAdvertisingEvt
</UL>

<P><STRONG><a name="[26c]"></a>GAP_GetParamValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gap_configmgr.o(i.GAP_GetParamValue))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_startConnUpdate
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessOSALMsg
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceDiscoveryRequest
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ConfigDeviceAddr
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessL2CAPSignalEvt
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetScanParamStatus
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendScanEnable
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessScanningEvt
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvEnableStatus
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetAdvParams
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_StartPairing
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAuthEvent
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapUpdateConnSignCounter
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smStartRspTimer
</UL>

<P><STRONG><a name="[1e1]"></a>GAP_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gap_task.o(i.GAP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GAP_Init &rArr; linkDB_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_GAPTaskRegister (via Veneer)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Init
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RegisterApp
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks (via Veneer)
</UL>

<P><STRONG><a name="[21f]"></a>GAP_MakeDiscoverable</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, gap_peridevmgr.o(i.GAP_MakeDiscoverable))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = GAP_MakeDiscoverable &rArr; gapSetAdvParams &rArr; isLimitedDiscoverableMode &rArr; gapFindADType
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_NumActiveConnections
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_reload_timer (via Veneer)
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetAdvParams
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeAdvertState
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessGAPMsg
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_gap_set_adv_enable
</UL>

<P><STRONG><a name="[266]"></a>GAP_NumActiveConnections</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gap_task.o(i.GAP_NumActiveConnections))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GAP_NumActiveConnections
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_NumActive
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceDiscoveryRequest
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ConfigDeviceAddr
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetAdvParams
</UL>

<P><STRONG><a name="[277]"></a>GAP_ParamsInit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gap_configmgr.o(i.GAP_ParamsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GAP_ParamsInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ReadBDADDRCmd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_Init
</UL>

<P><STRONG><a name="[279]"></a>GAP_PeriDevMgrInit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gap_peridevmgr.o(i.GAP_PeriDevMgrInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GAP_PeriDevMgrInit &rArr; gapAllocAdvRecs
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRegisterPeripheral
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapAllocAdvRecs
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_Init
</UL>

<P><STRONG><a name="[5b]"></a>GAP_ProcessEvent</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, gap_task.o(i.GAP_ProcessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = GAP_ProcessEvent &rArr; gapProcessOSALMsg &rArr; L2CAP_CmdReject &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive (via Veneer)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate (via Veneer)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessOSALMsg
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapIsAdvertising
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_CalcRandomAddr
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessNewAddr
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetIRK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_blemesh.o(.constdata)
</UL>
<P><STRONG><a name="[24f]"></a>GAP_RegisterForHCIMsgs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gap_task.o(i.GAP_RegisterForHCIMsgs))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_Init
</UL>

<P><STRONG><a name="[24d]"></a>GAP_ResolvePrivateAddr</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gap_devmgr.o(i.GAP_ResolvePrivateAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GAP_ResolvePrivateAddr &rArr; SM_ResolveRandomAddrs &rArr; sm_ah &rArr; smEncrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ResolveRandomAddrs
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr
</UL>

<P><STRONG><a name="[280]"></a>GAP_SendSlaveSecurityRequest</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gap_perilinkmgr.o(i.GAP_SendSlaveSecurityRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GAP_SendSlaveSecurityRequest &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smUint8ToAuthReq
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrSlaveSecurityReq
</UL>

<P><STRONG><a name="[222]"></a>GAP_SetParamValue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gap_configmgr.o(i.GAP_SetParamValue))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_gap_set_scan_params
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_gap_set_adv_params
</UL>

<P><STRONG><a name="[246]"></a>GAP_Signable</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gap_linkmgr.o(i.GAP_Signable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GAP_Signable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
</UL>

<P><STRONG><a name="[21d]"></a>GAP_TerminateLinkReq</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, gap_linkmgr.o(i.GAP_TerminateLinkReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GAP_TerminateLinkReq &rArr; disconnectNext &rArr; linkDB_FindFirst
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_DisconnectCmd (via Veneer)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnectNext
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_TerminateConnection
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_gap_disconnect
</UL>

<P><STRONG><a name="[224]"></a>GAP_UpdateAdvertisingData</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, gap_peridevmgr.o(i.GAP_UpdateAdvertisingData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GAP_UpdateAdvertisingData
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetScanRspDataCmd (via Veneer)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetAdvDataCmd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_gap_set_advscanrsp_data
</UL>

<P><STRONG><a name="[287]"></a>GATTServApp_AddService</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gattservapp.o(i.GATTServApp_AddService))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GATTServApp_AddService &rArr; GATTServApp_RegisterService &rArr; GATT_RegisterService &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterService
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_Init
</UL>

<P><STRONG><a name="[1e4]"></a>GATTServApp_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, gattservapp.o(i.GATTServApp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GATTServApp_Init &rArr; gattServApp_SetNumPrepareWrites
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Register
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_RegisterForReq
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_InitCharCfg
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_SetNumPrepareWrites
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks (via Veneer)
</UL>

<P><STRONG><a name="[288]"></a>GATTServApp_InitCharCfg</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gattservapp.o(i.GATTServApp_InitCharCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GATTServApp_InitCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindCharCfgItem
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_HandleConnStatusCB
</UL>

<P><STRONG><a name="[28d]"></a>GATTServApp_ProcessCCCWriteReq</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, gattservapp.o(i.GATTServApp_ProcessCCCWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GATTServApp_ProcessCCCWriteReq &rArr; GATTServApp_SendCCCUpdatedEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_WriteCharCfg
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_SendCCCUpdatedEvent
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadCharCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_WriteAttrCB
</UL>

<P><STRONG><a name="[5e]"></a>GATTServApp_ProcessEvent</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gattservapp.o(i.GATTServApp_ProcessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = GATTServApp_ProcessEvent &rArr; gattServApp_ProcessMsg &rArr; gattServApp_ProcessReadByTypeReq &rArr; ATT_ReadByTypeRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive (via Veneer)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate (via Veneer)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_blemesh.o(.constdata)
</UL>
<P><STRONG><a name="[292]"></a>GATTServApp_ReadAttr</STRONG> (Thumb, 534 bytes, Stack size 64 bytes, gattservapp.o(i.GATTServApp_ReadAttr))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GATTServApp_ReadAttr &rArr; GATT_FindNextAttr &rArr; GATT_FindHandleUUID &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_strlen (via Veneer)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindNextAttr
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_CompareUUID
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadCharCfg
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindServiceCBs
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindAuthorizeAttrCB
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadMultiReq
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByTypeReq
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessFindByTypeValueReq
</UL>

<P><STRONG><a name="[28e]"></a>GATTServApp_ReadCharCfg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gattservapp.o(i.GATTServApp_ReadCharCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GATTServApp_ReadCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindCharCfgItem
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_SendServiceChangedInd
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessCCCWriteReq
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_proxy_notify_data_out
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_prov_notify_data_out
</UL>

<P><STRONG><a name="[3a0]"></a>GATTServApp_RegisterForMsg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gattservapp.o(i.GATTServApp_RegisterForMsg))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_Init
</UL>

<P><STRONG><a name="[22e]"></a>GATTServApp_RegisterService</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, gattservapp.o(i.GATTServApp_RegisterService))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GATTServApp_RegisterService &rArr; GATT_RegisterService &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_RegisterService
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_AddService
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevInfo_AddService
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_AddService
</UL>

<P><STRONG><a name="[290]"></a>GATTServApp_SendCCCUpdatedEvent</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, gattservapp.o(i.GATTServApp_SendCCCUpdatedEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GATTServApp_SendCCCUpdatedEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessCCCWriteReq
</UL>

<P><STRONG><a name="[249]"></a>GATTServApp_SendServiceChangedInd</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gattservapp.o(i.GATTServApp_SendServiceChangedInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = GATTServApp_SendServiceChangedInd &rArr; GATT_ServiceChangedInd &rArr; GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServiceChangedInd
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadCharCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
</UL>

<P><STRONG><a name="[248]"></a>GATTServApp_UpdateCharCfg</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gattservapp.o(i.GATTServApp_UpdateCharCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = GATTServApp_UpdateCharCfg &rArr; GATTServApp_WriteAttr &rArr; GATT_FindHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_WriteAttr
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
</UL>

<P><STRONG><a name="[29b]"></a>GATTServApp_WriteAttr</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, gattservapp.o(i.GATTServApp_WriteAttr))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = GATTServApp_WriteAttr &rArr; GATT_FindHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindServiceCBs
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_UpdateCharCfg
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessWriteReq
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessExecuteWriteReq
</UL>

<P><STRONG><a name="[28f]"></a>GATTServApp_WriteCharCfg</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gattservapp.o(i.GATTServApp_WriteCharCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GATTServApp_WriteCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindCharCfgItem
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessCCCWriteReq
</UL>

<P><STRONG><a name="[29c]"></a>GATT_AppCompletedMsg</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gatt_task.o(i.GATT_AppCompletedMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GATT_AppCompletedMsg &rArr; L2CAP_HostNumCompletedPkts
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HostNumCompletedPkts
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[29e]"></a>GATT_DiscAllCharDescs</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, gatt_client.o(i.GATT_DiscAllCharDescs))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = GATT_DiscAllCharDescs &rArr; ATT_FindInfoReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_FindInfoReq
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattStoreClientInfo
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattGetClientStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_client_process_gattMsg
</UL>

<P><STRONG><a name="[2a1]"></a>GATT_DiscAllChars</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, gatt_client.o(i.GATT_DiscAllChars))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = GATT_DiscAllChars &rArr; gattReadByType &rArr; ATT_ReadByTypeReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattReadByType
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_client_process_gattMsg
</UL>

<P><STRONG><a name="[295]"></a>GATT_FindHandle</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, gatt_server.o(i.GATT_FindHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GATT_FindHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_WriteAttr
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessWriteReq
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadMultiReq
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessPrepareWriteReq
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessWriteReq
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadReq
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadMultiReq
</UL>

<P><STRONG><a name="[2a3]"></a>GATT_FindHandleUUID</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, gatt_server.o(i.GATT_FindHandleUUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GATT_FindHandleUUID &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_CompareUUID
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServiceChangedInd
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindNextAttr
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByTypeReq
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessFindByTypeValueReq
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadByTypeReq
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadByGrpTypeReq
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessFindInfoReq
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessFindByTypeValueReq
</UL>

<P><STRONG><a name="[296]"></a>GATT_FindNextAttr</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, gatt_server.o(i.GATT_FindNextAttr))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GATT_FindNextAttr &rArr; GATT_FindHandleUUID &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_CompareUUID
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServiceLastHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessFindByTypeValueReq
</UL>

<P><STRONG><a name="[2a5]"></a>GATT_Indication</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, gatt_server.o(i.GATT_Indication))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_HandleValueInd
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Authen
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattGetServerStatus
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServiceChangedInd
</UL>

<P><STRONG><a name="[1e2]"></a>GATT_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gatt_task.o(i.GATT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GATT_Init &rArr; GATT_InitServer
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_InitMtuSize
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_InitServer
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RegisterApp
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks (via Veneer)
</UL>

<P><STRONG><a name="[2ab]"></a>GATT_InitClient</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, gatt_client.o(i.GATT_InitClient))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GATT_InitClient
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Register
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattRegisterClient
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessEvent
</UL>

<P><STRONG><a name="[2a9]"></a>GATT_InitServer</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gatt_server.o(i.GATT_InitServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GATT_InitServer
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Register
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattRegisterServer
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Init
</UL>

<P><STRONG><a name="[2ae]"></a>GATT_Notification</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, gatt_server.o(i.GATT_Notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_HandleValueNoti
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Authen
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattGetServerStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_proxy_notify_data_out
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_prov_notify_data_out
</UL>

<P><STRONG><a name="[5c]"></a>GATT_ProcessEvent</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gatt_task.o(i.GATT_ProcessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = GATT_ProcessEvent &rArr; gattProcessRxData &rArr; ATT_ErrorRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive (via Veneer)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate (via Veneer)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessRxData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_blemesh.o(.constdata)
</UL>
<P><STRONG><a name="[3a6]"></a>GATT_RegisterForInd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gatt_client.o(i.GATT_RegisterForInd))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessEvent
</UL>

<P><STRONG><a name="[28a]"></a>GATT_RegisterForReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gatt_server.o(i.GATT_RegisterForReq))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_Init
</UL>

<P><STRONG><a name="[298]"></a>GATT_RegisterService</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, gatt_server.o(i.GATT_RegisterService))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GATT_RegisterService &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_CompareUUID
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterService
</UL>

<P><STRONG><a name="[29a]"></a>GATT_ServiceChangedInd</STRONG> (Thumb, 70 bytes, Stack size 264 bytes, gatt_server.o(i.GATT_ServiceChangedInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = GATT_ServiceChangedInd &rArr; GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Indication
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_SendServiceChangedInd
</UL>

<P><STRONG><a name="[41b]"></a>GATT_ServiceNumAttrs</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gatt_server.o(i.GATT_ServiceNumAttrs))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServiceLastHandle
</UL>

<P><STRONG><a name="[2b0]"></a>GATT_VerifyReadPermissions</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gatt_server.o(i.GATT_VerifyReadPermissions))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GATT_VerifyReadPermissions &rArr; linkDB_Authen
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Authen
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByTypeReq
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadReq
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadMultiReq
</UL>

<P><STRONG><a name="[2b1]"></a>GATT_VerifyWritePermissions</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, gatt_server.o(i.GATT_VerifyWritePermissions))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GATT_VerifyWritePermissions &rArr; linkDB_Authen
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Authen
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessWriteReq
</UL>

<P><STRONG><a name="[2b2]"></a>GGS_AddService</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gapgattserver.o(i.GGS_AddService))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GGS_AddService &rArr; GATTServApp_RegisterService &rArr; GATT_RegisterService &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterService
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_Init
</UL>

<P><STRONG><a name="[2b3]"></a>GGS_SetParameter</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, gapgattserver.o(i.GGS_SetParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GGS_SetParameter &rArr; ggs_SetAttrWPermit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ggs_SetAttrWPermit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_Init
</UL>

<P><STRONG><a name="[8f]"></a>L2CAP_BuildCmdReject</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, l2cap_util.o(i.L2CAP_BuildCmdReject))
<BR>[Address Reference Count : 1]<UL><LI> l2cap_if.o(i.L2CAP_CmdReject)
</UL>
<P><STRONG><a name="[91]"></a>L2CAP_BuildParamUpdateRsp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, l2cap_util.o(i.L2CAP_BuildParamUpdateRsp))
<BR>[Address Reference Count : 1]<UL><LI> l2cap_if.o(i.L2CAP_ConnParamUpdateRsp)
</UL>
<P><STRONG><a name="[2b5]"></a>L2CAP_CmdReject</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, l2cap_if.o(i.L2CAP_CmdReject))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = L2CAP_CmdReject &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessSignal
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessOSALMsg
</UL>

<P><STRONG><a name="[2b7]"></a>L2CAP_ConnParamUpdateReq</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, l2cap_if.o(i.L2CAP_ConnParamUpdateReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = L2CAP_ConnParamUpdateReq &rArr; l2capSendReq &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendReq
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_startConnUpdate
</UL>

<P><STRONG><a name="[2b9]"></a>L2CAP_ConnParamUpdateRsp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, l2cap_if.o(i.L2CAP_ConnParamUpdateRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = L2CAP_ConnParamUpdateRsp &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessL2CAPSignalEvt
</UL>

<P><STRONG><a name="[2ba]"></a>L2CAP_Fragment_bm_alloc</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, l2cap_util.o(i.L2CAP_Fragment_bm_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TX_bm_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capPktToSegmentBuff
</UL>

<P><STRONG><a name="[29d]"></a>L2CAP_HostNumCompletedPkts</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, l2cap_if.o(i.L2CAP_HostNumCompletedPkts))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = L2CAP_HostNumCompletedPkts
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_HostNumCompletedPktCmd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_AppCompletedMsg
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRxData
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessRxData
</UL>

<P><STRONG><a name="[1e0]"></a>L2CAP_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, l2cap_task.o(i.L2CAP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = L2CAP_Init &rArr; l2capSarBufReset
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_L2CAPTaskRegister (via Veneer)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSarBufReset
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks (via Veneer)
</UL>

<P><STRONG><a name="[44a]"></a>L2CAP_ParseParamUpdateReq</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, l2cap_util.o(i.L2CAP_ParseParamUpdateReq))
<BR><BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessSignal
</UL>

<P><STRONG><a name="[5a]"></a>L2CAP_ProcessEvent</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, l2cap_task.o(i.L2CAP_ProcessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = L2CAP_ProcessEvent &rArr; l2capProcessRxData &rArr; l2capProcessSignal &rArr; L2CAP_CmdReject &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive (via Veneer)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate (via Veneer)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRxData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_blemesh.o(.constdata)
</UL>
<P><STRONG><a name="[2c0]"></a>L2CAP_ReassemblePkt_Reset</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, l2cap_util.o(i.L2CAP_ReassemblePkt_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = L2CAP_ReassemblePkt_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capParsePacket
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessDisconnectCompleteEvt
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnectionCompleteEvt
</UL>

<P><STRONG><a name="[274]"></a>L2CAP_RegisterApp</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, l2cap_if.o(i.L2CAP_RegisterApp))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[2c2]"></a>L2CAP_SegmentPkt_Reset</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, l2cap_util.o(i.L2CAP_SegmentPkt_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = L2CAP_SegmentPkt_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessDisconnectCompleteEvt
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnectionCompleteEvt
</UL>

<P><STRONG><a name="[2c3]"></a>L2CAP_SendData</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, l2cap_if.o(i.L2CAP_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_State
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capEncapSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
</UL>

<P><STRONG><a name="[2c6]"></a>L2CAP_bm_alloc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, l2cap_util.o(i.L2CAP_bm_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = L2CAP_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_adjust_header (via Veneer)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_bm_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capParsePacket
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendCmd
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
</UL>

<P><STRONG><a name="[2c9]"></a>MS_access_bind_model_app</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.MS_access_bind_model_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MS_access_bind_model_app &rArr; ms_access_ps_store &rArr; nvsto_write_header &rArr; nvs_write_header &rArr; flash_write_word &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitarray_set_bit
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_config_client_send_reliable_pdu
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sample_binding_app_key
</UL>

<P><STRONG><a name="[2cc]"></a>MS_access_cm_add_appkey</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.MS_access_cm_add_appkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = MS_access_cm_add_appkey &rArr; ms_stbx_k4 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k4
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitarray_set_bit
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_config_client_send_reliable_pdu
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_config_client_appkey_binding
</UL>

<P><STRONG><a name="[2cf]"></a>MS_access_cm_add_device_key</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.MS_access_cm_add_device_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MS_access_cm_add_device_key &rArr; ms_access_ps_store &rArr; nvsto_write_header &rArr; nvs_write_header &rArr; flash_write_word &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete
</UL>

<P><STRONG><a name="[2d0]"></a>MS_access_cm_add_update_netkey</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.MS_access_cm_add_update_netkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = MS_access_cm_add_update_netkey &rArr; ms_access_cm_update_key_refresh_phase &rArr; ms_access_cm_create_keys_from_netkey &rArr; ms_stbx_k2 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitarray_reset_all
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_update_key_refresh_phase
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_save_netkey_at_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_core_modelc_config_netkey_update
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_prov_data_provsioner
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_net_netkey_update
</UL>

<P><STRONG><a name="[2d4]"></a>MS_access_cm_delete_device_key</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.MS_access_cm_delete_device_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MS_access_cm_delete_device_key &rArr; ms_access_ps_store &rArr; nvsto_write_header &rArr; nvs_write_header &rArr; flash_write_word &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_provcfg_complete_timeout_handler
</UL>

<P><STRONG><a name="[48e]"></a>MS_access_cm_find_master_subnet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_access_cm_find_master_subnet))
<BR><BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_in
</UL>

<P><STRONG><a name="[2f5]"></a>MS_access_cm_find_subnet</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.MS_access_cm_find_subnet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MS_access_cm_find_subnet
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_prov_data_provsioner
</UL>

<P><STRONG><a name="[2d5]"></a>MS_access_cm_get_app_key</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_app_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MS_access_cm_get_app_key &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sample_binding_app_key
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_send_access_pdu
</UL>

<P><STRONG><a name="[350]"></a>MS_access_cm_get_device_key</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_device_key))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_send_access_pdu
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frame_decrypt_pdu
</UL>

<P><STRONG><a name="[31d]"></a>MS_access_cm_get_device_key_handle</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_device_key_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MS_access_cm_get_device_key_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_set_publish_address
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_provcfg_complete_timeout_handler
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_config_client_set_publish_address
</UL>

<P><STRONG><a name="[354]"></a>MS_access_cm_get_features</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_features))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_trigger_heartbeat
</UL>

<P><STRONG><a name="[338]"></a>MS_access_cm_get_features_field</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_features_field))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_demo_reset
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_iv_update_state_change
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_iv_update_start
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_in
</UL>

<P><STRONG><a name="[355]"></a>MS_access_cm_get_friendship_role</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_friendship_role))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_trigger_heartbeat
</UL>

<P><STRONG><a name="[331]"></a>MS_access_cm_get_iv_index</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_iv_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MS_access_cm_get_iv_index
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_broadcast_secure_beacon
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_iv_update_start
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_send
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frame_secure_pdu
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_send_pdu
</UL>

<P><STRONG><a name="[487]"></a>MS_access_cm_get_iv_index_by_ivi</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_iv_index_by_ivi))
<BR><BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_decode_frame
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frame_decrypt_pdu
</UL>

<P><STRONG><a name="[332]"></a>MS_access_cm_get_key_refresh_phase</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_key_refresh_phase))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MS_access_cm_get_key_refresh_phase
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_broadcast_secure_beacon
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_prov_callback
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_key_refresh_timeout_handler
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_key_refresh_init
</UL>

<P><STRONG><a name="[2d6]"></a>MS_access_cm_get_netkey_at_offset</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_netkey_at_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MS_access_cm_get_netkey_at_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_prov_callback
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_key_refresh_init
</UL>

<P><STRONG><a name="[353]"></a>MS_access_cm_get_primary_unicast_address</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_primary_unicast_address))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_vendor_model_set
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_handle_rx_opcode
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_send
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_send
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_trigger_heartbeat
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_ack_timeout_handler
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_seg_pdu
</UL>

<P><STRONG><a name="[36e]"></a>MS_access_cm_get_prov_devices_list</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_prov_devices_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MS_access_cm_get_prov_devices_list
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_vendor_model_set
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessEvent
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_prov_callback
</UL>

<P><STRONG><a name="[2d7]"></a>MS_access_cm_get_subnet_beacon_key</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_subnet_beacon_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MS_access_cm_get_subnet_beacon_key
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_broadcast_secure_beacon
</UL>

<P><STRONG><a name="[2d8]"></a>MS_access_cm_get_subnet_encryption_key</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_subnet_encryption_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MS_access_cm_get_subnet_encryption_key
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_send
</UL>

<P><STRONG><a name="[2d9]"></a>MS_access_cm_get_subnet_network_id</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_subnet_network_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MS_access_cm_get_subnet_network_id
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_broadcast_secure_beacon
</UL>

<P><STRONG><a name="[48f]"></a>MS_access_cm_get_subnet_nid</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_subnet_nid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MS_access_cm_get_subnet_nid
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_send
</UL>

<P><STRONG><a name="[2da]"></a>MS_access_cm_get_subnet_privacy_key</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_subnet_privacy_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MS_access_cm_get_subnet_privacy_key
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_send
</UL>

<P><STRONG><a name="[498]"></a>MS_access_cm_get_transmit_state</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_transmit_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MS_access_cm_get_transmit_state
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tx_enqueue
</UL>

<P><STRONG><a name="[2db]"></a>MS_access_cm_lookup_aid</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.MS_access_cm_lookup_aid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MS_access_cm_lookup_aid
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frame_decrypt_pdu
</UL>

<P><STRONG><a name="[2dc]"></a>MS_access_cm_lookup_network_id</STRONG> (Thumb, 236 bytes, Stack size 112 bytes, libethermind_mesh_core.lib(i.MS_access_cm_lookup_network_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = MS_access_cm_lookup_network_id &rArr; ms_stbx_k3 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k3
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k1
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_s1
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_handle_secure_beacon
</UL>

<P><STRONG><a name="[2e0]"></a>MS_access_cm_lookup_nid</STRONG> (Thumb, 238 bytes, Stack size 80 bytes, libethermind_mesh_core.lib(i.MS_access_cm_lookup_nid))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = MS_access_cm_lookup_nid &rArr; ms_stbx_k2 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k2
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_decode_frame
</UL>

<P><STRONG><a name="[2e2]"></a>MS_access_cm_reset</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.MS_access_cm_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MS_access_cm_reset &rArr; MS_prov_stop_interleave_timer &rArr; EM_stop_timer &rArr; timer_del_entity &rArr; EM_free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_stop_interleave_timer
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_init_subnet_table
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_stop_snb_timer
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_stop_key_refresh_timer
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_stop_iv_update_timer
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_set_seq_num_state
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_get_seq_num_state
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_bcast_end
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_demo_reset
</UL>

<P><STRONG><a name="[2eb]"></a>MS_access_cm_set_features_field</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.MS_access_cm_set_features_field))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = MS_access_cm_set_features_field &rArr; MS_trn_trigger_heartbeat &rArr; MS_trn_send_control_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_trigger_heartbeat
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[2ed]"></a>MS_access_cm_set_iv_index</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.MS_access_cm_set_iv_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MS_access_cm_set_iv_index &rArr; ms_access_ps_store &rArr; nvsto_write_header &rArr; nvs_write_header &rArr; flash_write_word &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_iv_update_state_change
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_prov_data_provsioner
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_iv_update_start
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_iv_update_rcv_pro
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_free_ctx
</UL>

<P><STRONG><a name="[2ee]"></a>MS_access_cm_set_key_refresh_phase</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.MS_access_cm_set_key_refresh_phase))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = MS_access_cm_set_key_refresh_phase &rArr; ms_access_cm_update_key_refresh_phase &rArr; ms_access_cm_create_keys_from_netkey &rArr; ms_stbx_k2 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_update_key_refresh_phase
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_core_modelc_config_key_refresh_phase_set
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_prov_data_provsioner
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_key_refresh_phase_set
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_handle_secure_beacon
</UL>

<P><STRONG><a name="[2ef]"></a>MS_access_cm_set_model_publication</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.MS_access_cm_set_model_publication))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = MS_access_cm_set_model_publication &rArr; ms_search_and_add_virtual_address &rArr; ms_stbx_va &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_search_and_add_virtual_address
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_search_and_add_address
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_delete_address
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_set_publish_address
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_config_client_set_publish_address
</UL>

<P><STRONG><a name="[2f4]"></a>MS_access_cm_set_primary_unicast_address</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_access_cm_set_primary_unicast_address))
<BR><BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_prov_data_provsioner
</UL>

<P><STRONG><a name="[2f3]"></a>MS_access_cm_set_prov_data_provsioner</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.MS_access_cm_set_prov_data_provsioner))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = MS_access_cm_set_prov_data_provsioner &rArr; MS_access_cm_add_update_netkey &rArr; ms_access_cm_update_key_refresh_phase &rArr; ms_access_cm_create_keys_from_netkey &rArr; ms_stbx_k2 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_find_subnet
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_key_refresh_phase
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_update_netkey
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_primary_unicast_address
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_iv_index
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_set_provision_data
</UL>

<P><STRONG><a name="[2f6]"></a>MS_access_cm_set_transmit_state</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.MS_access_cm_set_transmit_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MS_access_cm_set_transmit_state &rArr; ms_access_ps_store &rArr; nvsto_write_header &rArr; nvs_write_header &rArr; flash_write_word &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_config_client_cb
</UL>

<P><STRONG><a name="[2f7]"></a>MS_access_cm_update_delete_appkey</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.MS_access_cm_update_delete_appkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = MS_access_cm_update_delete_appkey &rArr; ms_stbx_k4 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k4
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitarray_reset_bit
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_delete_appkey
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_config_client_send_reliable_pdu
</UL>

<P><STRONG><a name="[39e]"></a>MS_access_create_node</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_access_create_node))
<BR><BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[358]"></a>MS_access_get_appkey_handle</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_access_get_appkey_handle))
<BR><BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_vendormodel_client_send_reliable_pdu
</UL>

<P><STRONG><a name="[31b]"></a>MS_access_get_model_handle</STRONG> (Thumb, 74 bytes, Stack size 36 bytes, libethermind_mesh_core.lib(i.MS_access_get_model_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MS_access_get_model_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_config_client_send_reliable_pdu
</UL>

<P><STRONG><a name="[2fa]"></a>MS_access_get_publish_addr</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.MS_access_get_publish_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MS_access_get_publish_addr &rArr; ms_get_address
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_get_address
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_reply
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_reliable_publish
</UL>

<P><STRONG><a name="[465]"></a>MS_access_is_fixed_group_addr_to_be_processed</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, libethermind_mesh_core.lib(i.MS_access_is_fixed_group_addr_to_be_processed))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MS_access_is_fixed_group_addr_to_be_processed
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_pkt_in
</UL>

<P><STRONG><a name="[462]"></a>MS_access_is_valid_element_address</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, libethermind_mesh_core.lib(i.MS_access_is_valid_element_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MS_access_is_valid_element_address
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_pkt_in
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_pkt_first_process
</UL>

<P><STRONG><a name="[2fc]"></a>MS_access_is_valid_subscription_address</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, libethermind_mesh_core.lib(i.MS_access_is_valid_subscription_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MS_access_is_valid_subscription_address &rArr; ms_search_address
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_search_virtual_address
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_search_address
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_pkt_in
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_pkt_first_process
</UL>

<P><STRONG><a name="[2ff]"></a>MS_access_ps_crc_check</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.MS_access_ps_crc_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MS_access_ps_crc_check &rArr; nvsto_open &rArr; nvs_open &rArr; NV_Get_Free_Sector &rArr; NV_Read &rArr; hal_flash_read &rArr; spif_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_seek
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_read_crc16
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_open
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_close
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_init
</UL>

<P><STRONG><a name="[305]"></a>MS_access_ps_store_all_record</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.MS_access_ps_store_all_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MS_access_ps_store_all_record &rArr; ms_access_ps_store &rArr; nvsto_write_header &rArr; nvs_write_header &rArr; flash_write_word &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[33f]"></a>MS_access_ps_store_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_access_ps_store_disable))
<BR><BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_key_refresh_timeout_handler
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_net_netkey_update
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_key_refresh_phase_set
</UL>

<P><STRONG><a name="[306]"></a>MS_access_publish_ex</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.MS_access_publish_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = MS_access_publish_ex &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_send_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_reply
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_reliable_publish
</UL>

<P><STRONG><a name="[308]"></a>MS_access_raw_data</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.MS_access_raw_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = MS_access_raw_data &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_send_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_vendormodel_client_send_reliable_pdu
</UL>

<P><STRONG><a name="[309]"></a>MS_access_register_element</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.MS_access_register_element))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MS_access_register_element &rArr; ms_access_allocate_element
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_allocate_element
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[30b]"></a>MS_access_register_model</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.MS_access_register_model))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MS_access_register_model &rArr; ms_access_search_and_allocate_model
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_search_and_allocate_model
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_vendormodel_client_init
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_generic_onoff_client_init
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_config_client_init
</UL>

<P><STRONG><a name="[30d]"></a>MS_access_reliable_publish</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.MS_access_reliable_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752<LI>Call Chain = MS_access_reliable_publish &rArr; MS_access_publish_ex &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_publish_ex
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_get_publish_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_config_client_send_reliable_pdu
</UL>

<P><STRONG><a name="[30e]"></a>MS_access_reply</STRONG> (Thumb, 80 bytes, Stack size 64 bytes, libethermind_mesh_core.lib(i.MS_access_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = MS_access_reply &rArr; MS_access_publish_ex &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_send_pdu
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_publish_ex
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_get_publish_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_vendormodel_client_state_update
</UL>

<P><STRONG><a name="[307]"></a>MS_access_send_pdu</STRONG> (Thumb, 154 bytes, Stack size 448 bytes, libethermind_mesh_core.lib(i.MS_access_send_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_send_access_pdu
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_get_address_type
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_reply
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_raw_data
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_publish_ex
</UL>

<P><STRONG><a name="[311]"></a>MS_access_unbind_model_app</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.MS_access_unbind_model_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MS_access_unbind_model_app &rArr; ms_access_ps_store &rArr; nvsto_write_header &rArr; nvs_write_header &rArr; flash_write_word &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitarray_reset_bit
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_config_client_send_reliable_pdu
</UL>

<P><STRONG><a name="[312]"></a>MS_brr_add_bearer</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.MS_brr_add_bearer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MS_brr_add_bearer
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_register
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_gatt_connection
</UL>

<P><STRONG><a name="[2e8]"></a>MS_brr_bcast_end</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.MS_brr_bcast_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MS_brr_bcast_end
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_proxy_server_adv_stop
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_reset
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_prov_beacon_interleave
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_adv_message
</UL>

<P><STRONG><a name="[313]"></a>MS_brr_bcast_unprovisioned_beacon</STRONG> (Thumb, 112 bytes, Stack size 96 bytes, libethermind_mesh_core.lib(i.MS_brr_bcast_unprovisioned_beacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = MS_brr_bcast_unprovisioned_beacon &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_s1
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_setup
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_prov_beacon_interleave
</UL>

<P><STRONG><a name="[314]"></a>MS_brr_broadcast_beacon</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, libethermind_mesh_core.lib(i.MS_brr_broadcast_beacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MS_brr_broadcast_beacon &rArr; MS_brr_send_pdu
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_send_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_broadcast_secure_beacon
</UL>

<P><STRONG><a name="[34e]"></a>MS_brr_observe_beacon</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.MS_brr_observe_beacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MS_brr_observe_beacon
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_setup
</UL>

<P><STRONG><a name="[480]"></a>MS_brr_register</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_brr_register))
<BR><BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_prov_init
</UL>

<P><STRONG><a name="[47f]"></a>MS_brr_register_beacon_handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_brr_register_beacon_handler))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_prov_init
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_net_init
</UL>

<P><STRONG><a name="[316]"></a>MS_brr_remove_bearer</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.MS_brr_remove_bearer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MS_brr_remove_bearer
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_gatt_disconnection
</UL>

<P><STRONG><a name="[315]"></a>MS_brr_send_pdu</STRONG> (Thumb, 264 bytes, Stack size 80 bytes, libethermind_mesh_core.lib(i.MS_brr_send_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MS_brr_send_pdu
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_GetCurrentMTUSize
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pb_gatt_pdu
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pb_adv_pdu
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_ack
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_link_open
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_link_close
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_send
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_broadcast_beacon
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_link_accept
</UL>

<P><STRONG><a name="[318]"></a>MS_config_client_init</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.MS_config_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MS_config_client_init &rArr; MS_access_register_model &rArr; ms_access_search_and_allocate_model
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_register_model
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_register_config_model_client
</UL>

<P><STRONG><a name="[319]"></a>MS_config_client_send_reliable_pdu</STRONG> (Thumb, 1328 bytes, Stack size 80 bytes, libethermind_mesh_core.lib(i.MS_config_client_send_reliable_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = MS_config_client_send_reliable_pdu &rArr; MS_access_reliable_publish &rArr; MS_access_publish_ex &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_pack_key_indices
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_unbind_model_app
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_update_delete_appkey
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_appkey
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_bind_model_app
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_reliable_publish
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_get_model_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_core_modelc_config_netkey_update
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_core_modelc_config_key_refresh_phase_set
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_provcfg_complete_timeout_handler
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_config_client_appkey_add
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_key_refresh_timeout_handler
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_net_netkey_update
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_key_refresh_phase_set
</UL>

<P><STRONG><a name="[31c]"></a>MS_config_client_set_publish_address</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.MS_config_client_set_publish_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = MS_config_client_set_publish_address &rArr; MS_access_cm_set_model_publication &rArr; ms_search_and_add_virtual_address &rArr; ms_stbx_va &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_device_key_handle
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_model_publication
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_key_refresh_timeout_handler
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_net_netkey_update
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_key_refresh_phase_set
</UL>

<P><STRONG><a name="[31e]"></a>MS_generic_onoff_client_init</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, libethermind_mesh_models.lib(i.MS_generic_onoff_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MS_generic_onoff_client_init &rArr; MS_access_register_model &rArr; ms_access_search_and_allocate_model
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_register_model
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_register_generic_onoff_model_client
</UL>

<P><STRONG><a name="[31f]"></a>MS_init</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.MS_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MS_init &rArr; ms_access_init &rArr; ms_access_ps_load &rArr; nvsto_open &rArr; nvs_open &rArr; NV_Get_Free_Sector &rArr; NV_Read &rArr; hal_flash_read &rArr; spif_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_debug_printf
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_init_pl (via Veneer)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_ecdh_init
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr (via Veneer)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_trn_init
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_prov_init
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_net_init
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_ltrn_init
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_fsm_init
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_common_init_transition_timer
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_brr_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_init
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[484]"></a>MS_ltrn_register</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_ltrn_register))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_trn_init
</UL>

<P><STRONG><a name="[32b]"></a>MS_ltrn_send_pdu</STRONG> (Thumb, 300 bytes, Stack size 104 bytes, libethermind_mesh_core.lib(i.MS_ltrn_send_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_send_pdu
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_send_seg_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_send_control_pdu
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_send_access_pdu
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_send_ack
</UL>

<P><STRONG><a name="[32e]"></a>MS_net_alloc_seq_num</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.MS_net_alloc_seq_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MS_net_alloc_seq_num &rArr; MS_net_iv_update_start &rArr; MS_access_cm_set_iv_index &rArr; ms_access_ps_store &rArr; nvsto_write_header &rArr; nvs_write_header &rArr; flash_write_word &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_iv_update_start
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_send
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_send_control_pdu
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_send_access_pdu
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_transmit_segment
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_send_ack
</UL>

<P><STRONG><a name="[330]"></a>MS_net_broadcast_secure_beacon</STRONG> (Thumb, 142 bytes, Stack size 72 bytes, libethermind_mesh_core.lib(i.MS_net_broadcast_secure_beacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = MS_net_broadcast_secure_beacon &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_cmac
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_subnet_network_id
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_subnet_beacon_key
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_key_refresh_phase
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_iv_index
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_broadcast_beacon
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_snb_timeout_handler
</UL>

<P><STRONG><a name="[30f]"></a>MS_net_get_address_type</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_net_get_address_type))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_vendor_model_set
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_send_pdu
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_handle_rx_opcode
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_in
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_send_seg_pdu
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_send_ack
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_pkt_in
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_pkt_first_process
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_seg_pdu
</UL>

<P><STRONG><a name="[2e9]"></a>MS_net_get_seq_num_state</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_net_get_seq_num_state))
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_reset
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_seq_number
</UL>

<P><STRONG><a name="[334]"></a>MS_net_init_seq_number</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.MS_net_init_seq_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MS_net_init_seq_number &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_get_sar_ctx_count
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_iv_update_state_change
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_iv_update_rcv_pro
</UL>

<P><STRONG><a name="[336]"></a>MS_net_iv_update_rcv_pro</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.MS_net_iv_update_rcv_pro))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = MS_net_iv_update_rcv_pro &rArr; MS_access_cm_set_iv_index &rArr; ms_access_ps_store &rArr; nvsto_write_header &rArr; nvs_write_header &rArr; flash_write_word &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_stop_iv_update_timer
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_init_seq_number
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_start_iv_update_timer
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_iv_index
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_handle_secure_beacon
</UL>

<P><STRONG><a name="[32f]"></a>MS_net_iv_update_start</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.MS_net_iv_update_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = MS_net_iv_update_start &rArr; MS_access_cm_set_iv_index &rArr; ms_access_ps_store &rArr; nvsto_write_header &rArr; nvs_write_header &rArr; flash_write_word &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_features_field
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_start_snb_timer
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_iv_index
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_start_iv_update_timer
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_iv_index
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_alloc_seq_num
</UL>

<P><STRONG><a name="[33a]"></a>MS_net_key_refresh</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.MS_net_key_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880<LI>Call Chain = MS_net_key_refresh &rArr; ms_net_netkey_update &rArr; MS_config_client_send_reliable_pdu &rArr; MS_access_reliable_publish &rArr; MS_access_publish_ex &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_net_netkey_update
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_start_key_refresh_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_key_refresh_init
</UL>

<P><STRONG><a name="[33d]"></a>MS_net_key_refresh_init</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.MS_net_key_refresh_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = MS_net_key_refresh_init &rArr; MS_net_key_refresh &rArr; ms_net_netkey_update &rArr; MS_config_client_send_reliable_pdu &rArr; MS_access_reliable_publish &rArr; MS_access_publish_ex &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_netkey_at_offset
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_key_refresh_phase
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_key_refresh_phase_set
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_key_refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[33e]"></a>MS_net_key_refresh_phase_set</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.MS_net_key_refresh_phase_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856<LI>Call Chain = MS_net_key_refresh_phase_set &rArr; MS_config_client_send_reliable_pdu &rArr; MS_access_reliable_publish &rArr; MS_access_publish_ex &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_config_client_send_reliable_pdu
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_key_refresh_phase
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_config_client_set_publish_address
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_ps_store_disable
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_start_key_refresh_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_key_refresh_timeout_handler
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_key_refresh_init
</UL>

<P><STRONG><a name="[47a]"></a>MS_net_register</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_net_register))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_ltrn_init
</UL>

<P><STRONG><a name="[32c]"></a>MS_net_send_pdu</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.MS_net_send_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_send
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_iv_index
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_send
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_transmit_segment
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ltrn_send_pdu
</UL>

<P><STRONG><a name="[2ea]"></a>MS_net_set_seq_num_state</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_net_set_seq_num_state))
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_reset
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_load_seq_number
</UL>

<P><STRONG><a name="[337]"></a>MS_net_start_iv_update_timer</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.MS_net_start_iv_update_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MS_net_start_iv_update_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_iv_update_state_change
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_iv_update_start
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_iv_update_rcv_pro
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_free_ctx
</UL>

<P><STRONG><a name="[33c]"></a>MS_net_start_key_refresh_timer</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.MS_net_start_key_refresh_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MS_net_start_key_refresh_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_key_refresh_timeout_handler
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_key_refresh_phase_set
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_key_refresh
</UL>

<P><STRONG><a name="[339]"></a>MS_net_start_snb_timer</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.MS_net_start_snb_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MS_net_start_snb_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_prov_callback
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_snb_timeout_handler
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_iv_update_start
</UL>

<P><STRONG><a name="[2e5]"></a>MS_net_stop_iv_update_timer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.MS_net_stop_iv_update_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MS_net_stop_iv_update_timer &rArr; EM_stop_timer &rArr; timer_del_entity &rArr; EM_free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_reset
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_iv_update_rcv_pro
</UL>

<P><STRONG><a name="[2e6]"></a>MS_net_stop_key_refresh_timer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.MS_net_stop_key_refresh_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MS_net_stop_key_refresh_timer &rArr; EM_stop_timer &rArr; timer_del_entity &rArr; EM_free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_reset
</UL>

<P><STRONG><a name="[2e4]"></a>MS_net_stop_snb_timer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.MS_net_stop_snb_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MS_net_stop_snb_timer &rArr; EM_stop_timer &rArr; timer_del_entity &rArr; EM_free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_reset
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_iv_update_state_change
</UL>

<P><STRONG><a name="[341]"></a>MS_prov_bind</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.MS_prov_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = MS_prov_bind &rArr; prov_link_open &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_rand_generate
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_link_open
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_fsm_post_event
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_free_context
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_alloc_context
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_prov_callback
</UL>

<P><STRONG><a name="[347]"></a>MS_prov_register</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.MS_prov_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MS_prov_register &rArr; EM_stop_timer &rArr; timer_del_entity &rArr; EM_free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_register_prov
</UL>

<P><STRONG><a name="[348]"></a>MS_prov_send_pdu</STRONG> (Thumb, 208 bytes, Stack size 80 bytes, libethermind_mesh_core.lib(i.MS_prov_send_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MS_prov_send_pdu &rArr; prov_process_event &rArr; prov_fsm_post_event &rArr; ms_fsm_post_event &rArr; EM_debug_printf &rArr; vprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_process_event
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_fsm_post_event
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_findcontext_by_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_prov_callback
</UL>

<P><STRONG><a name="[34b]"></a>MS_prov_set_authval</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.MS_prov_set_authval))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MS_prov_set_authval
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_findcontext_by_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_prov_callback
</UL>

<P><STRONG><a name="[34c]"></a>MS_prov_setup</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.MS_prov_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = MS_prov_setup &rArr; MS_brr_bcast_unprovisioned_beacon &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_ecdh_init
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_ecdh_get_public_key
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_observe_beacon
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_bcast_unprovisioned_beacon
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_setup_prov
</UL>

<P><STRONG><a name="[2e7]"></a>MS_prov_stop_interleave_timer</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.MS_prov_stop_interleave_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MS_prov_stop_interleave_timer &rArr; EM_stop_timer &rArr; timer_del_entity &rArr; EM_free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_reset
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_adv_message
</UL>

<P><STRONG><a name="[3c5]"></a>MS_proxy_fetch_state</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_proxy_fetch_state))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_demo_reset
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_advertise_setup
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_in
</UL>

<P><STRONG><a name="[34f]"></a>MS_proxy_server_adv_stop</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.MS_proxy_server_adv_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MS_proxy_server_adv_stop &rArr; MS_brr_bcast_end
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_bcast_end
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_gatt_recv_cb
</UL>

<P><STRONG><a name="[471]"></a>MS_trn_register</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_trn_register))
<BR><BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_init
</UL>

<P><STRONG><a name="[310]"></a>MS_trn_send_access_pdu</STRONG> (Thumb, 134 bytes, Stack size 464 bytes, libethermind_mesh_core.lib(i.MS_trn_send_access_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_app_key
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frame_secure_pdu
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_device_key
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_alloc_seq_num
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ltrn_send_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_send_pdu
</UL>

<P><STRONG><a name="[352]"></a>MS_trn_send_control_pdu</STRONG> (Thumb, 88 bytes, Stack size 328 bytes, libethermind_mesh_core.lib(i.MS_trn_send_control_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = MS_trn_send_control_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_alloc_seq_num
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ltrn_send_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_trigger_heartbeat
</UL>

<P><STRONG><a name="[2ec]"></a>MS_trn_trigger_heartbeat</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.MS_trn_trigger_heartbeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = MS_trn_trigger_heartbeat &rArr; MS_trn_send_control_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_primary_unicast_address
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_features
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_friendship_role
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_send_control_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_features_field
</UL>

<P><STRONG><a name="[356]"></a>MS_vendormodel_client_init</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, vendormodel_client.o(i.MS_vendormodel_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MS_vendormodel_client_init &rArr; MS_access_register_model &rArr; ms_access_search_and_allocate_model
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_register_model
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_register_vendor_defined_model_client
</UL>

<P><STRONG><a name="[357]"></a>MS_vendormodel_client_send_reliable_pdu</STRONG> (Thumb, 208 bytes, Stack size 312 bytes, vendormodel_client.o(i.MS_vendormodel_client_send_reliable_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 2032<LI>Call Chain = MS_vendormodel_client_send_reliable_pdu &rArr; MS_access_raw_data &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_raw_data
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_get_appkey_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_vendor_model_set
</UL>

<P><STRONG><a name="[359]"></a>MS_vendormodel_client_state_update</STRONG> (Thumb, 82 bytes, Stack size 288 bytes, vendormodel_client.o(i.MS_vendormodel_client_state_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 2072<LI>Call Chain = MS_vendormodel_client_state_update &rArr; MS_access_reply &rArr; MS_access_publish_ex &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_phy_model_client_cb
</UL>

<P><STRONG><a name="[26a]"></a>SM_CalcRandomAddr</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sm_mgr.o(i.SM_CalcRandomAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SM_CalcRandomAddr &rArr; sm_ah &rArr; smEncrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateRandBuf
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ah
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ConfigDeviceAddr
</UL>

<P><STRONG><a name="[35d]"></a>SM_GenerateAuthenSig</STRONG> (Thumb, 154 bytes, Stack size 88 bytes, sm_mgr.o(i.SM_GenerateAuthenSig))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_revmemcpy (via Veneer)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapIncSignCounter
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetSignCounter
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetSRK
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>

<P><STRONG><a name="[27f]"></a>SM_ResolveRandomAddrs</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sm_mgr.o(i.SM_ResolveRandomAddrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SM_ResolveRandomAddrs &rArr; sm_ah &rArr; smEncrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ah
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ResolvePrivateAddr
</UL>

<P><STRONG><a name="[259]"></a>SM_StartPairing</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, sm_pairing.o(i.SM_StartPairing))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SM_StartPairing &rArr; smGeneratePairingReqRsp &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGeneratePairingReqRsp
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smFreePairingParams
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authenticate
</UL>

<P><STRONG><a name="[210]"></a>SM_VerifyAuthenSig</STRONG> (Thumb, 206 bytes, Stack size 88 bytes, sm_mgr.o(i.SM_VerifyAuthenSig))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = SM_VerifyAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_revmemcpy (via Veneer)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapUpdateConnSignCounter
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ParsePacket
</UL>

<P><STRONG><a name="[366]"></a>UI_config_client_appkey_add</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, appl_sample_mesh_gateway.o(i.UI_config_client_appkey_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872<LI>Call Chain = UI_config_client_appkey_add &rArr; MS_config_client_send_reliable_pdu &rArr; MS_access_reliable_publish &rArr; MS_access_publish_ex &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_config_client_send_reliable_pdu
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_prov_callback
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_config_client_cb
</UL>

<P><STRONG><a name="[367]"></a>UI_config_client_appkey_binding</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, appl_sample_mesh_gateway.o(i.UI_config_client_appkey_binding))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = UI_config_client_appkey_binding &rArr; MS_access_cm_add_appkey &rArr; ms_stbx_k4 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sample_binding_app_key
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_appkey
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[9b]"></a>UI_config_client_cb</STRONG> (Thumb, 1396 bytes, Stack size 24 bytes, appl_sample_mesh_gateway.o(i.UI_config_client_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = UI_config_client_cb &rArr; UI_config_client_appkey_add &rArr; MS_config_client_send_reliable_pdu &rArr; MS_access_reliable_publish &rArr; MS_access_publish_ex &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_dump_bytes
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_config_client_appkey_add
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_transmit_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_sample_mesh_gateway.o(i.UI_register_config_model_client)
</UL>
<P><STRONG><a name="[9c]"></a>UI_generic_onoff_client_cb</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, appl_sample_mesh_gateway.o(i.UI_generic_onoff_client_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UI_generic_onoff_client_cb &rArr; appl_dump_bytes &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_dump_bytes
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_sample_mesh_gateway.o(i.UI_register_generic_onoff_model_client)
</UL>
<P><STRONG><a name="[9e]"></a>UI_phy_model_client_cb</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, appl_sample_mesh_gateway.o(i.UI_phy_model_client_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120<LI>Call Chain = UI_phy_model_client_cb &rArr; MS_vendormodel_client_state_update &rArr; MS_access_reply &rArr; MS_access_publish_ex &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_vendormodel_client_state_update
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_sample_mesh_gateway.o(i.UI_register_vendor_defined_model_client)
</UL>
<P><STRONG><a name="[9d]"></a>UI_prov_callback</STRONG> (Thumb, 1948 bytes, Stack size 144 bytes, appl_sample_mesh_gateway.o(i.UI_prov_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 2016<LI>Call Chain = UI_prov_callback &rArr; UI_config_client_appkey_add &rArr; MS_config_client_send_reliable_pdu &rArr; MS_access_reliable_publish &rArr; MS_access_publish_ex &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_delete_from_cache
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_delete_from_replay_cache
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_delete_from_reassembled_cache
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_scan_pl
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_prov_devices_list
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_set_authval
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_send_pdu
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_bind
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_get_queue_depth
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_set_publish_address
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_config_client_appkey_add
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via Veneer)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_netkey_at_offset
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_key_refresh_phase
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_start_snb_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_sample_mesh_gateway.o(i.UI_register_prov)
</UL>
<P><STRONG><a name="[9a]"></a>UI_provcfg_complete_timeout_handler</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, appl_sample_mesh_gateway.o(i.UI_provcfg_complete_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1848<LI>Call Chain = UI_provcfg_complete_timeout_handler &rArr; MS_config_client_send_reliable_pdu &rArr; MS_access_reliable_publish &rArr; MS_access_publish_ex &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_delete_from_cache
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_delete_from_replay_cache
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_delete_from_reassembled_cache
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_device_key_handle
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_delete_device_key
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_config_client_send_reliable_pdu
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_sample_mesh_gateway.o(i.UI_prov_callback)
</UL>
<P><STRONG><a name="[374]"></a>UI_register_config_model_client</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, appl_sample_mesh_gateway.o(i.UI_register_config_model_client))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UI_register_config_model_client &rArr; MS_config_client_init &rArr; MS_access_register_model &rArr; ms_access_search_and_allocate_model
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_config_client_init
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[375]"></a>UI_register_generic_onoff_model_client</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, appl_sample_mesh_gateway.o(i.UI_register_generic_onoff_model_client))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UI_register_generic_onoff_model_client &rArr; MS_generic_onoff_client_init &rArr; MS_access_register_model &rArr; ms_access_search_and_allocate_model
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_generic_onoff_client_init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[376]"></a>UI_register_prov</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, appl_sample_mesh_gateway.o(i.UI_register_prov))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UI_register_prov &rArr; MS_prov_register &rArr; EM_stop_timer &rArr; timer_del_entity &rArr; EM_free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_register
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[377]"></a>UI_register_vendor_defined_model_client</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, appl_sample_mesh_gateway.o(i.UI_register_vendor_defined_model_client))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UI_register_vendor_defined_model_client &rArr; MS_vendormodel_client_init &rArr; MS_access_register_model &rArr; ms_access_search_and_allocate_model
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_vendormodel_client_init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[368]"></a>UI_sample_binding_app_key</STRONG> (Thumb, 166 bytes, Stack size 96 bytes, appl_sample_mesh_gateway.o(i.UI_sample_binding_app_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = UI_sample_binding_app_key &rArr; MS_access_bind_model_app &rArr; ms_access_ps_store &rArr; nvsto_write_header &rArr; nvs_write_header &rArr; flash_write_word &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_app_key
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_bind_model_app
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_config_client_appkey_binding
</UL>

<P><STRONG><a name="[378]"></a>UI_set_provision_data</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, appl_sample_mesh_gateway.o(i.UI_set_provision_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = UI_set_provision_data &rArr; MS_access_cm_set_prov_data_provsioner &rArr; MS_access_cm_add_update_netkey &rArr; ms_access_cm_update_key_refresh_phase &rArr; ms_access_cm_create_keys_from_netkey &rArr; ms_stbx_k2 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_prov_data_provsioner
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[370]"></a>UI_set_publish_address</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, appl_sample_mesh_gateway.o(i.UI_set_publish_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = UI_set_publish_address &rArr; MS_access_cm_set_model_publication &rArr; ms_search_and_add_virtual_address &rArr; ms_stbx_va &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_device_key_handle
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_model_publication
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_prov_callback
</UL>

<P><STRONG><a name="[379]"></a>UI_setup_prov</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, appl_sample_mesh_gateway.o(i.UI_setup_prov))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = UI_setup_prov &rArr; MS_prov_setup &rArr; MS_brr_bcast_unprovisioned_beacon &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_setup
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[37a]"></a>UI_vendor_model_set</STRONG> (Thumb, 264 bytes, Stack size 360 bytes, appl_sample_mesh_gateway.o(i.UI_vendor_model_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 2392<LI>Call Chain = UI_vendor_model_set &rArr; MS_vendormodel_client_send_reliable_pdu &rArr; MS_access_raw_data &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_prov_devices_list
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_primary_unicast_address
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_vendormodel_client_send_reliable_pdu
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_get_address_type
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessEvent
</UL>

<P><STRONG><a name="[3ad]"></a>UI_vendor_model_set_raw_addr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, appl_sample_mesh_gateway.o(i.UI_vendor_model_set_raw_addr))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessEvent
</UL>

<P><STRONG><a name="[b1]"></a>access_pkt_in</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.access_pkt_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = access_pkt_in &rArr; ms_access_handle_rx_opcode &rArr; ms_search_address
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_handle_rx_opcode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.ms_access_init)
</UL>
<P><STRONG><a name="[37c]"></a>access_ps_init</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.access_ps_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = access_ps_init &rArr; nvsto_register
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_register
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_init
</UL>

<P><STRONG><a name="[37e]"></a>aes_ccm_ad</STRONG> (Thumb, 162 bytes, Stack size 104 bytes, aes-ccm.o(i.aes_ccm_ad))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = aes_ccm_ad &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_encr_start
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_encr
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_auth_start
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_auth
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_init
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_deinit
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_ccm_decrypt
</UL>

<P><STRONG><a name="[386]"></a>aes_ccm_ae</STRONG> (Thumb, 154 bytes, Stack size 88 bytes, aes-ccm.o(i.aes_ccm_ae))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_encr_start
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_encr
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_auth_start
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_auth
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_init
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_deinit
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_ccm_encrypt
</UL>

<P><STRONG><a name="[388]"></a>aes_cmac</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, libethermind_utils.lib(i.aes_cmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_generate_subkeys
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_generate_mac
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_cmac
</UL>

<P><STRONG><a name="[38b]"></a>aes_cmac_128B_encrypt_pl</STRONG> (Thumb, 60 bytes, Stack size 64 bytes, libethermind_utils.lib(i.aes_cmac_128B_encrypt_pl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_encrypt
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_reverse_bytestream_endianness
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_generate_subkeys
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_generate_mac
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_finalize_mac
</UL>

<P><STRONG><a name="[3d2]"></a>aes_cmac_context_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, libethermind_utils.lib(i.aes_cmac_context_init))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_cmac
</UL>

<P><STRONG><a name="[381]"></a>aes_encrypt</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, aes.o(i.aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_ae
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_ad
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_encr
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_auth_start
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_auth
</UL>

<P><STRONG><a name="[385]"></a>aes_encrypt_deinit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, aes.o(i.aes_encrypt_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = aes_encrypt_deinit &rArr; EM_free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_free_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_ae
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_ad
</UL>

<P><STRONG><a name="[37f]"></a>aes_encrypt_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, aes.o(i.aes_encrypt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = aes_encrypt_init &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_ae
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_ad
</UL>

<P><STRONG><a name="[1db]"></a>app_main</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, blemesh_main.o(i.app_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_main
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_system (via Veneer)
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_pwrmgr_device (via Veneer)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_system (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[369]"></a>appl_dump_bytes</STRONG> (Thumb, 244 bytes, Stack size 104 bytes, blebrr_pl.o(i.appl_dump_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = appl_dump_bytes &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_generic_onoff_client_cb
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_config_client_cb
</UL>

<P><STRONG><a name="[398]"></a>appl_mesh_sample</STRONG> (Thumb, 378 bytes, Stack size 88 bytes, appl_sample_mesh_gateway.o(i.appl_mesh_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 2000<LI>Call Chain = appl_mesh_sample &rArr; MS_net_key_refresh_init &rArr; MS_net_key_refresh &rArr; ms_net_netkey_update &rArr; MS_config_client_send_reliable_pdu &rArr; MS_access_reliable_publish &rArr; MS_access_publish_ex &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_em_init
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_timer_init
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_os_init
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_debug_init
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_prov_devices_list
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_features_field
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_register
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_scan_enable
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_setup_prov
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_set_publish_address
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_set_provision_data
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_register_vendor_defined_model_client
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_register_prov
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_register_generic_onoff_model_client
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_register_config_model_client
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_config_client_appkey_binding
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_netkey_generate
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_ps_store_all_record
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_register_element
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_create_node
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_ps_store_disable
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_netkey_at_offset
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_key_refresh_phase
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_start_snb_timer
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_key_refresh_init
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_start_iv_update_timer
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessEvent
</UL>

<P><STRONG><a name="[203]"></a>attSendMsg</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, att_util.o(i.attSendMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_State
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_GenerateAuthenSig
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_bm_alloc
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SendData
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_WriteRsp
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadRsp
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadMultiRsp
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadByTypeRsp
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadByGrpTypeRsp
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadBlobRsp
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PrepareWriteRsp
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_FindByTypeValueRsp
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ExecuteWriteRsp
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ExchangeMTURsp
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ErrorRsp
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_HandleValueNoti
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_HandleValueInd
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_FindInfoRsp
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadByTypeReq
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadByGrpTypeReq
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadBlobReq
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PrepareWriteReq
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_FindInfoReq
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_FindByTypeValueReq
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ExecuteWriteReq
</UL>

<P><STRONG><a name="[46e]"></a>bitarray_get_bit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, libethermind_utils.lib(i.bitarray_get_bit))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_search_and_add_address
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_handle_rx_opcode
</UL>

<P><STRONG><a name="[39f]"></a>bitarray_get_lowest_bit_set</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, libethermind_utils.lib(i.bitarray_get_lowest_bit_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bitarray_get_lowest_bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_refresh_all_appkeys
</UL>

<P><STRONG><a name="[2d3]"></a>bitarray_reset_all</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, libethermind_utils.lib(i.bitarray_reset_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bitarray_reset_all
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_update_netkey
</UL>

<P><STRONG><a name="[2f9]"></a>bitarray_reset_bit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, libethermind_utils.lib(i.bitarray_reset_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bitarray_reset_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_delete_appkey
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_unbind_model_app
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_update_delete_appkey
</UL>

<P><STRONG><a name="[2ca]"></a>bitarray_set_bit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, libethermind_utils.lib(i.bitarray_set_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bitarray_set_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_appkey
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_bind_model_app
</UL>

<P><STRONG><a name="[1e5]"></a>bleMesh_Init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, blemesh.o(i.bleMesh_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = bleMesh_Init &rArr; bleMesh_uart_init &rArr; hal_uart_init &rArr; uart_hw_init &rArr; uart_hw_deinit &rArr; hal_clk_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_lock (via Veneer)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterForMsg
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_AddService
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevInfo_AddService
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dongleKey_init (via Veneer)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PeriDevMgrInit
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ParamsInit
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_CentDevMgrInit
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_CentConnRegister
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_SetParameter
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_AddService
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event (via Veneer)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llInitFeatureSetDLE (via Veneer)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llInitFeatureSet2MPHY (via Veneer)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_INIT
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks (via Veneer)
</UL>

<P><STRONG><a name="[5f]"></a>bleMesh_ProcessEvent</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, blemesh.o(i.bleMesh_ProcessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 2416<LI>Call Chain = bleMesh_ProcessEvent &rArr; UI_vendor_model_set &rArr; MS_vendormodel_client_send_reliable_pdu &rArr; MS_access_raw_data &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive (via Veneer)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate (via Veneer)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_key_timer_handler (via Veneer)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessOSALMsg
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event (via Veneer)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_reflash
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_init
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_config
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_blink_porcess_evt
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_blink_evt_cfg
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_handle_evt_scan_complete
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_vendor_model_set_raw_addr
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_vendor_model_set
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_prov_devices_list
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_RegisterForInd
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_InitClient
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLI_process_line
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLI_init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_blemesh.o(.constdata)
</UL>
<P><STRONG><a name="[3a1]"></a>bleMesh_uart_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, blemesh.o(i.bleMesh_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = bleMesh_uart_init &rArr; hal_uart_init &rArr; uart_hw_init &rArr; uart_hw_deinit &rArr; hal_clk_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_Init
</UL>

<P><STRONG><a name="[3b8]"></a>blebrr_advertise_data_pl</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, blebrr_pl.o(i.blebrr_advertise_data_pl))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = blebrr_advertise_data_pl &rArr; blebrr_advertise_pl &rArr; BLE_gap_set_adv_enable &rArr; GAP_MakeDiscoverable &rArr; gapSetAdvParams &rArr; isLimitedDiscoverableMode &rArr; gapFindADType
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_gap_set_advscanrsp_data
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_gap_set_adv_params
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_advertise_pl
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_update_advdata
</UL>

<P><STRONG><a name="[3b9]"></a>blebrr_advertise_pl</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, blebrr_pl.o(i.blebrr_advertise_pl))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = blebrr_advertise_pl &rArr; BLE_gap_set_adv_enable &rArr; GAP_MakeDiscoverable &rArr; gapSetAdvParams &rArr; isLimitedDiscoverableMode &rArr; gapFindADType
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_gap_set_adv_enable
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_send
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_advscan_timeout_handler
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_advertise_setup
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_advertise_data_pl
</UL>

<P><STRONG><a name="[3ba]"></a>blebrr_disconnect_pl</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, blebrr_pl.o(i.blebrr_disconnect_pl))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = blebrr_disconnect_pl &rArr; BLE_gap_disconnect &rArr; GAP_TerminateLinkReq &rArr; disconnectNext &rArr; linkDB_FindFirst
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_gap_disconnect
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_demo_reset
</UL>

<P><STRONG><a name="[395]"></a>blebrr_gatt_mode_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, blebrr_gatt.o(i.blebrr_gatt_mode_get))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_proxy_data_out_ccd_cb
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_prov_data_out_ccd_cb
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_client_process_gattMsg
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_bcon_send
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_send_pl
</UL>

<P><STRONG><a name="[3bd]"></a>blebrr_gatt_send_pl</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, blebrr_pl.o(i.blebrr_gatt_send_pl))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = blebrr_gatt_send_pl &rArr; mesh_proxy_notify_data_out &rArr; GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_proxy_notify_data_out
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_prov_notify_data_out
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_mode_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_send
</UL>

<P><STRONG><a name="[3ca]"></a>blebrr_get_advdata_offset_pl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, blebrr_pl.o(i.blebrr_get_advdata_offset_pl))
<BR><BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_register
</UL>

<P><STRONG><a name="[36b]"></a>blebrr_get_queue_depth</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, blebrr.o(i.blebrr_get_queue_depth))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = blebrr_get_queue_depth
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_queue_depth_check
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_update_advdata
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_adv_send
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_scan_setup
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_prov_callback
</UL>

<P><STRONG><a name="[3af]"></a>blebrr_handle_evt_adv_complete</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, blebrr_pl.o(i.blebrr_handle_evt_adv_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = blebrr_handle_evt_adv_complete &rArr; blebrr_pl_advertise_setup &rArr; blebrr_timer_start &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_advertise_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessGAPMsg
</UL>

<P><STRONG><a name="[3b0]"></a>blebrr_handle_evt_adv_report</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, blebrr_pl.o(i.blebrr_handle_evt_adv_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = blebrr_handle_evt_adv_report &rArr; blebrr_pl_recv_advpacket &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_recv_advpacket
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessGAPMsg
</UL>

<P><STRONG><a name="[3ac]"></a>blebrr_handle_evt_scan_complete</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, blebrr_pl.o(i.blebrr_handle_evt_scan_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = blebrr_handle_evt_scan_complete &rArr; blebrr_pl_scan_setup &rArr; blebrr_update_advdata &rArr; blebrr_advertise_data_pl &rArr; blebrr_advertise_pl &rArr; BLE_gap_set_adv_enable &rArr; GAP_MakeDiscoverable &rArr; gapSetAdvParams &rArr; isLimitedDiscoverableMode &rArr; gapFindADType
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_scan_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessGAPMsg
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessEvent
</UL>

<P><STRONG><a name="[3b1]"></a>blebrr_handle_le_connection_pl</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, blebrr_pl.o(i.blebrr_handle_le_connection_pl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = blebrr_handle_le_connection_pl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_advertise_end
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessGAPMsg
</UL>

<P><STRONG><a name="[3b2]"></a>blebrr_handle_le_disconnection_pl</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, blebrr_pl.o(i.blebrr_handle_le_disconnection_pl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = blebrr_handle_le_disconnection_pl &rArr; blebrr_pl_gatt_disconnection &rArr; MS_brr_remove_bearer
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_gatt_disconnection
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessGAPMsg
</UL>

<P><STRONG><a name="[3c4]"></a>blebrr_init_pl</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, blebrr_pl.o(i.blebrr_init_pl))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = blebrr_init_pl &rArr; GAP_ConfigDeviceAddr &rArr; SM_CalcRandomAddr &rArr; sm_ah &rArr; smEncrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_gap_set_scan_params
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ConfigDeviceAddr
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_register
</UL>

<P><STRONG><a name="[3c3]"></a>blebrr_pl_advertise_end</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, blebrr.o(i.blebrr_pl_advertise_end))
<BR><BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_handle_le_connection_pl
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_gatt_connection
</UL>

<P><STRONG><a name="[3c0]"></a>blebrr_pl_advertise_setup</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, blebrr.o(i.blebrr_pl_advertise_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = blebrr_pl_advertise_setup &rArr; blebrr_timer_start &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_scan_pl
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_proxy_fetch_state
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_timer_start
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_advertise_pl
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_handle_evt_adv_complete
</UL>

<P><STRONG><a name="[3bb]"></a>blebrr_pl_gatt_connection</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, blebrr_gatt.o(i.blebrr_pl_gatt_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = blebrr_pl_gatt_connection &rArr; blebrr_scan_enable &rArr; blebrr_scan_pl &rArr; BLE_gap_set_scan_enable &rArr; GAP_DeviceDiscoveryCancel &rArr; gapSendDevDiscEvent &rArr; gapFreeScanRecs
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_add_bearer
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_scan_enable
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_advertise_end
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_com_channel_setup_pl
</UL>

<P><STRONG><a name="[3bc]"></a>blebrr_pl_gatt_disconnection</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, blebrr_gatt.o(i.blebrr_pl_gatt_disconnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = blebrr_pl_gatt_disconnection &rArr; MS_brr_remove_bearer
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_remove_bearer
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_com_channel_setup_pl
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_handle_le_disconnection_pl
</UL>

<P><STRONG><a name="[3c1]"></a>blebrr_pl_recv_advpacket</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, blebrr.o(i.blebrr_pl_recv_advpacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blebrr_pl_recv_advpacket &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_handle_evt_adv_report
</UL>

<P><STRONG><a name="[394]"></a>blebrr_pl_recv_gattpacket</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, blebrr_gatt.o(i.blebrr_pl_recv_gattpacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = blebrr_pl_recv_gattpacket
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_proxy_data_in_wt_cb
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_prov_data_in_wt_cb
</UL>

<P><STRONG><a name="[3c2]"></a>blebrr_pl_scan_setup</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, blebrr.o(i.blebrr_pl_scan_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = blebrr_pl_scan_setup &rArr; blebrr_update_advdata &rArr; blebrr_advertise_data_pl &rArr; blebrr_advertise_pl &rArr; BLE_gap_set_adv_enable &rArr; GAP_MakeDiscoverable &rArr; gapSetAdvParams &rArr; isLimitedDiscoverableMode &rArr; gapFindADType
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_scan_pl
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_get_queue_depth
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_update_advdata
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_handle_evt_scan_complete
</UL>

<P><STRONG><a name="[3c8]"></a>blebrr_queue_depth_check</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, blebrr.o(i.blebrr_queue_depth_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = blebrr_queue_depth_check &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_get_queue_depth
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Rand (via Veneer)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_send
</UL>

<P><STRONG><a name="[39d]"></a>blebrr_register</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, blebrr.o(i.blebrr_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = blebrr_register &rArr; blebrr_init_pl &rArr; GAP_ConfigDeviceAddr &rArr; SM_CalcRandomAddr &rArr; sm_ah &rArr; smEncrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_sleep
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_update_module_debug_flag
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_set_debug_level
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_add_bearer
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_init_pl
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_get_advdata_offset_pl
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[397]"></a>blebrr_scan_enable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, blebrr.o(i.blebrr_scan_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = blebrr_scan_enable &rArr; blebrr_scan_pl &rArr; BLE_gap_set_scan_enable &rArr; GAP_DeviceDiscoveryCancel &rArr; gapSendDevDiscEvent &rArr; gapFreeScanRecs
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_scan_pl
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_proxy_data_out_ccd_cb
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_gatt_connection
</UL>

<P><STRONG><a name="[36f]"></a>blebrr_scan_pl</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, blebrr_pl.o(i.blebrr_scan_pl))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = blebrr_scan_pl &rArr; BLE_gap_set_scan_enable &rArr; GAP_DeviceDiscoveryCancel &rArr; gapSendDevDiscEvent &rArr; gapFreeScanRecs
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_gap_set_scan_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_send
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_advscan_timeout_handler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_adv_send
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_scan_enable
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_scan_setup
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_advertise_setup
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_prov_callback
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_random_handler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_pubkey_handler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_data_handler
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
</UL>

<P><STRONG><a name="[92]"></a>brr_read_data_ind</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.brr_read_data_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = brr_read_data_ind
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.MS_brr_add_bearer)
</UL>
<P><STRONG><a name="[d3]"></a>cli_core_modelc_config_key_refresh_phase_set</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, cli_model.o(i.cli_core_modelc_config_key_refresh_phase_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 1848<LI>Call Chain = cli_core_modelc_config_key_refresh_phase_set &rArr; MS_config_client_send_reliable_pdu &rArr; MS_access_reliable_publish &rArr; MS_access_publish_ex &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_config_client_send_reliable_pdu
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_key_refresh_phase
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLI_strtoi
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blemesh.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>cli_core_modelc_config_netkey_update</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, cli_model.o(i.cli_core_modelc_config_netkey_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1864<LI>Call Chain = cli_core_modelc_config_netkey_update &rArr; MS_config_client_send_reliable_pdu &rArr; MS_access_reliable_publish &rArr; MS_access_publish_ex &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_config_client_send_reliable_pdu
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_update_netkey
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLI_strtoi
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLI_strtoarray
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blemesh.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>cli_demo_help</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, cli_model.o(i.cli_demo_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cli_demo_help &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blemesh.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>cli_demo_reset</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, cli_model.o(i.cli_demo_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = cli_demo_reset &rArr; MS_access_cm_reset &rArr; MS_prov_stop_interleave_timer &rArr; EM_stop_timer &rArr; timer_del_entity &rArr; EM_free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_reset
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_features_field
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_proxy_fetch_state
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_disconnect_pl
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blemesh.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>cli_group_select</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, cli_model.o(i.cli_group_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cli_group_select &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLI_strtoi
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blemesh.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>cli_internal_status</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, cli_model.o(i.cli_internal_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cli_internal_status &rArr; ll_dumpConnectionInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dumpConnectionInfo
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blemesh.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>cli_off</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cli_model.o(i.cli_off))
<BR>[Address Reference Count : 1]<UL><LI> blemesh.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>cli_on</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cli_model.o(i.cli_on))
<BR>[Address Reference Count : 1]<UL><LI> blemesh.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>cli_seek</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cli_model.o(i.cli_seek))
<BR>[Address Reference Count : 1]<UL><LI> blemesh.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>cli_start</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, cli_model.o(i.cli_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cli_start &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLI_strtoi
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blemesh.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>config_client_cb</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.config_client_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = config_client_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.MS_config_client_init)
</UL>
<P><STRONG><a name="[304]"></a>crc16</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, crc16.o(i.crc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_virtual_addresses
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_tx_states_and_features
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_subnets
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_seq_number
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_proxy_filter_address
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_provisioner_address
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_non_virtual_addresses
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_models
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_elements
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_element_addresses
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_dev_key
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_appkeys
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_ps_crc_check
</UL>

<P><STRONG><a name="[3d0]"></a>cry_aes_128_ccm_decrypt</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, cry.o(i.cry_aes_128_ccm_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = cry_aes_128_ccm_decrypt &rArr; aes_ccm_ad &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_ad
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_data_handler
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_decode_frame
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frame_decrypt_pdu
</UL>

<P><STRONG><a name="[3d1]"></a>cry_aes_128_ccm_encrypt</STRONG> (Thumb, 68 bytes, Stack size 64 bytes, cry.o(i.cry_aes_128_ccm_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_ae
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_data_handler
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_send
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frame_secure_pdu
</UL>

<P><STRONG><a name="[333]"></a>cry_aes_128_cmac</STRONG> (Thumb, 154 bytes, Stack size 72 bytes, cry.o(i.cry_aes_128_cmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_free_mem
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_alloc_mem
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_context_init
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_reverse_bytestream_in_place
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_reverse_bytestream_endianness
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_broadcast_secure_beacon
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_calc_confirm
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_va
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k4
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k3
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k2
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k1
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_handle_secure_beacon
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_s1
</UL>

<P><STRONG><a name="[38d]"></a>cry_aes_128_encrypt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cry.o(i.cry_aes_128_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_128B_encrypt_pl
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_obfuscate
</UL>

<P><STRONG><a name="[3d5]"></a>cry_ecdh_generate_secret</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cry.o(i.cry_ecdh_generate_secret))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = cry_ecdh_generate_secret &rArr; phyplus_ecdh_generate_secret &rArr; cry_reverse_bytestream_endianness
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyplus_ecdh_generate_secret
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_pubkey_handler
</UL>

<P><STRONG><a name="[34d]"></a>cry_ecdh_get_public_key</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, cry.o(i.cry_ecdh_get_public_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cry_ecdh_get_public_key &rArr; phyplus_ecdh_get_public_key &rArr; cry_reverse_bytestream_endianness
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyplus_ecdh_get_public_key
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_setup
</UL>

<P><STRONG><a name="[329]"></a>cry_ecdh_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cry.o(i.cry_ecdh_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = cry_ecdh_init &rArr; phyplus_ecdh_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyplus_ecdh_init
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_setup
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_init
</UL>

<P><STRONG><a name="[bb]"></a>cry_generate_random_bytes</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cry.o(i.cry_generate_random_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cry_generate_random_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Rand (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cry.o(i.phyplus_ecdh_init)
</UL>
<P><STRONG><a name="[344]"></a>cry_rand_generate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cry.o(i.cry_rand_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = cry_rand_generate &rArr; TRNG_Rand &rArr; TRNG_INIT &rArr; TRNG_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_Rand
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_bind
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_invite_handler
</UL>

<P><STRONG><a name="[38c]"></a>cry_reverse_bytestream_endianness</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cry.o(i.cry_reverse_bytestream_endianness))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cry_reverse_bytestream_endianness
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyplus_ecdh_get_public_key
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyplus_ecdh_generate_secret
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_cmac
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_128B_encrypt_pl
</UL>

<P><STRONG><a name="[3d3]"></a>cry_reverse_bytestream_in_place</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cry.o(i.cry_reverse_bytestream_in_place))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cry_reverse_bytestream_in_place
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_cmac
</UL>

<P><STRONG><a name="[1da]"></a>dbg_printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, my_printf.o(i.dbg_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dbg_printf &rArr; log_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessOSALMsg
</UL>

<P><STRONG><a name="[1d8]"></a>dbg_printf_init</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, my_printf.o(i.dbg_printf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dbg_printf_init &rArr; hal_uart_init &rArr; uart_hw_init &rArr; uart_hw_deinit &rArr; hal_clk_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[3db]"></a>em_timer_get_ms_timestamp</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, em_timer.o(i.em_timer_get_ms_timestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = em_timer_get_ms_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_GetSystemClock (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add_entity
</UL>

<P><STRONG><a name="[3fb]"></a>gapAddAddrAdj</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gap_configmgr.o(i.gapAddAddrAdj))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetAdvParams
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessNewAddr
</UL>

<P><STRONG><a name="[1f]"></a>gapCancelLinkReq</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, gap_centlinkmgr.o(i.gapCancelLinkReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapCancelLinkReq
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_CreateConnCancelCmd (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap_centdevmgr.o(.data)
</UL>
<P><STRONG><a name="[3e9]"></a>gapDetermineAddrType</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gap_configmgr.o(i.gapDetermineAddrType))
<BR><BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessAdvertDevInfo
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnectionCompleteEvt
</UL>

<P><STRONG><a name="[3df]"></a>gapFindADType</STRONG> (Thumb, 72 bytes, Stack size 36 bytes, gap_devmgr.o(i.gapFindADType))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gapFindADType
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapValidADType
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessAdvertDevInfo
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isLimitedDiscoverableMode
</UL>

<P><STRONG><a name="[3e2]"></a>gapFreeEstLink</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_linkmgr.o(i.gapFreeEstLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapFreeEstLink
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapTerminateConnComplete
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessCreateLLConnCmdStatus
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnectionCompleteEvt
</UL>

<P><STRONG><a name="[27e]"></a>gapGetIRK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gap_configmgr.o(i.gapGetIRK))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent
</UL>

<P><STRONG><a name="[360]"></a>gapGetSRK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gap_configmgr.o(i.gapGetSRK))
<BR><BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_GenerateAuthenSig
</UL>

<P><STRONG><a name="[35e]"></a>gapGetSignCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gap_configmgr.o(i.gapGetSignCounter))
<BR><BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_GenerateAuthenSig
</UL>

<P><STRONG><a name="[362]"></a>gapIncSignCounter</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gap_configmgr.o(i.gapIncSignCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapIncSignCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_GenerateAuthenSig
</UL>

<P><STRONG><a name="[267]"></a>gapIsAdvertising</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gap_devmgr.o(i.gapIsAdvertising))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ConfigDeviceAddr
</UL>

<P><STRONG><a name="[268]"></a>gapIsScanning</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gap_devmgr.o(i.gapIsScanning))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ConfigDeviceAddr
</UL>

<P><STRONG><a name="[3e3]"></a>gapPairingCompleteCB</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, gap_linkmgr.o(i.gapPairingCompleteCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gapPairingCompleteCB &rArr; sendAuthEvent &rArr; gapFreeAuthLink
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memdup (via Veneer)
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAuthEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
</UL>

<P><STRONG><a name="[3ed]"></a>gapProcessConnUpdateCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_centlinkmgr.o(i.gapProcessConnUpdateCmdStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gapProcessConnUpdateCmdStatus &rArr; gapSendLinkUpdateEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendLinkUpdateEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnEvt
</UL>

<P><STRONG><a name="[3ef]"></a>gapProcessConnUpdateCompleteEvt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_linkmgr.o(i.gapProcessConnUpdateCompleteEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gapProcessConnUpdateCompleteEvt &rArr; gapSendLinkUpdateEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendLinkUpdateEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessOSALMsg
</UL>

<P><STRONG><a name="[3f0]"></a>gapProcessConnectionCompleteEvt</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, gap_linkmgr.o(i.gapProcessConnectionCompleteEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gapProcessConnectionCompleteEvt &rArr; linkDB_Add &rArr; reportStatusChange
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendEstLinkEvent
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeEstLink
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapDetermineAddrType
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_UpdateMtuSize
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Add
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SegmentPkt_Reset
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ReassemblePkt_Reset
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTerminateEvent
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnectNext
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessOSALMsg
</UL>

<P><STRONG><a name="[3ec]"></a>gapProcessCreateLLConnCmdStatus</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, gap_centlinkmgr.o(i.gapProcessCreateLLConnCmdStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gapProcessCreateLLConnCmdStatus &rArr; sendEstLinkEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendEstLinkEvent
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeEstLink
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnEvt
</UL>

<P><STRONG><a name="[3f4]"></a>gapProcessDisconnectCompleteEvt</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, gap_linkmgr.o(i.gapProcessDisconnectCompleteEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gapProcessDisconnectCompleteEvt &rArr; linkDB_Remove &rArr; reportStatusChange
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_UpdateMtuSize
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Remove
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SegmentPkt_Reset
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ReassemblePkt_Reset
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTerminateEvent
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeAuthLink
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnectNext
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessOSALMsg
</UL>

<P><STRONG><a name="[3ea]"></a>gapProcessL2CAPSignalEvt</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, gap_centlinkmgr.o(i.gapProcessL2CAPSignalEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = gapProcessL2CAPSignalEvt &rArr; L2CAP_ConnParamUpdateRsp &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ConnUpdateCmd (via Veneer)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnParamUpdateRsp
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ValidConnTimeParams (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnEvt
</UL>

<P><STRONG><a name="[26b]"></a>gapProcessNewAddr</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gap_configmgr.o(i.gapProcessNewAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapProcessNewAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapAddAddrAdj
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetRandomAddressCmd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ConfigDeviceAddr
</UL>

<P><STRONG><a name="[3f7]"></a>gapProcessRandomAddrComplete</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, gap_configmgr.o(i.gapProcessRandomAddrComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapProcessRandomAddrComplete
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_reload_timer (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessHCICmdCompleteEvt
</UL>

<P><STRONG><a name="[3f9]"></a>gapReadBD_ADDRStatus</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, gap_configmgr.o(i.gapReadBD_ADDRStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gapReadBD_ADDRStatus &rArr; gapSendDeviceInitDoneEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ReadBufSizeCmd (via Veneer)
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDeviceInitDoneEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessHCICmdCompleteEvt
</UL>

<P><STRONG><a name="[3f8]"></a>gapReadBufSizeCmdStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gap_configmgr.o(i.gapReadBufSizeCmdStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapReadBufSizeCmdStatus &rArr; gapSendDeviceInitDoneEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDeviceInitDoneEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessHCICmdCompleteEvt
</UL>

<P><STRONG><a name="[263]"></a>gapRegisterCentral</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gap_task.o(i.gapRegisterCentral))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_CentDevMgrInit
</UL>

<P><STRONG><a name="[260]"></a>gapRegisterCentralConn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gap_linkmgr.o(i.gapRegisterCentralConn))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_CentConnRegister
</UL>

<P><STRONG><a name="[27a]"></a>gapRegisterPeripheral</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gap_task.o(i.gapRegisterPeripheral))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PeriDevMgrInit
</UL>

<P><STRONG><a name="[3ee]"></a>gapSendLinkUpdateEvent</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, gap_linkmgr.o(i.gapSendLinkUpdateEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gapSendLinkUpdateEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnUpdateCmdStatus
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnUpdateCompleteEvt
</UL>

<P><STRONG><a name="[23]"></a>gapSetAdvParams</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, gap_peridevmgr.o(i.gapSetAdvParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = gapSetAdvParams &rArr; isLimitedDiscoverableMode &rArr; gapFindADType
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_NumActiveConnections
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapAddAddrAdj
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetAdvParamCmd (via Veneer)
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isLimitedDiscoverableMode
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap_peridevmgr.o(.data)
</UL>
<P><STRONG><a name="[3e5]"></a>gapSetAdvParamsStatus</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gap_peridevmgr.o(i.gapSetAdvParamsStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gapSetAdvParamsStatus &rArr; gapSendMakeDiscEvent &rArr; gapFreeAdvertState
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetAdvEnableCmd (via Veneer)
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendMakeDiscEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPeriProcessHCICmdCompleteEvt
</UL>

<P><STRONG><a name="[3de]"></a>gapSetScanParamStatus</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gap_centdevmgr.o(i.gapSetScanParamStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gapSetScanParamStatus &rArr; gapSendDevDiscEvent &rArr; gapFreeScanRecs
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendScanEnable
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDevDiscEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapCentProcessHCICmdEvt
</UL>

<P><STRONG><a name="[3eb]"></a>gapTerminateConnComplete</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gap_centlinkmgr.o(i.gapTerminateConnComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapTerminateConnComplete &rArr; gapFreeEstLink
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeEstLink
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnEvt
</UL>

<P><STRONG><a name="[365]"></a>gapUpdateConnSignCounter</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, gap_configmgr.o(i.gapUpdateConnSignCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapUpdateConnSignCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_VerifyAuthenSig
</UL>

<P><STRONG><a name="[3e0]"></a>gapValidADType</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gap_devmgr.o(i.gapValidADType))
<BR><BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFindADType
</UL>

<P><STRONG><a name="[3e7]"></a>gapWriteAdvDataStatus</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gap_peridevmgr.o(i.gapWriteAdvDataStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapWriteAdvDataStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPeriProcessHCICmdCompleteEvt
</UL>

<P><STRONG><a name="[3e6]"></a>gapWriteAdvEnableStatus</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, gap_peridevmgr.o(i.gapWriteAdvEnableStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = gapWriteAdvEnableStatus &rArr; isLimitedDiscoverableMode &rArr; gapFindADType
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_reload_timer (via Veneer)
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isLimitedDiscoverableMode
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendMakeDiscEvent
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeAdvertState
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPeriProcessHCICmdCompleteEvt
</UL>

<P><STRONG><a name="[407]"></a>gattNotifyEvent</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, gatt_task.o(i.gattNotifyEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gattNotifyEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerProcessMsgCB
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerHandleTimerCB
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerHandleConnStatusCB
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessMultiReqs
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattClientProcessMsgCB
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattClientHandleTimerCB
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattClientHandleConnStatusCB
</UL>

<P><STRONG><a name="[2ac]"></a>gattRegisterClient</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gatt_task.o(i.gattRegisterClient))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_InitClient
</UL>

<P><STRONG><a name="[2ad]"></a>gattRegisterServer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gatt_task.o(i.gattRegisterServer))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_InitServer
</UL>

<P><STRONG><a name="[2a8]"></a>gattStartTimer</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gatt_task.o(i.gattStartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gattStartTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerStart (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Indication
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattStoreClientInfo
</UL>

<P><STRONG><a name="[411]"></a>gattStopTimer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gatt_task.o(i.gattStopTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gattStopTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerStop (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattResetServerInfo
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattResetClientInfo
</UL>

<P><STRONG><a name="[94]"></a>generic_onoff_client_cb</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, libethermind_mesh_models.lib(i.generic_onoff_client_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = generic_onoff_client_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_models.lib(i.MS_generic_onoff_client_init)
</UL>
<P><STRONG><a name="[a9]"></a>hal_GPIO_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gpio.o(i.hal_GPIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_GPIO_IRQHandler &rArr; hal_gpioin_event &rArr; hal_gpio_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(i.hal_gpioin_register)
</UL>
<P><STRONG><a name="[439]"></a>hal_clk_gate_disable</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, clock.o(i.hal_clk_gate_disable))
<BR><BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_deinit
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwm_stop
</UL>

<P><STRONG><a name="[17d]"></a>hal_clk_gate_enable</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, clock.o(i.hal_clk_gate_enable))
<BR><BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spif_cache_config (via Veneer)
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwm_init
</UL>

<P><STRONG><a name="[4ca]"></a>hal_clk_reset</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, clock.o(i.hal_clk_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_clk_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_deinit
</UL>

<P><STRONG><a name="[422]"></a>hal_gpio_cfg_analog_io</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, gpio.o(i.hal_gpio_cfg_analog_io))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hal_gpio_cfg_analog_io &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pull_set
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init
</UL>

<P><STRONG><a name="[424]"></a>hal_gpio_fmux</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gpio.o(i.hal_gpio_fmux))
<BR><BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_deinit
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_fmux_set
</UL>

<P><STRONG><a name="[423]"></a>hal_gpio_fmux_set</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gpio.o(i.hal_gpio_fmux_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_gpio_fmux_set
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_fmux
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_init
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwm_open_channel
</UL>

<P><STRONG><a name="[1d9]"></a>hal_gpio_init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, gpio.o(i.hal_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hal_gpio_init &rArr; hal_pwrmgr_register
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_register (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[428]"></a>hal_gpio_pin2pin3_control</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio.o(i.hal_gpio_pin2pin3_control))
<BR><BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_handler
</UL>

<P><STRONG><a name="[427]"></a>hal_gpio_pin_init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gpio.o(i.hal_gpio_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = hal_gpio_pin_init &rArr; hal_gpio_cfg_analog_io &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin2pin3_control
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_cfg_analog_io
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_fmux
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_enable
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_disable
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_write
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_init
</UL>

<P><STRONG><a name="[15a]"></a>hal_gpio_pull_set</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gpio.o(i.hal_gpio_pull_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_gpio_pull_set
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_init
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_cfg_analog_io
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_clock_config
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_low_power_io_init (via Veneer)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dongleKey_init (via Veneer)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_init
</UL>

<P><STRONG><a name="[17e]"></a>hal_gpio_read</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gpio.o(i.hal_gpio_read))
<BR><BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_enable
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_handler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_sleep_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_release_debonce_timer_handler (via Veneer)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_press_debonce_timer_handler (via Veneer)
</UL>

<P><STRONG><a name="[42a]"></a>hal_gpio_wakeup_set</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, gpio.o(i.hal_gpio_wakeup_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_gpio_wakeup_set &rArr; hal_gpio_wakeup_control
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_control
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_sleep_handler
</UL>

<P><STRONG><a name="[42b]"></a>hal_gpio_write</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, gpio.o(i.hal_gpio_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_gpio_write &rArr; hal_gpio_pin_init &rArr; hal_gpio_cfg_analog_io &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_handler
</UL>

<P><STRONG><a name="[42f]"></a>hal_gpioin_disable</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, gpio.o(i.hal_gpioin_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_gpioin_disable &rArr; hal_gpio_pin_init &rArr; hal_gpio_cfg_analog_io &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_register
</UL>

<P><STRONG><a name="[42c]"></a>hal_gpioin_enable</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, gpio.o(i.hal_gpioin_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = hal_gpioin_enable &rArr; hal_gpio_pin_init &rArr; hal_gpio_cfg_analog_io &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_read
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_register
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_handler
</UL>

<P><STRONG><a name="[15b]"></a>hal_gpioin_register</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, gpio.o(i.hal_gpioin_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = hal_gpioin_register &rArr; hal_gpioin_enable &rArr; hal_gpio_pin_init &rArr; hal_gpio_cfg_analog_io &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_enable
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dongleKey_init (via Veneer)
</UL>

<P><STRONG><a name="[431]"></a>hal_pwm_ch_start</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, pwm.o(i.hal_pwm_ch_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = hal_pwm_ch_start &rArr; hal_pwm_init &rArr; hal_pwrmgr_register
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwm_start
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwm_set_count_val
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwm_open_channel
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_reflash
</UL>

<P><STRONG><a name="[437]"></a>hal_pwm_destroy</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, pwm.o(i.hal_pwm_destroy))
<BR><BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwm_module_init
</UL>

<P><STRONG><a name="[432]"></a>hal_pwm_init</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, pwm.o(i.hal_pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hal_pwm_init &rArr; hal_pwrmgr_register
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_register (via Veneer)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clk_gate_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwm_ch_start
</UL>

<P><STRONG><a name="[436]"></a>hal_pwm_module_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pwm.o(i.hal_pwm_module_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_pwm_module_init &rArr; hal_pwm_stop &rArr; hal_pwrmgr_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwm_stop
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwm_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_pwm_init
</UL>

<P><STRONG><a name="[434]"></a>hal_pwm_open_channel</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pwm.o(i.hal_pwm_open_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_pwm_open_channel &rArr; hal_gpio_fmux_set
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_fmux_set
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwm_ch_start
</UL>

<P><STRONG><a name="[433]"></a>hal_pwm_set_count_val</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, pwm.o(i.hal_pwm_set_count_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_pwm_set_count_val
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwm_ch_start
</UL>

<P><STRONG><a name="[435]"></a>hal_pwm_start</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, pwm.o(i.hal_pwm_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_pwm_start &rArr; hal_pwrmgr_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_lock (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwm_ch_start
</UL>

<P><STRONG><a name="[438]"></a>hal_pwm_stop</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, pwm.o(i.hal_pwm_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_pwm_stop &rArr; hal_pwrmgr_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unlock (via Veneer)
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clk_gate_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwm_module_init
</UL>

<P><STRONG><a name="[1d7]"></a>hal_rtc_clock_config</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, clock.o(i.hal_rtc_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_rtc_clock_config &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pull_set
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[3b4]"></a>hal_uart_deinit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, uart.o(i.hal_uart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_uart_deinit &rArr; uart_hw_deinit &rArr; hal_clk_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_deinit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unregister (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_uart_init
</UL>

<P><STRONG><a name="[3b5]"></a>hal_uart_init</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, uart.o(i.hal_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = hal_uart_init &rArr; uart_hw_init &rArr; uart_hw_deinit &rArr; hal_clk_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_register (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf_init
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_uart_init
</UL>

<P><STRONG><a name="[160]"></a>hal_uart_send_buff</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart.o(i.hal_uart_send_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_uart_send_buff &rArr; txmit_buf_use_tx_buf &rArr; hal_pwrmgr_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txmit_buf_use_tx_buf
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txmit_buf_polling
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_putc
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc (via Veneer)
</UL>

<P><STRONG><a name="[44c]"></a>l2capAllocChannel</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, l2cap_util.o(i.l2capAllocChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = l2capAllocChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendReq
</UL>

<P><STRONG><a name="[90]"></a>l2capBuildParamUpdateReq</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, l2cap_util.o(i.l2capBuildParamUpdateReq))
<BR>[Address Reference Count : 1]<UL><LI> l2cap_if.o(i.L2CAP_ConnParamUpdateReq)
</UL>
<P><STRONG><a name="[2c5]"></a>l2capEncapSendData</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, l2cap_util.o(i.l2capEncapSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_adjust_header (via Veneer)
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capPktToSegmentBuff
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSegmentBuffToLinkLayer (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SendData
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendCmd
</UL>

<P><STRONG><a name="[443]"></a>l2capFindLocalId</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, l2cap_util.o(i.l2capFindLocalId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = l2capFindLocalId
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRsp
</UL>

<P><STRONG><a name="[447]"></a>l2capFreeChannel</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, l2cap_util.o(i.l2capFreeChannel))
<BR><BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRsp
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendReq
</UL>

<P><STRONG><a name="[44b]"></a>l2capHandleRxError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, l2cap_util.o(i.l2capHandleRxError))
<BR><BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessSignal
</UL>

<P><STRONG><a name="[440]"></a>l2capNotifyData</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, l2cap_util.o(i.l2capNotifyData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = l2capNotifyData
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRxData
</UL>

<P><STRONG><a name="[43f]"></a>l2capNotifySignal</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, l2cap_util.o(i.l2capNotifySignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = l2capNotifySignal
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessSignal
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRsp
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capHandleTimerCB
</UL>

<P><STRONG><a name="[444]"></a>l2capParseCmdReject</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, l2cap_util.o(i.l2capParseCmdReject))
<BR><BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRsp
</UL>

<P><STRONG><a name="[441]"></a>l2capParsePacket</STRONG> (Thumb, 406 bytes, Stack size 24 bytes, l2cap_util.o(i.l2capParsePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = l2capParsePacket &rArr; L2CAP_ReassemblePkt_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_bm_alloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_adjust_header (via Veneer)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ReassemblePkt_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRxData
</UL>

<P><STRONG><a name="[445]"></a>l2capParseParamUpdateRsp</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, l2cap_util.o(i.l2capParseParamUpdateRsp))
<BR><BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRsp
</UL>

<P><STRONG><a name="[449]"></a>l2capParseSignalHdr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, l2cap_util.o(i.l2capParseSignalHdr))
<BR><BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessSignal
</UL>

<P><STRONG><a name="[43e]"></a>l2capPktToSegmentBuff</STRONG> (Thumb, 252 bytes, Stack size 72 bytes, l2cap_util.o(i.l2capPktToSegmentBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_free (via Veneer)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Fragment_bm_alloc
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Fragment_SendDataPkt (via Veneer)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_GetCurrentMTUSize
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capEncapSendData
</UL>

<P><STRONG><a name="[2be]"></a>l2capSarBufReset</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, l2cap_util.o(i.l2capSarBufReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = l2capSarBufReset
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Init
</UL>

<P><STRONG><a name="[2b6]"></a>l2capSendCmd</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, l2cap_util.o(i.l2capSendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_bm_alloc
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_free (via Veneer)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capEncapSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnParamUpdateRsp
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendReq
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_CmdReject
</UL>

<P><STRONG><a name="[2b8]"></a>l2capSendReq</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, l2cap_util.o(i.l2capSendReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = l2capSendReq &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_State
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerStart (via Veneer)
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capFreeChannel
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendCmd
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capAllocChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnParamUpdateReq
</UL>

<P><STRONG><a name="[446]"></a>l2capStopTimer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, l2cap_util.o(i.l2capStopTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = l2capStopTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerStop (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRsp
</UL>

<P><STRONG><a name="[3a8]"></a>light_blink_evt_cfg</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led_light.o(i.light_blink_evt_cfg))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessEvent
</UL>

<P><STRONG><a name="[3a5]"></a>light_blink_porcess_evt</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, led_light.o(i.light_blink_porcess_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = light_blink_porcess_evt &rArr; light_ctrl &rArr; light_reflash &rArr; hal_pwm_ch_start &rArr; hal_pwm_init &rArr; hal_pwrmgr_register
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessEvent
</UL>

<P><STRONG><a name="[3a9]"></a>light_config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, led_light.o(i.light_config))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessEvent
</UL>

<P><STRONG><a name="[44d]"></a>light_ctrl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, led_light.o(i.light_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = light_ctrl &rArr; light_reflash &rArr; hal_pwm_ch_start &rArr; hal_pwm_init &rArr; hal_pwrmgr_register
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_reflash
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_blink_porcess_evt
</UL>

<P><STRONG><a name="[3a7]"></a>light_init</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, led_light.o(i.light_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = light_init &rArr; light_pwm_init &rArr; hal_pwm_module_init &rArr; hal_pwm_stop &rArr; hal_pwrmgr_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pull_set
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_pwm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessEvent
</UL>

<P><STRONG><a name="[44e]"></a>light_pwm_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, led_light.o(i.light_pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = light_pwm_init &rArr; hal_pwm_module_init &rArr; hal_pwm_stop &rArr; hal_pwrmgr_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwm_module_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_init
</UL>

<P><STRONG><a name="[3aa]"></a>light_reflash</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, led_light.o(i.light_reflash))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = light_reflash &rArr; hal_pwm_ch_start &rArr; hal_pwm_init &rArr; hal_pwrmgr_register
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwm_ch_start
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctrl
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessEvent
</UL>

<P><STRONG><a name="[3f2]"></a>linkDB_Add</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, linkdb.o(i.linkDB_Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = linkDB_Add &rArr; reportStatusChange
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reportStatusChange
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnectionCompleteEvt
</UL>

<P><STRONG><a name="[2a7]"></a>linkDB_Authen</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, linkdb.o(i.linkDB_Authen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = linkDB_Authen
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_VerifyReadPermissions
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Notification
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Indication
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_VerifyWritePermissions
</UL>

<P><STRONG><a name="[258]"></a>linkDB_Find</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, linkdb.o(i.linkDB_Find))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_State
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Signable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SendSlaveSecurityRequest
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Bond
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authenticate
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_TerminateLinkReq
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendLinkUpdateEvent
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_VerifyAuthenSig
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Authen
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Remove
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Add
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessDisconnectCompleteEvt
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPairingCompleteCB
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAuthEvent
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapUpdateConnSignCounter
</UL>

<P><STRONG><a name="[3da]"></a>linkDB_FindFirst</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, linkdb.o(i.linkDB_FindFirst))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = linkDB_FindFirst
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnectNext
</UL>

<P><STRONG><a name="[272]"></a>linkDB_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, linkdb.o(i.linkDB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = linkDB_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[276]"></a>linkDB_NumActive</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, linkdb.o(i.linkDB_NumActive))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_NumActiveConnections
</UL>

<P><STRONG><a name="[28b]"></a>linkDB_Register</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, linkdb.o(i.linkDB_Register))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_Init
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_InitClient
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_InitServer
</UL>

<P><STRONG><a name="[3f5]"></a>linkDB_Remove</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, linkdb.o(i.linkDB_Remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = linkDB_Remove &rArr; reportStatusChange
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reportStatusChange
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessDisconnectCompleteEvt
</UL>

<P><STRONG><a name="[2c4]"></a>linkDB_State</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, linkdb.o(i.linkDB_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = linkDB_State
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_HandleConnStatusCB
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SendData
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendReq
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerHandleConnStatusCB
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattClientHandleConnStatusCB
</UL>

<P><STRONG><a name="[458]"></a>ltran_calculate_seq_auth</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.ltran_calculate_seq_auth))
<BR><BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_seg_pdu
</UL>

<P><STRONG><a name="[af]"></a>ltrn_ack_timeout_handler</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.ltrn_ack_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = ltrn_ack_timeout_handler &rArr; ltrn_send_ack &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_primary_unicast_address
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_send_ack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.ltrn_sar_start_ack_timer)
</UL>
<P><STRONG><a name="[456]"></a>ltrn_add_to_reassembled_cache</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, libethermind_mesh_core.lib(i.ltrn_add_to_reassembled_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ltrn_add_to_reassembled_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_incomplete_timeout_handler
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_restart_incomplete_timer
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_seg_pdu
</UL>

<P><STRONG><a name="[453]"></a>ltrn_alloc_replay_cache</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.ltrn_alloc_replay_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ltrn_alloc_replay_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_ltrn_init
</UL>

<P><STRONG><a name="[463]"></a>ltrn_check_if_replayed</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, libethermind_mesh_core.lib(i.ltrn_check_if_replayed))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ltrn_check_if_replayed
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_pkt_first_process
</UL>

<P><STRONG><a name="[372]"></a>ltrn_delete_from_reassembled_cache</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, libethermind_mesh_core.lib(i.ltrn_delete_from_reassembled_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ltrn_delete_from_reassembled_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_provcfg_complete_timeout_handler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_prov_callback
</UL>

<P><STRONG><a name="[373]"></a>ltrn_delete_from_replay_cache</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, libethermind_mesh_core.lib(i.ltrn_delete_from_replay_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ltrn_delete_from_replay_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_provcfg_complete_timeout_handler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_prov_callback
</UL>

<P><STRONG><a name="[455]"></a>ltrn_get_current_sar_ctx</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, libethermind_mesh_core.lib(i.ltrn_get_current_sar_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ltrn_get_current_sar_ctx
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_seg_pdu
</UL>

<P><STRONG><a name="[335]"></a>ltrn_get_sar_ctx_count</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.ltrn_get_sar_ctx_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ltrn_get_sar_ctx_count
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_init_seq_number
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_free_ctx
</UL>

<P><STRONG><a name="[454]"></a>ltrn_handle_seg_pdu</STRONG> (Thumb, 666 bytes, Stack size 96 bytes, libethermind_mesh_core.lib(i.ltrn_handle_seg_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = ltrn_handle_seg_pdu &rArr; ltrn_send_ack &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_primary_unicast_address
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_start_ack_timer
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_search_and_alloc_ctx
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_restart_incomplete_timer
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_free_ctx
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_is_in_reassembled_cache
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_get_current_sar_ctx
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_add_to_reassembled_cache
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_get_address_type
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_send_ack
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltran_calculate_seq_auth
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_pkt_in
</UL>

<P><STRONG><a name="[45d]"></a>ltrn_handle_segment_ack</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.ltrn_handle_segment_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = ltrn_handle_segment_ack &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_transmit_segments
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_search_and_alloc_ctx
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_free_ctx
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_pkt_in
</UL>

<P><STRONG><a name="[ad]"></a>ltrn_handle_segment_ack_timeout_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.ltrn_handle_segment_ack_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = ltrn_handle_segment_ack_timeout_handler &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_transmit_segments
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.ltrn_handle_segment_ack)
</UL>
<P><STRONG><a name="[ae]"></a>ltrn_incomplete_timeout_handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.ltrn_incomplete_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ltrn_incomplete_timeout_handler &rArr; ltrn_sar_free_ctx &rArr; MS_access_cm_set_iv_index &rArr; ms_access_ps_store &rArr; nvsto_write_header &rArr; nvs_write_header &rArr; flash_write_word &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_free_ctx
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_add_to_reassembled_cache
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.ltrn_sar_restart_incomplete_timer)
</UL>
<P><STRONG><a name="[45f]"></a>ltrn_init_replay_cache</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.ltrn_init_replay_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ltrn_init_replay_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_ltrn_init
</UL>

<P><STRONG><a name="[460]"></a>ltrn_init_sar_contexts</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.ltrn_init_sar_contexts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ltrn_init_sar_contexts
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_ltrn_init
</UL>

<P><STRONG><a name="[459]"></a>ltrn_is_in_reassembled_cache</STRONG> (Thumb, 92 bytes, Stack size 36 bytes, libethermind_mesh_core.lib(i.ltrn_is_in_reassembled_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ltrn_is_in_reassembled_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_seg_pdu
</UL>

<P><STRONG><a name="[461]"></a>ltrn_pkt_first_process</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.ltrn_pkt_first_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ltrn_pkt_first_process &rArr; MS_access_is_valid_subscription_address &rArr; ms_search_address
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_update_replay_cache
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_check_if_replayed
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_get_address_type
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_is_valid_subscription_address
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_is_valid_element_address
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_in
</UL>

<P><STRONG><a name="[b2]"></a>ltrn_pkt_in</STRONG> (Thumb, 270 bytes, Stack size 48 bytes, libethermind_mesh_core.lib(i.ltrn_pkt_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = ltrn_pkt_in &rArr; ltrn_handle_seg_pdu &rArr; ltrn_send_ack &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_segment_ack
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_get_address_type
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_is_valid_subscription_address
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_is_valid_element_address
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_is_fixed_group_addr_to_be_processed
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_seg_pdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.ms_ltrn_init)
</UL>
<P><STRONG><a name="[b0]"></a>ltrn_rtx_timeout_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.ltrn_rtx_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = ltrn_rtx_timeout_handler &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_transmit_segments
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.ltrn_sar_transmit_segments)
</UL>
<P><STRONG><a name="[466]"></a>ltrn_sar_alloc_ctx</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ltrn_sar_alloc_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ltrn_sar_alloc_ctx &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_send_seg_pdu
</UL>

<P><STRONG><a name="[457]"></a>ltrn_sar_free_ctx</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.ltrn_sar_free_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ltrn_sar_free_ctx &rArr; MS_access_cm_set_iv_index &rArr; ms_access_ps_store &rArr; nvsto_write_header &rArr; nvs_write_header &rArr; flash_write_word &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_free_mem
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_start_iv_update_timer
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_iv_index
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_get_sar_ctx_count
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_incomplete_timeout_handler
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_transmit_segments
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_restart_incomplete_timer
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_segment_ack
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_seg_pdu
</UL>

<P><STRONG><a name="[45c]"></a>ltrn_sar_restart_incomplete_timer</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ltrn_sar_restart_incomplete_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ltrn_sar_restart_incomplete_timer &rArr; ltrn_sar_free_ctx &rArr; MS_access_cm_set_iv_index &rArr; ms_access_ps_store &rArr; nvsto_write_header &rArr; nvs_write_header &rArr; flash_write_word &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_free_ctx
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_add_to_reassembled_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_seg_pdu
</UL>

<P><STRONG><a name="[45a]"></a>ltrn_sar_search_and_alloc_ctx</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.ltrn_sar_search_and_alloc_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ltrn_sar_search_and_alloc_ctx &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_segment_ack
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_seg_pdu
</UL>

<P><STRONG><a name="[45b]"></a>ltrn_sar_start_ack_timer</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.ltrn_sar_start_ack_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ltrn_sar_start_ack_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_seg_pdu
</UL>

<P><STRONG><a name="[467]"></a>ltrn_sar_transmit_segment</STRONG> (Thumb, 140 bytes, Stack size 56 bytes, libethermind_mesh_core.lib(i.ltrn_sar_transmit_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_send_pdu
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_alloc_seq_num
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_transmit_segments
</UL>

<P><STRONG><a name="[45e]"></a>ltrn_sar_transmit_segments</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.ltrn_sar_transmit_segments))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_transmit_segment
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_free_ctx
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_rtx_timeout_handler
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_send_seg_pdu
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_segment_ack_timeout_handler
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_segment_ack
</UL>

<P><STRONG><a name="[452]"></a>ltrn_send_ack</STRONG> (Thumb, 110 bytes, Stack size 80 bytes, libethermind_mesh_core.lib(i.ltrn_send_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = ltrn_send_ack &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_get_address_type
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_alloc_seq_num
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ltrn_send_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_ack_timeout_handler
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_seg_pdu
</UL>

<P><STRONG><a name="[32d]"></a>ltrn_send_seg_pdu</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.ltrn_send_seg_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_transmit_segments
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_alloc_ctx
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_get_address_type
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ltrn_send_pdu
</UL>

<P><STRONG><a name="[464]"></a>ltrn_update_replay_cache</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, libethermind_mesh_core.lib(i.ltrn_update_replay_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ltrn_update_replay_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_pkt_first_process
</UL>

<P><STRONG><a name="[3b3]"></a>mesh_client_process_gattMsg</STRONG> (Thumb, 702 bytes, Stack size 32 bytes, mesh_clients.o(i.mesh_client_process_gattMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = mesh_client_process_gattMsg &rArr; GATT_DiscAllChars &rArr; gattReadByType &rArr; ATT_ReadByTypeReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_mode_get
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_DiscAllChars
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_DiscAllCharDescs
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessOSALMsg
</UL>

<P><STRONG><a name="[3be]"></a>mesh_prov_notify_data_out</STRONG> (Thumb, 62 bytes, Stack size 272 bytes, mesh_services.o(i.mesh_prov_notify_data_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = mesh_prov_notify_data_out &rArr; GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Notification
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadCharCfg
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_send_pl
</UL>

<P><STRONG><a name="[3bf]"></a>mesh_proxy_notify_data_out</STRONG> (Thumb, 62 bytes, Stack size 272 bytes, mesh_services.o(i.mesh_proxy_notify_data_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = mesh_proxy_notify_data_out &rArr; GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Notification
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadCharCfg
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_send_pl
</UL>

<P><STRONG><a name="[30a]"></a>ms_access_allocate_element</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, libethermind_mesh_core.lib(i.ms_access_allocate_element))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ms_access_allocate_element
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_register_element
</UL>

<P><STRONG><a name="[468]"></a>ms_access_cm_appkey_refresh</STRONG> (Thumb, 126 bytes, Stack size 56 bytes, libethermind_mesh_core.lib(i.ms_access_cm_appkey_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ms_access_cm_appkey_refresh
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_refresh_all_appkeys
</UL>

<P><STRONG><a name="[469]"></a>ms_access_cm_create_keys_from_netkey</STRONG> (Thumb, 184 bytes, Stack size 104 bytes, libethermind_mesh_core.lib(i.ms_access_cm_create_keys_from_netkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = ms_access_cm_create_keys_from_netkey &rArr; ms_stbx_k2 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k3
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k2
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k1
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_s1
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_update_key_refresh_phase
</UL>

<P><STRONG><a name="[46a]"></a>ms_access_cm_init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.ms_access_cm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ms_access_cm_init &rArr; access_ps_init &rArr; nvsto_register
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_ps_init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_init_subnet_table
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_init_dev_key_table
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_init_appkey_table
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_init
</UL>

<P><STRONG><a name="[46b]"></a>ms_access_cm_init_appkey_table</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.ms_access_cm_init_appkey_table))
<BR><BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_init
</UL>

<P><STRONG><a name="[46c]"></a>ms_access_cm_init_dev_key_table</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_access_cm_init_dev_key_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ms_access_cm_init_dev_key_table
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_init
</UL>

<P><STRONG><a name="[2e3]"></a>ms_access_cm_init_subnet_table</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.ms_access_cm_init_subnet_table))
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_reset
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_init
</UL>

<P><STRONG><a name="[46d]"></a>ms_access_cm_refresh_all_appkeys</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_access_cm_refresh_all_appkeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ms_access_cm_refresh_all_appkeys &rArr; ms_access_cm_appkey_refresh
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitarray_get_lowest_bit_set
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_appkey_refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_update_key_refresh_phase
</UL>

<P><STRONG><a name="[2d1]"></a>ms_access_cm_save_netkey_at_offset</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_access_cm_save_netkey_at_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ms_access_cm_save_netkey_at_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_update_netkey
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_update_key_refresh_phase
</UL>

<P><STRONG><a name="[2d2]"></a>ms_access_cm_update_key_refresh_phase</STRONG> (Thumb, 222 bytes, Stack size 88 bytes, libethermind_mesh_core.lib(i.ms_access_cm_update_key_refresh_phase))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = ms_access_cm_update_key_refresh_phase &rArr; ms_access_cm_create_keys_from_netkey &rArr; ms_stbx_k2 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k2
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_save_netkey_at_offset
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_refresh_all_appkeys
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_create_keys_from_netkey
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_key_refresh_phase
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_update_netkey
</UL>

<P><STRONG><a name="[37b]"></a>ms_access_handle_rx_opcode</STRONG> (Thumb, 268 bytes, Stack size 80 bytes, libethermind_mesh_core.lib(i.ms_access_handle_rx_opcode))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ms_access_handle_rx_opcode &rArr; ms_search_address
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_primary_unicast_address
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_search_virtual_address
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_search_address
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitarray_get_bit
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_is_opcode_in_model
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_get_address_type
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_pkt_in
</UL>

<P><STRONG><a name="[325]"></a>ms_access_init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.ms_access_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ms_access_init &rArr; ms_access_ps_load &rArr; nvsto_open &rArr; nvs_open &rArr; NV_Get_Free_Sector &rArr; NV_Read &rArr; hal_flash_read &rArr; spif_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_load
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_init
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_ps_crc_check
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_init_supported_features
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_register
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_init
</UL>

<P><STRONG><a name="[470]"></a>ms_access_init_supported_features</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.ms_access_init_supported_features))
<BR><BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_init
</UL>

<P><STRONG><a name="[46f]"></a>ms_access_is_opcode_in_model</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, libethermind_mesh_core.lib(i.ms_access_is_opcode_in_model))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ms_access_is_opcode_in_model
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_handle_rx_opcode
</UL>

<P><STRONG><a name="[472]"></a>ms_access_ps_load</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.ms_access_ps_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ms_access_ps_load &rArr; nvsto_open &rArr; nvs_open &rArr; NV_Get_Free_Sector &rArr; NV_Read &rArr; hal_flash_read &rArr; spif_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_seek
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_open
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_close
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_init
</UL>

<P><STRONG><a name="[2cb]"></a>ms_access_ps_store</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.ms_access_ps_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ms_access_ps_store &rArr; nvsto_write_header &rArr; nvs_write_header &rArr; flash_write_word &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_scan_pl
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_write_header
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_seek
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_open
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_erase
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_close
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_delete_device_key
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_features_field
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_iv_update_timeout_handler
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_ps_store_all_record
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_search_and_add_virtual_address
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_search_and_add_address
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_update_key_refresh_phase
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_unbind_model_app
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_update_delete_appkey
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_transmit_state
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_prov_data_provsioner
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_model_publication
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_device_key
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_appkey
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_bind_model_app
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_server_filter_op
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_iv_index
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_alloc_seq_num
</UL>

<P><STRONG><a name="[30c]"></a>ms_access_search_and_allocate_model</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, libethermind_mesh_core.lib(i.ms_access_search_and_allocate_model))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ms_access_search_and_allocate_model
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_register_model
</UL>

<P><STRONG><a name="[321]"></a>ms_brr_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.ms_brr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ms_brr_init &rArr; ms_internal_verificaiton_check &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_internal_verificaiton_check
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_init
</UL>

<P><STRONG><a name="[328]"></a>ms_common_init_transition_timer</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.ms_common_init_transition_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ms_common_init_transition_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_init
</UL>

<P><STRONG><a name="[2f2]"></a>ms_delete_address</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_delete_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ms_delete_address
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_model_publication
</UL>

<P><STRONG><a name="[2f8]"></a>ms_delete_appkey</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.ms_delete_appkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ms_delete_appkey &rArr; bitarray_reset_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitarray_reset_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_update_delete_appkey
</UL>

<P><STRONG><a name="[326]"></a>ms_fsm_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.ms_fsm_init))
<BR><BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_init
</UL>

<P><STRONG><a name="[476]"></a>ms_fsm_post_event</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.ms_fsm_post_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ms_fsm_post_event &rArr; EM_debug_printf &rArr; vprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_debug_printf
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_fsm_post_event
</UL>

<P><STRONG><a name="[477]"></a>ms_fsm_register_module</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_fsm_register_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ms_fsm_register_module &rArr; EM_debug_printf &rArr; vprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_debug_printf
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_fsm_register
</UL>

<P><STRONG><a name="[2fb]"></a>ms_get_address</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, libethermind_mesh_core.lib(i.ms_get_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ms_get_address
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_get_publish_addr
</UL>

<P><STRONG><a name="[475]"></a>ms_internal_verificaiton_check</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.ms_internal_verificaiton_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ms_internal_verificaiton_check &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_prov_init
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_net_init
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_ltrn_init
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_brr_init
</UL>

<P><STRONG><a name="[323]"></a>ms_ltrn_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.ms_ltrn_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ms_ltrn_init &rArr; ms_internal_verificaiton_check &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_init_sar_contexts
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_init_replay_cache
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_alloc_replay_cache
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_register
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_internal_verificaiton_check
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_init
</UL>

<P><STRONG><a name="[322]"></a>ms_net_init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.ms_net_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ms_net_init &rArr; net_tx_queue_init &rArr; EM_stop_timer &rArr; timer_del_entity &rArr; EM_free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tx_queue_init
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_init
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init_cache
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_register_beacon_handler
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_internal_verificaiton_check
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_init
</UL>

<P><STRONG><a name="[33b]"></a>ms_net_netkey_update</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.ms_net_netkey_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1864<LI>Call Chain = ms_net_netkey_update &rArr; MS_config_client_send_reliable_pdu &rArr; MS_access_reliable_publish &rArr; MS_access_publish_ex &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_config_client_send_reliable_pdu
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_update_netkey
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_config_client_set_publish_address
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_ps_store_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_key_refresh
</UL>

<P><STRONG><a name="[98]"></a>ms_prov_beacon_interleave</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.ms_prov_beacon_interleave))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = ms_prov_beacon_interleave &rArr; MS_brr_bcast_unprovisioned_beacon &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_bcast_unprovisioned_beacon
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_bcast_end
</UL>
<BR>[Address Reference Count : 2]<UL><LI> libethermind_mesh_core.lib(i.MS_prov_setup)
<LI> libethermind_mesh_core.lib(i.ms_prov_beacon_interleave)
</UL>
<P><STRONG><a name="[327]"></a>ms_prov_init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.ms_prov_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ms_prov_init &rArr; prov_fsm_register &rArr; ms_fsm_register_module &rArr; EM_debug_printf &rArr; vprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_fsm_register
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_free_context
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_register_beacon_handler
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_register
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_internal_verificaiton_check
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_init
</UL>

<P><STRONG><a name="[2fd]"></a>ms_search_address</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, libethermind_mesh_core.lib(i.ms_search_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ms_search_address
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_handle_rx_opcode
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_is_valid_subscription_address
</UL>

<P><STRONG><a name="[2f0]"></a>ms_search_and_add_address</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.ms_search_and_add_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ms_search_and_add_address &rArr; ms_access_ps_store &rArr; nvsto_write_header &rArr; nvs_write_header &rArr; flash_write_word &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitarray_get_bit
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_model_publication
</UL>

<P><STRONG><a name="[2f1]"></a>ms_search_and_add_virtual_address</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.ms_search_and_add_virtual_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = ms_search_and_add_virtual_address &rArr; ms_stbx_va &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_va
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_model_publication
</UL>

<P><STRONG><a name="[2fe]"></a>ms_search_virtual_address</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, libethermind_mesh_core.lib(i.ms_search_virtual_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ms_search_virtual_address
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_handle_rx_opcode
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_is_valid_subscription_address
</UL>

<P><STRONG><a name="[2df]"></a>ms_stbx_k1</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, libethermind_mesh_core.lib(i.ms_stbx_k1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ms_stbx_k1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_cmac
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_generate_authkeys
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_calc_confirm
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_create_keys_from_netkey
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_lookup_network_id
</UL>

<P><STRONG><a name="[2e1]"></a>ms_stbx_k2</STRONG> (Thumb, 218 bytes, Stack size 264 bytes, libethermind_mesh_core.lib(i.ms_stbx_k2))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = ms_stbx_k2 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_cmac
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_s1
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_update_key_refresh_phase
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_create_keys_from_netkey
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_lookup_nid
</UL>

<P><STRONG><a name="[2dd]"></a>ms_stbx_k3</STRONG> (Thumb, 86 bytes, Stack size 88 bytes, libethermind_mesh_core.lib(i.ms_stbx_k3))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ms_stbx_k3 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_cmac
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_s1
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_create_keys_from_netkey
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_lookup_network_id
</UL>

<P><STRONG><a name="[2ce]"></a>ms_stbx_k4</STRONG> (Thumb, 84 bytes, Stack size 88 bytes, libethermind_mesh_core.lib(i.ms_stbx_k4))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ms_stbx_k4 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_cmac
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_s1
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_update_delete_appkey
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_appkey
</UL>

<P><STRONG><a name="[2de]"></a>ms_stbx_s1</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.ms_stbx_s1))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_cmac
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_generate_authkeys
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_calc_confirm
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_va
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k4
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k3
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k2
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_create_keys_from_netkey
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_lookup_network_id
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_bcast_unprovisioned_beacon
</UL>

<P><STRONG><a name="[482]"></a>ms_stbx_va</STRONG> (Thumb, 70 bytes, Stack size 64 bytes, libethermind_mesh_core.lib(i.ms_stbx_va))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ms_stbx_va &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_cmac
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_s1
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_search_and_add_virtual_address
</UL>

<P><STRONG><a name="[324]"></a>ms_trn_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.ms_trn_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ms_trn_init
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ltrn_register
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_init
</UL>

<P><STRONG><a name="[48c]"></a>net_add_to_cache</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, libethermind_mesh_core.lib(i.net_add_to_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = net_add_to_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_in
</UL>

<P><STRONG><a name="[485]"></a>net_create_pecb_input</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.net_create_pecb_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_create_pecb_input
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_send
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_decode_frame
</UL>

<P><STRONG><a name="[486]"></a>net_decode_frame</STRONG> (Thumb, 320 bytes, Stack size 192 bytes, libethermind_mesh_core.lib(i.net_decode_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = net_decode_frame &rArr; MS_access_cm_lookup_nid &rArr; ms_stbx_k2 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_ccm_decrypt
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_is_in_cache
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_lookup_nid
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_obfuscate
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_create_pecb_input
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_iv_index_by_ivi
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_in
</UL>

<P><STRONG><a name="[371]"></a>net_delete_from_cache</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, libethermind_mesh_core.lib(i.net_delete_from_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = net_delete_from_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_provcfg_complete_timeout_handler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_prov_callback
</UL>

<P><STRONG><a name="[b3]"></a>net_handle_secure_beacon</STRONG> (Thumb, 152 bytes, Stack size 80 bytes, libethermind_mesh_core.lib(i.net_handle_secure_beacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = net_handle_secure_beacon &rArr; MS_access_cm_set_key_refresh_phase &rArr; ms_access_cm_update_key_refresh_phase &rArr; ms_access_cm_create_keys_from_netkey &rArr; ms_stbx_k2 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_cmac
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_key_refresh_phase
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_iv_update_rcv_pro
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_lookup_network_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.ms_net_init)
</UL>
<P><STRONG><a name="[47b]"></a>net_init_cache</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.net_init_cache))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_net_init
</UL>

<P><STRONG><a name="[489]"></a>net_is_in_cache</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, libethermind_mesh_core.lib(i.net_is_in_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = net_is_in_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_decode_frame
</UL>

<P><STRONG><a name="[488]"></a>net_obfuscate</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.net_obfuscate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_obfuscate &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_send
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_decode_frame
</UL>

<P><STRONG><a name="[48a]"></a>net_pkt_in</STRONG> (Thumb, 300 bytes, Stack size 96 bytes, libethermind_mesh_core.lib(i.net_pkt_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = net_pkt_in &rArr; net_decode_frame &rArr; MS_access_cm_lookup_nid &rArr; ms_stbx_k2 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_features_field
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_proxy_fetch_state
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_recv
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_process_first_pkt
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_send
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_add_to_cache
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_find_master_subnet
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_decode_frame
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_get_address_type
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_pkt_first_process
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_gatt_recv_cb
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_adv_recv_cb
</UL>

<P><STRONG><a name="[340]"></a>net_pkt_send</STRONG> (Thumb, 420 bytes, Stack size 240 bytes, libethermind_mesh_core.lib(i.net_pkt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_primary_unicast_address
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_queue_depth_check
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_ccm_encrypt
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_subnet_privacy_key
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_subnet_nid
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_subnet_encryption_key
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tx_enqueue
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_obfuscate
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_create_pecb_input
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_iv_index
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_in
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_send_pdu
</UL>

<P><STRONG><a name="[49b]"></a>net_proxy_filter_check_forwarding</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.net_proxy_filter_check_forwarding))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_proxy_filter_check_forwarding
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_send
</UL>

<P><STRONG><a name="[491]"></a>net_proxy_iface_down</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.net_proxy_iface_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_proxy_iface_down
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_gatt_recv_cb
</UL>

<P><STRONG><a name="[499]"></a>net_proxy_iface_up</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.net_proxy_iface_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_proxy_iface_up
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_gatt_recv_cb
</UL>

<P><STRONG><a name="[47d]"></a>net_proxy_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.net_proxy_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_proxy_init
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_net_init
</UL>

<P><STRONG><a name="[48b]"></a>net_proxy_process_first_pkt</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.net_proxy_process_first_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = net_proxy_process_first_pkt &rArr; net_proxy_server_filter_op &rArr; ms_access_ps_store &rArr; nvsto_write_header &rArr; nvs_write_header &rArr; flash_write_word &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_server_filter_op
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_in
</UL>

<P><STRONG><a name="[48d]"></a>net_proxy_recv</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.net_proxy_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = net_proxy_recv &rArr; net_proxy_send_filter_status &rArr; net_proxy_send &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_server_set_filter
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_server_filter_op
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_send_filter_status
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_in
</UL>

<P><STRONG><a name="[495]"></a>net_proxy_send</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.net_proxy_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = net_proxy_send &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_primary_unicast_address
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_send_pdu
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_alloc_seq_num
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_send_filter_status
</UL>

<P><STRONG><a name="[494]"></a>net_proxy_send_filter_status</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.net_proxy_send_filter_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = net_proxy_send_filter_status &rArr; net_proxy_send &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_send
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_recv
</UL>

<P><STRONG><a name="[492]"></a>net_proxy_server_filter_op</STRONG> (Thumb, 418 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.net_proxy_server_filter_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = net_proxy_server_filter_op &rArr; ms_access_ps_store &rArr; nvsto_write_header &rArr; nvs_write_header &rArr; flash_write_word &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_recv
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_process_first_pkt
</UL>

<P><STRONG><a name="[493]"></a>net_proxy_server_set_filter</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.net_proxy_server_set_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_proxy_server_set_filter
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_recv
</UL>

<P><STRONG><a name="[496]"></a>net_trigger_tx</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.net_trigger_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = net_trigger_tx &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_send
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tx_timeout_handler
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tx_enqueue
</UL>

<P><STRONG><a name="[490]"></a>net_tx_enqueue</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.net_tx_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = net_tx_enqueue &rArr; net_trigger_tx &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_alloc_mem
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_transmit_state
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_trigger_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_send
</UL>

<P><STRONG><a name="[47c]"></a>net_tx_queue_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.net_tx_queue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = net_tx_queue_init &rArr; EM_stop_timer &rArr; timer_del_entity &rArr; EM_free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_net_init
</UL>

<P><STRONG><a name="[b8]"></a>net_tx_timeout_handler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.net_tx_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = net_tx_timeout_handler &rArr; net_trigger_tx &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_free_mem
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_trigger_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.net_trigger_tx)
</UL>
<P><STRONG><a name="[b9]"></a>netif_adv_recv_cb</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.netif_adv_recv_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = netif_adv_recv_cb &rArr; net_pkt_in &rArr; net_decode_frame &rArr; MS_access_cm_lookup_nid &rArr; ms_stbx_k2 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.netif_init)
</UL>
<P><STRONG><a name="[ba]"></a>netif_gatt_recv_cb</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.netif_gatt_recv_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = netif_gatt_recv_cb &rArr; net_pkt_in &rArr; net_decode_frame &rArr; MS_access_cm_lookup_nid &rArr; ms_stbx_k2 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_proxy_server_adv_stop
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_iface_up
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_iface_down
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.netif_init)
</UL>
<P><STRONG><a name="[47e]"></a>netif_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.netif_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netif_init
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset (via Veneer)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_register
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_net_init
</UL>

<P><STRONG><a name="[497]"></a>netif_send</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, libethermind_mesh_core.lib(i.netif_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = netif_send &rArr; MS_brr_send_pdu
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_filter_check_forwarding
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_send_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_trigger_tx
</UL>

<P><STRONG><a name="[49c]"></a>nvs_close</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, libethermind_utils.lib(i.nvs_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = nvs_close
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_close
</UL>

<P><STRONG><a name="[49e]"></a>nvs_erase</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, libethermind_utils.lib(i.nvs_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nvs_erase &rArr; hal_flash_erase_sector &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase_sector (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_erase
</UL>

<P><STRONG><a name="[49f]"></a>nvs_init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, libethermind_utils.lib(i.nvs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nvs_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_init
</UL>

<P><STRONG><a name="[4a0]"></a>nvs_open</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, libethermind_utils.lib(i.nvs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nvs_open &rArr; NV_Get_Free_Sector &rArr; NV_Read &rArr; hal_flash_read &rArr; spif_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_Get_Free_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_open
</UL>

<P><STRONG><a name="[4a1]"></a>nvs_read</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, libethermind_utils.lib(i.nvs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nvs_read &rArr; NV_Read &rArr; hal_flash_read &rArr; spif_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_read
</UL>

<P><STRONG><a name="[4a2]"></a>nvs_read_crc16</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, libethermind_utils.lib(i.nvs_read_crc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nvs_read_crc16 &rArr; hal_flash_read &rArr; spif_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_read_crc16
</UL>

<P><STRONG><a name="[49d]"></a>nvs_seek</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, libethermind_utils.lib(i.nvs_seek))
<BR><BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_close
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_seek
</UL>

<P><STRONG><a name="[4a3]"></a>nvs_write</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, libethermind_utils.lib(i.nvs_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = nvs_write &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write (via Veneer)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_write
</UL>

<P><STRONG><a name="[4a4]"></a>nvs_write_header</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, libethermind_utils.lib(i.nvs_write_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = nvs_write_header &rArr; flash_write_word &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_word (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_write_header
</UL>

<P><STRONG><a name="[302]"></a>nvsto_close</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, libethermind_utils.lib(i.nvsto_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nvsto_close &rArr; nvs_close
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_close
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_load
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_ps_crc_check
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
</UL>

<P><STRONG><a name="[473]"></a>nvsto_erase</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, libethermind_utils.lib(i.nvsto_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nvsto_erase &rArr; nvs_erase &rArr; hal_flash_erase_sector &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
</UL>

<P><STRONG><a name="[39c]"></a>nvsto_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, libethermind_utils.lib(i.nvsto_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nvsto_init &rArr; nvs_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_init
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[300]"></a>nvsto_open</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, libethermind_utils.lib(i.nvsto_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = nvsto_open &rArr; nvs_open &rArr; NV_Get_Free_Sector &rArr; NV_Read &rArr; hal_flash_read &rArr; spif_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_open
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_load
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_ps_crc_check
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
</UL>

<P><STRONG><a name="[479]"></a>nvsto_read</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, libethermind_utils.lib(i.nvsto_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nvsto_read &rArr; nvs_read &rArr; NV_Read &rArr; hal_flash_read &rArr; spif_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_read
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_load_virtual_addresses
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_load_tx_states_and_features
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_load_subnets
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_load_seq_number
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_load_proxy_filter_address
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_load_provisioner_address
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_load_non_virtual_addresses
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_load_models
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_load_elements
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_load_element_addresses
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_load_dev_key
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_load_appkeys
</UL>

<P><STRONG><a name="[301]"></a>nvsto_read_crc16</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, libethermind_utils.lib(i.nvsto_read_crc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nvsto_read_crc16 &rArr; nvs_read_crc16 &rArr; hal_flash_read &rArr; spif_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_read_crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_ps_crc_check
</UL>

<P><STRONG><a name="[37d]"></a>nvsto_register</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, libethermind_utils.lib(i.nvsto_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nvsto_register
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_ps_init
</UL>

<P><STRONG><a name="[303]"></a>nvsto_seek</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, libethermind_utils.lib(i.nvsto_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nvsto_seek
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_load
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_ps_crc_check
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
</UL>

<P><STRONG><a name="[483]"></a>nvsto_write</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, libethermind_utils.lib(i.nvsto_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = nvsto_write &rArr; nvs_write &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_write
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_virtual_addresses
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_tx_states_and_features
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_subnets
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_seq_number
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_proxy_filter_address
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_provisioner_address
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_non_virtual_addresses
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_models
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_elements
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_element_addresses
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_dev_key
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_appkeys
</UL>

<P><STRONG><a name="[474]"></a>nvsto_write_header</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, libethermind_utils.lib(i.nvsto_write_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = nvsto_write_header &rArr; nvs_write_header &rArr; flash_write_word &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_write_header
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
</UL>

<P><STRONG><a name="[244]"></a>osal_snv_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, osal_snv.o(i.osal_snv_read))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrGetStateFlags
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrGetPublicAddr
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrBondReq
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
</UL>

<P><STRONG><a name="[3d6]"></a>phyplus_ecdh_generate_secret</STRONG> (Thumb, 60 bytes, Stack size 112 bytes, cry.o(i.phyplus_ecdh_generate_secret))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = phyplus_ecdh_generate_secret &rArr; cry_reverse_bytestream_endianness
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_ecdh_shared_secret (via Veneer)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_reverse_bytestream_endianness
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_ecdh_generate_secret
</UL>

<P><STRONG><a name="[3d7]"></a>phyplus_ecdh_get_public_key</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cry.o(i.phyplus_ecdh_get_public_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = phyplus_ecdh_get_public_key &rArr; cry_reverse_bytestream_endianness
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_reverse_bytestream_endianness
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_ecdh_get_public_key
</UL>

<P><STRONG><a name="[3d8]"></a>phyplus_ecdh_init</STRONG> (Thumb, 88 bytes, Stack size 112 bytes, cry.o(i.phyplus_ecdh_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = phyplus_ecdh_init
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_ecdh_keygen (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_ecdh_init
</UL>

<P><STRONG><a name="[d6]"></a>prov_access_state_handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.prov_access_state_handler))
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>prov_adv_recv_cb</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.prov_adv_recv_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = prov_adv_recv_cb &rArr; prov_handle_adv_message &rArr; prov_handle_ack &rArr; prov_procedure_complete &rArr; prov_send_failure &rArr; prov_framensend_pdu &rArr; prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_adv_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.ms_prov_init)
</UL>
<P><STRONG><a name="[342]"></a>prov_alloc_context</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.prov_alloc_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prov_alloc_context
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_bind
</UL>

<P><STRONG><a name="[4a8]"></a>prov_calc_confirm</STRONG> (Thumb, 250 bytes, Stack size 256 bytes, libethermind_mesh_core.lib(i.prov_calc_confirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = prov_calc_confirm &rArr; ms_stbx_k1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_cmac
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k1
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_s1
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_random_handler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_confirmation_handler
</UL>

<P><STRONG><a name="[bf]"></a>prov_complete_timeout_handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.prov_complete_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = prov_complete_timeout_handler &rArr; prov_procedure_complete &rArr; prov_send_failure &rArr; prov_framensend_pdu &rArr; prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.se_prov_complete_handler)
</UL>
<P><STRONG><a name="[4aa]"></a>prov_findcontext_by_brr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.prov_findcontext_by_brr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prov_findcontext_by_brr
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_gatt_message
</UL>

<P><STRONG><a name="[349]"></a>prov_findcontext_by_handle</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.prov_findcontext_by_handle))
<BR><BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_set_authval
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_send_pdu
</UL>

<P><STRONG><a name="[4b5]"></a>prov_findcontext_by_linkid</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.prov_findcontext_by_linkid))
<BR><BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_adv_message
</UL>

<P><STRONG><a name="[4ab]"></a>prov_findcontext_by_uuid</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.prov_findcontext_by_uuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prov_findcontext_by_uuid
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_adv_message
</UL>

<P><STRONG><a name="[4ac]"></a>prov_framensend_ack</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, libethermind_mesh_core.lib(i.prov_framensend_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = prov_framensend_ack &rArr; MS_brr_send_pdu
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_send_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_adv_message
</UL>

<P><STRONG><a name="[4ad]"></a>prov_framensend_pb_adv_pdu</STRONG> (Thumb, 264 bytes, Stack size 88 bytes, libethermind_mesh_core.lib(i.prov_framensend_pb_adv_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_generate_fcs
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_send_pdu
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_restart_proc_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pdu
</UL>

<P><STRONG><a name="[4b0]"></a>prov_framensend_pb_gatt_pdu</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.prov_framensend_pb_gatt_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prov_framensend_pb_gatt_pdu &rArr; MS_brr_send_pdu
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_send_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pdu
</UL>

<P><STRONG><a name="[4b1]"></a>prov_framensend_pdu</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.prov_framensend_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = prov_framensend_pdu &rArr; prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pb_gatt_pdu
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pb_adv_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_start_handler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_random_handler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_pubkey_handler
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_invite_handler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_inputcom_handler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_data_handler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_confirmation_handler
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_complete_handler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_capabilities_handler
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send_failure
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_pdu_ack_timeout_handler
</UL>

<P><STRONG><a name="[343]"></a>prov_free_context</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.prov_free_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prov_free_context
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_bind
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_prov_init
</UL>

<P><STRONG><a name="[346]"></a>prov_fsm_post_event</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.prov_fsm_post_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prov_fsm_post_event &rArr; ms_fsm_post_event &rArr; EM_debug_printf &rArr; vprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_fsm_post_event
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_send_pdu
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_bind
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_ack
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_random_handler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_pubkey_handler
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_invite_handler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_inputcom_handler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_data_handler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_confirmation_handler
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_process_event
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_pdu
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_adv_message
</UL>

<P><STRONG><a name="[481]"></a>prov_fsm_register</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.prov_fsm_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prov_fsm_register &rArr; ms_fsm_register_module &rArr; EM_debug_printf &rArr; vprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_fsm_register_module
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_prov_init
</UL>

<P><STRONG><a name="[b5]"></a>prov_gatt_recv_cb</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.prov_gatt_recv_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prov_gatt_recv_cb &rArr; prov_handle_gatt_message &rArr; prov_handle_pdu &rArr; prov_fsm_post_event &rArr; ms_fsm_post_event &rArr; EM_debug_printf &rArr; vprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_gatt_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.ms_prov_init)
</UL>
<P><STRONG><a name="[4b3]"></a>prov_generate_authkeys</STRONG> (Thumb, 156 bytes, Stack size 120 bytes, libethermind_mesh_core.lib(i.prov_generate_authkeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = prov_generate_authkeys &rArr; ms_stbx_k1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k1
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_s1
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_random_handler
</UL>

<P><STRONG><a name="[4ae]"></a>prov_generate_fcs</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, libethermind_mesh_core.lib(i.prov_generate_fcs))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prov_generate_fcs
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pb_adv_pdu
</UL>

<P><STRONG><a name="[4b4]"></a>prov_handle_ack</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.prov_handle_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = prov_handle_ack &rArr; prov_procedure_complete &rArr; prov_send_failure &rArr; prov_framensend_pdu &rArr; prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_fsm_post_event
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_adv_message
</UL>

<P><STRONG><a name="[4a7]"></a>prov_handle_adv_message</STRONG> (Thumb, 676 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.prov_handle_adv_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = prov_handle_adv_message &rArr; prov_handle_ack &rArr; prov_procedure_complete &rArr; prov_send_failure &rArr; prov_framensend_pdu &rArr; prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_free_mem
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_alloc_mem
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_ack
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_ack
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_findcontext_by_uuid
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_findcontext_by_linkid
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_fsm_post_event
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_stop_interleave_timer
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_bcast_end
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_restart_proc_timer
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_link_accept
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_adv_recv_cb
</UL>

<P><STRONG><a name="[4b2]"></a>prov_handle_gatt_message</STRONG> (Thumb, 56 bytes, Stack size 96 bytes, libethermind_mesh_core.lib(i.prov_handle_gatt_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prov_handle_gatt_message &rArr; prov_handle_pdu &rArr; prov_fsm_post_event &rArr; ms_fsm_post_event &rArr; EM_debug_printf &rArr; vprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_findcontext_by_brr
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_gatt_recv_cb
</UL>

<P><STRONG><a name="[4b6]"></a>prov_handle_pdu</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.prov_handle_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = prov_handle_pdu &rArr; prov_fsm_post_event &rArr; ms_fsm_post_event &rArr; EM_debug_printf &rArr; vprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_free_mem
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_fsm_post_event
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_gatt_message
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_adv_message
</UL>

<P><STRONG><a name="[b6]"></a>prov_handle_unprovisioned_beacon</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.prov_handle_unprovisioned_beacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prov_handle_unprovisioned_beacon &rArr; prov_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.ms_prov_init)
</UL>
<P><STRONG><a name="[4b7]"></a>prov_link_accept</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.prov_link_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prov_link_accept &rArr; MS_brr_send_pdu
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_send_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_adv_message
</UL>

<P><STRONG><a name="[bd]"></a>prov_link_ack_timeout_handler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.prov_link_ack_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = prov_link_ack_timeout_handler &rArr; prov_procedure_complete &rArr; prov_send_failure &rArr; prov_framensend_pdu &rArr; prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_link_open
</UL>
<BR>[Address Reference Count : 2]<UL><LI> libethermind_mesh_core.lib(i.prov_handle_adv_message)
<LI> libethermind_mesh_core.lib(i.prov_link_open)
</UL>
<P><STRONG><a name="[4b9]"></a>prov_link_close</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.prov_link_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = prov_link_close &rArr; MS_brr_send_pdu
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_send_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete
</UL>

<P><STRONG><a name="[345]"></a>prov_link_open</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, libethermind_mesh_core.lib(i.prov_link_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = prov_link_open &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_send_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_bind
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_link_ack_timeout_handler
</UL>

<P><STRONG><a name="[4b8]"></a>prov_notify</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.prov_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prov_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_unprovisioned_beacon
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_random_handler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_pubkey_handler
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_invite_handler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_data_handler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_capabilities_handler
</UL>

<P><STRONG><a name="[bc]"></a>prov_pdu_ack_timeout_handler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.prov_pdu_ack_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = prov_pdu_ack_timeout_handler &rArr; prov_procedure_complete &rArr; prov_send_failure &rArr; prov_framensend_pdu &rArr; prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.prov_framensend_pb_adv_pdu)
</UL>
<P><STRONG><a name="[be]"></a>prov_proc_timeout_handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.prov_proc_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = prov_proc_timeout_handler &rArr; prov_procedure_complete &rArr; prov_send_failure &rArr; prov_framensend_pdu &rArr; prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.prov_restart_proc_timer)
</UL>
<P><STRONG><a name="[4a9]"></a>prov_procedure_complete</STRONG> (Thumb, 172 bytes, Stack size 424 bytes, libethermind_mesh_core.lib(i.prov_procedure_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = prov_procedure_complete &rArr; prov_send_failure &rArr; prov_framensend_pdu &rArr; prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_notify
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_link_close
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_free_context
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_device_key
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_ack
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_complete_timeout_handler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_start_handler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_random_handler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_pubkey_handler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_error_handler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_data_handler
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_complete_handler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_proc_timeout_handler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_pdu_ack_timeout_handler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_link_ack_timeout_handler
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_adv_message
</UL>

<P><STRONG><a name="[34a]"></a>prov_process_event</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.prov_process_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prov_process_event &rArr; prov_fsm_post_event &rArr; ms_fsm_post_event &rArr; EM_debug_printf &rArr; vprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_fsm_post_event
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_send_pdu
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_pubkey_handler
</UL>

<P><STRONG><a name="[4af]"></a>prov_restart_proc_timer</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.prov_restart_proc_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pb_adv_pdu
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_adv_message
</UL>

<P><STRONG><a name="[4ba]"></a>prov_send_failure</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.prov_send_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = prov_send_failure &rArr; prov_framensend_pdu &rArr; prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete
</UL>

<P><STRONG><a name="[d9]"></a>se_prov_capabilities_handler</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, libethermind_mesh_core.lib(i.se_prov_capabilities_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = se_prov_capabilities_handler &rArr; prov_framensend_pdu &rArr; prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_notify
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>se_prov_complete_handler</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.se_prov_complete_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = se_prov_complete_handler &rArr; prov_procedure_complete &rArr; prov_send_failure &rArr; prov_framensend_pdu &rArr; prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>se_prov_confirmation_handler</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.se_prov_confirmation_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = se_prov_confirmation_handler &rArr; prov_calc_confirm &rArr; ms_stbx_k1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pdu
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_calc_confirm
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_fsm_post_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>se_prov_data_handler</STRONG> (Thumb, 402 bytes, Stack size 152 bytes, libethermind_mesh_core.lib(i.se_prov_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = se_prov_data_handler &rArr; prov_procedure_complete &rArr; prov_send_failure &rArr; prov_framensend_pdu &rArr; prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_scan_pl
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_ccm_encrypt
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_ccm_decrypt
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_notify
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pdu
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_fsm_post_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>se_prov_error_handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.se_prov_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = se_prov_error_handler &rArr; prov_procedure_complete &rArr; prov_send_failure &rArr; prov_framensend_pdu &rArr; prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>se_prov_inputcom_handler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.se_prov_inputcom_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = se_prov_inputcom_handler &rArr; prov_framensend_pdu &rArr; prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pdu
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_fsm_post_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>se_prov_invite_handler</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.se_prov_invite_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = se_prov_invite_handler &rArr; prov_framensend_pdu &rArr; prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_rand_generate
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_notify
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pdu
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_fsm_post_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>se_prov_pubkey_handler</STRONG> (Thumb, 370 bytes, Stack size 96 bytes, libethermind_mesh_core.lib(i.se_prov_pubkey_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = se_prov_pubkey_handler &rArr; prov_procedure_complete &rArr; prov_send_failure &rArr; prov_framensend_pdu &rArr; prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_scan_pl
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_read_static_oob_auth_pl (via Veneer)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_read_device_oob_pubkey_pl (via Veneer)
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_ecdh_generate_secret
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_notify
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pdu
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_process_event
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_fsm_post_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>se_prov_random_handler</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.se_prov_random_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = se_prov_random_handler &rArr; prov_procedure_complete &rArr; prov_send_failure &rArr; prov_framensend_pdu &rArr; prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_scan_pl
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_notify
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_generate_authkeys
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pdu
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_calc_confirm
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_fsm_post_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>se_prov_start_handler</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.se_prov_start_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = se_prov_start_handler &rArr; prov_procedure_complete &rArr; prov_send_failure &rArr; prov_framensend_pdu &rArr; prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.constdata)
</UL>
<P><STRONG><a name="[3f1]"></a>sendEstLinkEvent</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, gap_linkmgr.o(i.sendEstLinkEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sendEstLinkEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessCreateLLConnCmdStatus
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnectionCompleteEvt
</UL>

<P><STRONG><a name="[4c4]"></a>smAuthReqToUint8</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sm_mgr.o(i.smAuthReqToUint8))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildSecurityReq
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildPairingReqRsp
</UL>

<P><STRONG><a name="[4bc]"></a>smEndPairing</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, sm_pairing.o(i.smEndPairing))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = smEndPairing &rArr; gapPairingCompleteCB &rArr; sendAuthEvent &rArr; gapFreeAuthLink
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPairingCompleteCB
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smFreePairingParams
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendFailAndEnd
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smTimedOut
</UL>

<P><STRONG><a name="[363]"></a>smGeneratePairingReqRsp</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, sm_pairing.o(i.smGeneratePairingReqRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = smGeneratePairingReqRsp &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSetPairingReqRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_StartPairing
</UL>

<P><STRONG><a name="[269]"></a>smGenerateRandBuf</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sm_mgr.o(i.smGenerateRandBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smGenerateRandBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_rand (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ConfigDeviceAddr
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_CalcRandomAddr
</UL>

<P><STRONG><a name="[25a]"></a>smProcessPairingReq</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, sm_pairing.o(i.smProcessPairingReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = smProcessPairingReq &rArr; smSendFailAndEnd &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smUint8ToAuthReq
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendFailAndEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authenticate
</UL>

<P><STRONG><a name="[4c0]"></a>smSendFailAndEnd</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sm_pairing.o(i.smSendFailAndEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = smSendFailAndEnd &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessPairingReq
</UL>

<P><STRONG><a name="[282]"></a>smSendSMMsg</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, smp.o(i.smSendSMMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_bm_alloc
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SendData
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_free (via Veneer)
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smStartRspTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SendSlaveSecurityRequest
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGeneratePairingReqRsp
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendFailAndEnd
</UL>

<P><STRONG><a name="[25e]"></a>smStartEncryption</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sm_pairing.o(i.smStartEncryption))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smStartEncryption
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Bond
</UL>

<P><STRONG><a name="[4c1]"></a>smStartRspTimer</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, sm_mgr.o(i.smStartRspTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smStartRspTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerStart (via Veneer)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerUpdate (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
</UL>

<P><STRONG><a name="[4bd]"></a>smStopRspTimer</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sm_mgr.o(i.smStopRspTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smStopRspTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerStop (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smFreePairingParams
</UL>

<P><STRONG><a name="[4c2]"></a>smTimedOut</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sm_pairing.o(i.smTimedOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = smTimedOut &rArr; smEndPairing &rArr; gapPairingCompleteCB &rArr; sendAuthEvent &rArr; gapFreeAuthLink
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smTo_timerCB
</UL>

<P><STRONG><a name="[c3]"></a>smTo_timerCB</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sm_task.o(i.smTo_timerCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = smTo_timerCB &rArr; smTimedOut &rArr; smEndPairing &rArr; gapPairingCompleteCB &rArr; sendAuthEvent &rArr; gapFreeAuthLink
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smTimedOut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_mgr.o(i.smStartRspTimer)
</UL>
<P><STRONG><a name="[281]"></a>smUint8ToAuthReq</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sm_mgr.o(i.smUint8ToAuthReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smUint8ToAuthReq
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SendSlaveSecurityRequest
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessPairingReq
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSetPairingReqRsp
</UL>

<P><STRONG><a name="[35c]"></a>sm_ah</STRONG> (Thumb, 68 bytes, Stack size 64 bytes, sm_mgr.o(i.sm_ah))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sm_ah &rArr; smEncrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_revmemcpy (via Veneer)
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ResolveRandomAddrs
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_CalcRandomAddr
</UL>

<P><STRONG><a name="[c2]"></a>smpBuildPairingFailed</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, smp.o(i.smpBuildPairingFailed))
<BR>[Address Reference Count : 1]<UL><LI> sm_pairing.o(i.smSendFailAndEnd)
</UL>
<P><STRONG><a name="[c0]"></a>smpBuildPairingReq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, smp.o(i.smpBuildPairingReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smpBuildPairingReq &rArr; smpBuildPairingReqRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildPairingReqRsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_pairing.o(i.smGeneratePairingReqRsp)
</UL>
<P><STRONG><a name="[4c3]"></a>smpBuildPairingReqRsp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, smp.o(i.smpBuildPairingReqRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smpBuildPairingReqRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smAuthReqToUint8
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildPairingRsp
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildPairingReq
</UL>

<P><STRONG><a name="[c1]"></a>smpBuildPairingRsp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, smp.o(i.smpBuildPairingRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smpBuildPairingRsp &rArr; smpBuildPairingReqRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildPairingReqRsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_pairing.o(i.smGeneratePairingReqRsp)
</UL>
<P><STRONG><a name="[87]"></a>smpBuildSecurityReq</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, smp.o(i.smpBuildSecurityReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpBuildSecurityReq
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smAuthReqToUint8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap_perilinkmgr.o(i.GAP_SendSlaveSecurityRequest)
</UL>
<P><STRONG><a name="[236]"></a>timer_add_entity</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, em_timer.o(i.timer_add_entity))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer_add_entity &rArr; em_timer_get_ms_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerStart (via Veneer)
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_timer_get_ms_timestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer
</UL>

<P><STRONG><a name="[23b]"></a>timer_del_entity</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, em_timer.o(i.timer_del_entity))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer_del_entity &rArr; EM_free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init_entity
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_free_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeout_handler
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer
</UL>

<P><STRONG><a name="[39b]"></a>timer_em_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, em_timer.o(i.timer_em_init))
<BR><BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[23f]"></a>timer_init_entity</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, em_timer.o(i.timer_init_entity))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_del_entity
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_timer_init
</UL>

<P><STRONG><a name="[238]"></a>timer_search_entity</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, em_timer.o(i.timer_search_entity))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer
</UL>

<P><STRONG><a name="[4c5]"></a>timer_search_entity_timer_id</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, em_timer.o(i.timer_search_entity_timer_id))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeout_handler
</UL>

<P><STRONG><a name="[c4]"></a>timer_timeout_handler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, em_timer.o(i.timer_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer_timeout_handler &rArr; timer_del_entity &rArr; EM_free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_search_entity_timer_id
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_del_entity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> em_timer.o(i.timer_add_entity)
</UL>
<P><STRONG><a name="[4c6]"></a>trn_frame_decrypt_pdu</STRONG> (Thumb, 226 bytes, Stack size 96 bytes, libethermind_mesh_core.lib(i.trn_frame_decrypt_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = trn_frame_decrypt_pdu &rArr; cry_aes_128_ccm_decrypt &rArr; aes_ccm_ad &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_ccm_decrypt
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_lookup_aid
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_iv_index_by_ivi
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_device_key
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_pkt_in
</UL>

<P><STRONG><a name="[351]"></a>trn_frame_secure_pdu</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, libethermind_mesh_core.lib(i.trn_frame_secure_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = trn_frame_secure_pdu &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_ccm_encrypt
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_iv_index
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_send_access_pdu
</UL>

<P><STRONG><a name="[4c7]"></a>trn_handle_heartbeat</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.trn_handle_heartbeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = trn_handle_heartbeat &rArr; trn_start_heartbeat_sub_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_stop_heartbeat_sub_timer
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_start_heartbeat_sub_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_pkt_in
</UL>

<P><STRONG><a name="[b7]"></a>trn_pkt_in</STRONG> (Thumb, 218 bytes, Stack size 488 bytes, libethermind_mesh_core.lib(i.trn_pkt_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = trn_pkt_in &rArr; trn_frame_decrypt_pdu &rArr; cry_aes_128_ccm_decrypt &rArr; aes_ccm_ad &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_heartbeat
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frame_decrypt_pdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.ms_trn_init)
</UL>
<P><STRONG><a name="[4c9]"></a>trn_start_heartbeat_sub_timer</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.trn_start_heartbeat_sub_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = trn_start_heartbeat_sub_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_heartbeat
</UL>

<P><STRONG><a name="[4c8]"></a>trn_stop_heartbeat_sub_timer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.trn_stop_heartbeat_sub_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = trn_stop_heartbeat_sub_timer &rArr; EM_stop_timer &rArr; timer_del_entity &rArr; EM_free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_heartbeat
</UL>

<P><STRONG><a name="[99]"></a>vendormodel_client_cb</STRONG> (Thumb, 162 bytes, Stack size 72 bytes, vendormodel_client.o(i.vendormodel_client_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vendormodel_client_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vendormodel_client.o(i.MS_vendormodel_client_init)
</UL>
<P><STRONG><a name="[44]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(.text)
</UL>
<P><STRONG><a name="[4cc]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[f6]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[104]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4cd]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[4ce]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[4cf]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[4d0]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[4d1]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[64]"></a>hard_fault</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, jump_table.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[24]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>AACI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>CHLCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CLCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>CPU_CLCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FLEXRAY_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>LIN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>MCIA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>MCIB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USBDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USBHC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[36c]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_prov_callback (via Veneer)
</UL>

<P><STRONG><a name="[32a]"></a>strrchr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_fsm_register_module (via Veneer)
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_fsm_post_event (via Veneer)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_init (via Veneer)
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4d2]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ff]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[100]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[101]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[102]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[103]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[14a]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f7]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[4d3]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[4d4]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[4d5]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4d6]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[fd]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4d7]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[4d8]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>hal_UART1_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, uart.o(_section_sram_code_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_UART1_IRQHandler &rArr; irq_rx_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_tx_empty_handler
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_rx_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(i.uart_hw_init)
</UL>
<P><STRONG><a name="[65]"></a>hal_UART0_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, uart.o(_section_sram_code_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_UART0_IRQHandler &rArr; irq_rx_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_tx_empty_handler
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_rx_handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> uart.o(i.uart_hw_init)
<LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[48]"></a>osal_idle_task</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pwrmgr.o(_section_sram_code_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osal_idle_task
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_pwrmgr_powerconserve0 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwrmgr.o(i.hal_pwrmgr_init)
</UL>
<P><STRONG><a name="[10c]"></a>hal_pwrmgr_enter_sleep_rtc_reset</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, pwrmgr.o(_section_sram_code_))
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_sleep_off_mode (via Veneer)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_RTC (via Veneer)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_RAM_retention_clr
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_16MXtal_by_rcTracking
</UL>

<P><STRONG><a name="[110]"></a>L2CAP_Fragment_SendDataPkt</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, l2cap_util.o(_section_sram_code_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = L2CAP_Fragment_SendDataPkt
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_SendDataPkt (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capPktToSegmentBuff (via Veneer)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSegmentBuffToLinkLayer
</UL>

<P><STRONG><a name="[112]"></a>l2capSegmentBuffToLinkLayer</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, l2cap_util.o(_section_sram_code_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = l2capSegmentBuffToLinkLayer &rArr; L2CAP_Fragment_SendDataPkt
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Fragment_SendDataPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capEncapSendData (via Veneer)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capPocessFragmentTxData
</UL>

<P><STRONG><a name="[6f]"></a>l2capPocessFragmentTxData</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, l2cap_util.o(_section_sram_code_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = l2capPocessFragmentTxData &rArr; l2capSegmentBuffToLinkLayer &rArr; L2CAP_Fragment_SendDataPkt
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSegmentBuffToLinkLayer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[113]"></a>HCI_LE_ConnUpdateCmd</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, patch.o(i.HCI_LE_ConnUpdateCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HCI_LE_ConnUpdateCmd &rArr; LL_ConnUpdate1
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandStatusEvent (via Veneer)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnUpdate1
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessL2CAPSignalEvt (via Veneer)
</UL>

<P><STRONG><a name="[114]"></a>LL_ConnUpdate1</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, patch.o(i.LL_ConnUpdate1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_ConnUpdate1
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llEnqueueCtrlPkt (via Veneer)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnActive (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ConnUpdateCmd
</UL>

<P><STRONG><a name="[4f]"></a>LL_CreateConn1</STRONG> (Thumb, 60 bytes, Stack size 72 bytes, patch.o(i.LL_CreateConn1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LL_CreateConn1
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CreateConn0 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.ll_patch_master)
</UL>
<P><STRONG><a name="[6a]"></a>LL_ENC_AES128_Encrypt1</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, patch.o(i.LL_ENC_AES128_Encrypt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ENC_AES128_Encrypt1
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_AES128_Encrypt0 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[51]"></a>LL_ENC_Decrypt1</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, patch.o(i.LL_ENC_Decrypt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_ENC_Decrypt1
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_LoadKey (via Veneer)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_GenerateNonce (via Veneer)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via Veneer)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> patch.o(_section_xip_code_)
<LI> patch.o(i.ll_patch_master)
</UL>
<P><STRONG><a name="[6b]"></a>LL_ENC_Encrypt1</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, patch.o(i.LL_ENC_Encrypt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_ENC_Encrypt1
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_LoadKey (via Veneer)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_GenerateNonce (via Veneer)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[67]"></a>LL_IRQHandler1</STRONG> (Thumb, 350 bytes, Stack size 24 bytes, patch.o(i.LL_IRQHandler1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_IRQHandler1 &rArr; ll_processBasicIRQ_secondaryScanSRX
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_current_fine_time (via Veneer)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_schedule_next_event (via Veneer)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processPrdScanIRQ (via Veneer)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processPrdAdvIRQ (via Veneer)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processExtScanIRQ (via Veneer)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processExtInitIRQ (via Veneer)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processExtAdvIRQ (via Veneer)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ (via Veneer)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_rx_timeout (via Veneer)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_get_tr_mode (via Veneer)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_get_irq_status (via Veneer)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_clr_irq (via Veneer)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_debug_output (via Veneer)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSecScan (via Veneer)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSecInit (via Veneer)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSecAdvEvt (via Veneer)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSecAdvAllow (via Veneer)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_secondaryScanSRX
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_secondaryInitSRX
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_secondaryAdvTRX
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_ScanTRX
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[4b]"></a>LL_SetAdvControl1</STRONG> (Thumb, 446 bytes, Stack size 24 bytes, patch.o(i.LL_SetAdvControl1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_SetAdvControl1
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event (via Veneer)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_debug_output (via Veneer)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupAdv (via Veneer)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_timer (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.ll_patch_master)
</UL>
<P><STRONG><a name="[4a]"></a>LL_SetAdvParam1</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, patch.o(i.LL_SetAdvParam1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_SetAdvParam1
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvParam0 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.ll_patch_master)
</UL>
<P><STRONG><a name="[70]"></a>LL_SetDataLengh1</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, patch.o(i.LL_SetDataLengh1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_SetDataLengh1
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetDataLengh0 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[4e]"></a>LL_SetScanControl1</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, patch.o(i.LL_SetScanControl1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_SetScanControl1
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event (via Veneer)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_rx_timeout (via Veneer)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_debug_output (via Veneer)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_timer (via Veneer)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_evt_schedule (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.ll_patch_master)
</UL>
<P><STRONG><a name="[4d]"></a>LL_SetScanParam1</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, patch.o(i.LL_SetScanParam1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_SetScanParam1
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanParam0 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.ll_patch_master)
</UL>
<P><STRONG><a name="[50]"></a>LL_StartEncrypt1</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, patch.o(i.LL_StartEncrypt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_StartEncrypt1
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llEnqueueCtrlPkt (via Veneer)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_GenerateTrueRandNum (via Veneer)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_GenDeviceSKD (via Veneer)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_GenDeviceIV (via Veneer)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnActive (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.ll_patch_master)
</UL>
<P><STRONG><a name="[75]"></a>LL_set_default_conn_params1</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, patch.o(i.LL_set_default_conn_params1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_set_default_conn_params1
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_set_default_conn_params0 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[43]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_armcm0.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(.text)
</UL>
<P><STRONG><a name="[142]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4d9]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[230]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessOSALMsg (via Veneer)
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessGAPMsg (via Veneer)
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_proxy_data_out_ccd_cb (via Veneer)
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_proxy_data_in_wt_cb (via Veneer)
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_prov_data_out_ccd_cb (via Veneer)
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_prov_data_in_wt_cb (via Veneer)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_alloc_mem (via Veneer)
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_client_process_gattMsg (via Veneer)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_start (via Veneer)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_internal_status (via Veneer)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_group_select (via Veneer)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_demo_reset (via Veneer)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_demo_help (via Veneer)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_core_modelc_config_netkey_update (via Veneer)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_core_modelc_config_key_refresh_phase_set (via Veneer)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_handle_le_disconnection_pl (via Veneer)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_handle_le_connection_pl (via Veneer)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample (via Veneer)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_vendor_model_set (via Veneer)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessEvent (via Veneer)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_app_key (via Veneer)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_queue_depth_check (via Veneer)
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_bcon_send (via Veneer)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_advscan_timeout_handler (via Veneer)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_adv_send (via Veneer)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_recv_advpacket (via Veneer)
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_init_pl (via Veneer)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_disconnect_pl (via Veneer)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_advertise_pl (via Veneer)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_dump_bytes (via Veneer)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_sub_timeout_handler (via Veneer)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dumpConnectionInfo (via Veneer)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_setup_prov (via Veneer)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_set_publish_address (via Veneer)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sample_binding_app_key (via Veneer)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_register_vendor_defined_model_client (via Veneer)
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_register_prov (via Veneer)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_register_generic_onoff_model_client (via Veneer)
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_register_config_model_client (via Veneer)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_provcfg_complete_timeout_handler (via Veneer)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_prov_callback (via Veneer)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_phy_model_client_cb (via Veneer)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_generic_onoff_client_cb (via Veneer)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_config_client_cb (via Veneer)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_config_client_appkey_binding (via Veneer)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_config_client_appkey_add (via Veneer)
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_write (via Veneer)
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_init (via Veneer)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_key_refresh_timeout_handler (via Veneer)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_iv_update_timeout_handler (via Veneer)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_random_handler (via Veneer)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_prov_data_provsioner (via Veneer)
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_trigger_tx (via Veneer)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_start_key_refresh_timer (via Veneer)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_iv_update_start (via Veneer)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_init_seq_number (via Veneer)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_send (via Veneer)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_start_iv_update_timer (via Veneer)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_iv_index (via Veneer)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_init (via Veneer)
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_internal_verificaiton_check (via Veneer)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_init (via Veneer)
</UL>

<P><STRONG><a name="[4da]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[4db]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[144]"></a>__0sprintf</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4dc]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[393]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_dump_bytes (via Veneer)
</UL>

<P><STRONG><a name="[4dd]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[4de]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[145]"></a>__0vprintf</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, printfa.o(i.__0vprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4df]"></a>__1vprintf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[4e0]"></a>__2vprintf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[4e1]"></a>__c89vprintf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[232]"></a>vprintf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfa.o(i.__0vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_debug_printf (via Veneer)
</UL>

<P><STRONG><a name="[105]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[4e2]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[4e3]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[4e4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1f6]"></a>__wdt_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, patch.o(i.__wdt_init))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1
</UL>

<P><STRONG><a name="[146]"></a>_efuse_chip_version_check</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, phy_sec_ext.o(i._efuse_chip_version_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _efuse_chip_version_check &rArr; finidv
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efuse_read (via Veneer)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finidv
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_sec_boot_init
</UL>

<P><STRONG><a name="[42]"></a>_hard_fault</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, jump_table.o(i._hard_fault))
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(.emb_text)
</UL>
<P><STRONG><a name="[14e]"></a>_rom_sec_boot_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, phy_sec_ext.o(i._rom_sec_boot_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _rom_sec_boot_init &rArr; _efuse_chip_version_check &rArr; finidv
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_efuse_chip_version_check
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efuse_init
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rom_boot_init
</UL>

<P><STRONG><a name="[6c]"></a>config_RTC1</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, patch.o(i.config_RTC1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = config_RTC1
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRTCCount (via Veneer)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_LL_remainder_time (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[159]"></a>dongleKey_init</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, donglekey.o(i.dongleKey_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = dongleKey_init &rArr; hal_gpioin_register &rArr; hal_gpioin_enable &rArr; hal_gpio_pin_init &rArr; hal_gpio_cfg_analog_io &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_register (via Veneer)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_register
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pull_set (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_Init (via Veneer)
</UL>

<P><STRONG><a name="[14f]"></a>efuse_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, phy_sec_ext.o(i.efuse_init))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_sec_boot_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1
</UL>

<P><STRONG><a name="[148]"></a>finidv</STRONG> (Thumb, 126 bytes, Stack size 56 bytes, phy_sec_ext.o(i.finidv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = finidv
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efuse_read (via Veneer)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_AES128_Encrypt0 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_efuse_chip_version_check
</UL>

<P><STRONG><a name="[15e]"></a>flash_write_word</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, flash.o(i.flash_write_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = flash_write_word &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_write_header (via Veneer)
</UL>

<P><STRONG><a name="[45]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, em_platform.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; hal_uart_send_buff &rArr; txmit_buf_use_tx_buf &rArr; hal_pwrmgr_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_buff (via Veneer)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0printf)
<LI> printfa.o(i.__0vprintf)
</UL>
<P><STRONG><a name="[161]"></a>gpio_key_timer_handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, donglekey.o(i.gpio_key_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gpio_key_timer_handler &rArr; key_release_debonce_timer_handler &rArr; hal_pwrmgr_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_release_debonce_timer_handler
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_press_debonce_timer_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessEvent (via Veneer)
</UL>

<P><STRONG><a name="[165]"></a>hal_flash_erase_sector</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, flash.o(i.hal_flash_erase_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hal_flash_erase_sector &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_erase_sector (via Veneer)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_tag_flush
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spif_wait_nobusy_x
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_unlock
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_erase (via Veneer)
</UL>

<P><STRONG><a name="[167]"></a>hal_flash_read</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, flash.o(i.hal_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_flash_read &rArr; spif_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_unlock
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_netkey_generate (via Veneer)
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_read_crc16 (via Veneer)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_Read (via Veneer)
</UL>

<P><STRONG><a name="[15f]"></a>hal_flash_write</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, flash.o(i.hal_flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_write (via Veneer)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spif_wait_nobusy_x
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_unlock
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_word
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_write (via Veneer)
</UL>

<P><STRONG><a name="[169]"></a>hal_get_flash_info</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, flash.o(i.hal_get_flash_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hal_get_flash_info &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_rddata (via Veneer)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_cmd (via Veneer)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spif_wait_nobusy_x
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_unlock
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spif_cache_config
</UL>

<P><STRONG><a name="[16e]"></a>hal_pwrmgr_LowCurrentLdo_enable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwrmgr.o(i.hal_pwrmgr_LowCurrentLdo_enable))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_low_power_io_init
</UL>

<P><STRONG><a name="[16c]"></a>hal_pwrmgr_RAM_retention</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pwrmgr.o(i.hal_pwrmgr_RAM_retention))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_low_power_io_init
</UL>

<P><STRONG><a name="[10e]"></a>hal_pwrmgr_RAM_retention_clr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwrmgr.o(i.hal_pwrmgr_RAM_retention_clr))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_enter_sleep_rtc_reset
</UL>

<P><STRONG><a name="[16d]"></a>hal_pwrmgr_RAM_retention_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pwrmgr.o(i.hal_pwrmgr_RAM_retention_set))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_low_power_io_init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_sleep_process
</UL>

<P><STRONG><a name="[16f]"></a>hal_pwrmgr_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, pwrmgr.o(i.hal_pwrmgr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_pwrmgr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSleep (via Veneer)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableSleep (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[173]"></a>hal_pwrmgr_lock</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, pwrmgr.o(i.hal_pwrmgr_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_pwrmgr_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableSleep (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txmit_buf_use_tx_buf (via Veneer)
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwm_start (via Veneer)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_event_handler
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_Init (via Veneer)
</UL>

<P><STRONG><a name="[15c]"></a>hal_pwrmgr_register</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, pwrmgr.o(i.hal_pwrmgr_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hal_pwrmgr_register
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init (via Veneer)
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwm_init (via Veneer)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spif_cache_init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init (via Veneer)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dongleKey_init
</UL>

<P><STRONG><a name="[61]"></a>hal_pwrmgr_sleep_process</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pwrmgr.o(i.hal_pwrmgr_sleep_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_pwrmgr_sleep_process
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_RAM_retention_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[10a]"></a>hal_pwrmgr_unlock</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, pwrmgr.o(i.hal_pwrmgr_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_pwrmgr_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSleep (via Veneer)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableSleep (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_tx_empty_handler
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwm_stop (via Veneer)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_release_debonce_timer_handler
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_press_debonce_timer_handler
</UL>

<P><STRONG><a name="[174]"></a>hal_pwrmgr_unregister</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, pwrmgr.o(i.hal_pwrmgr_unregister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_pwrmgr_unregister
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_deinit (via Veneer)
</UL>

<P><STRONG><a name="[62]"></a>hal_pwrmgr_wakeup_process</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, pwrmgr.o(i.hal_pwrmgr_wakeup_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_pwrmgr_wakeup_process
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[177]"></a>hal_rom_boot_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, patch.o(i.hal_rom_boot_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hal_rom_boot_init &rArr; _rom_sec_boot_init &rArr; _efuse_chip_version_check &rArr; finidv
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_sec_boot_init
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init
</UL>

<P><STRONG><a name="[17b]"></a>hal_spif_cache_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, flash.o(i.hal_spif_cache_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hal_spif_cache_init &rArr; hw_spif_cache_config &rArr; hal_get_flash_info &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spif_cache_config
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_register
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>llConnTerminate1</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, patch.o(i.llConnTerminate1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = llConnTerminate1
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessChanMap (via Veneer)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llConnTerminate0 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[4c]"></a>llMasterEvt_TaskEndOk1</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, patch.o(i.llMasterEvt_TaskEndOk1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = llMasterEvt_TaskEndOk1
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_current_fine_time (via Veneer)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_scheduler (via Veneer)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupNextMasterEvent (via Veneer)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessTxData (via Veneer)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessRxData (via Veneer)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures (via Veneer)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llPhyModeCtrlUpdateNotify (via Veneer)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llConnTerminate (via Veneer)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRxBufferSize (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.ll_patch_master)
</UL>
<P><STRONG><a name="[52]"></a>llProcessMasterControlProcedures1</STRONG> (Thumb, 1198 bytes, Stack size 72 bytes, patch.o(i.llProcessMasterControlProcedures1))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = llProcessMasterControlProcedures1 &rArr; llSetupStartEncRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupVersionIndReq (via Veneer)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupUpdateParamReq (via Veneer)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupUpdateChanReq (via Veneer)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupUnknownRsp (via Veneer)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupTermInd (via Veneer)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupRejectExtInd (via Veneer)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupPhyUpdateInd (via Veneer)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupPhyReq (via Veneer)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupPauseEncRsp (via Veneer)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupPauseEncReq (via Veneer)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupFeatureSetRsp (via Veneer)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupFeatureSetReq (via Veneer)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupEncReq (via Veneer)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupDataLenghtRsp (via Veneer)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupDataLenghtReq (via Veneer)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupCTERsp (via Veneer)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupCTEReq (via Veneer)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llReplaceCtrlPkt (via Veneer)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llPhyModeCtrlUpdateNotify (via Veneer)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llPduLengthUpdate (via Veneer)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llDequeueCtrlPkt (via Veneer)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llConnTerminate (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ReadRemoteVersionInfoCback (via Veneer)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ReadRemoteUsedFeaturesCompleteCback (via Veneer)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EncKeyRefreshCback (via Veneer)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EncChangeCback (via Veneer)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupStartEncRsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.ll_patch_master)
</UL>
<P><STRONG><a name="[53]"></a>llProcessSlaveControlProcedures1</STRONG> (Thumb, 840 bytes, Stack size 48 bytes, patch.o(i.llProcessSlaveControlProcedures1))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = llProcessSlaveControlProcedures1 &rArr; llSetupStartEncRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_cte_txSupp (via Veneer)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupVersionIndReq (via Veneer)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupUnknownRsp (via Veneer)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupTermInd (via Veneer)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupStartEncReq (via Veneer)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupRejectInd (via Veneer)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupPhyRsp (via Veneer)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupPhyReq (via Veneer)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupPauseEncRsp (via Veneer)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupFeatureSetRsp (via Veneer)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupEncRsp (via Veneer)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupDataLenghtRsp (via Veneer)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupDataLenghtReq (via Veneer)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupCTERsp (via Veneer)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupCTEReq (via Veneer)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llReplaceCtrlPkt (via Veneer)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llPduLengthUpdate (via Veneer)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llDequeueCtrlPkt (via Veneer)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llConnTerminate (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ReadRemoteVersionInfoCback (via Veneer)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EncLtkReqCback (via Veneer)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EncKeyRefreshCback (via Veneer)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EncChangeCback (via Veneer)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_AES128_Encrypt (via Veneer)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupStartEncRsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.ll_patch_master)
</UL>
<P><STRONG><a name="[71]"></a>llProcessTxData1</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, patch.o(i.llProcessTxData1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llProcessTxData1
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessTxData0 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[56]"></a>llSetupSecScan1</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, patch.o(i.llSetupSecScan1))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = llSetupSecScan1 &rArr; rf_phy_change_cfg0
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_whiten_seed (via Veneer)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_max_length (via Veneer)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_crc_seed (via Veneer)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_channel (via Veneer)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_access_address (via Veneer)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_current_fine_time (via Veneer)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_srx (via Veneer)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_rx_timeout (via Veneer)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_rst_tfifo (via Veneer)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_rst_rfifo (via Veneer)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_ign_rfifo (via Veneer)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_go (via Veneer)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llCalcMaxScanTime (via Veneer)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_change_cfg0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.ll_patch_master)
</UL>
<P><STRONG><a name="[192]"></a>llSetupStartEncRsp</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, patch.o(i.llSetupStartEncRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llSetupStartEncRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_Encrypt (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1
</UL>

<P><STRONG><a name="[73]"></a>ll_adptive_adj_next_time1</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, patch.o(i.ll_adptive_adj_next_time1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ll_adptive_adj_next_time1
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_get_loop_cycle (via Veneer)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_get_anchor (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[72]"></a>ll_generateTxBuffer1</STRONG> (Thumb, 410 bytes, Stack size 40 bytes, patch.o(i.ll_generateTxBuffer1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ll_generateTxBuffer1
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_tx_read_ptr (via Veneer)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_write_tfifo (via Veneer)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_get_tfifo_wrptr (via Veneer)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llEnqueueCtrlPkt (via Veneer)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tx_read_ptr (via Veneer)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTxBufferSize (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[66]"></a>ll_hw_go1</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, patch.o(i.ll_hw_go1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ll_hw_go1
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_max_length (via Veneer)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_current_fine_time (via Veneer)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_rx_timeout (via Veneer)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_get_tr_mode (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[1c1]"></a>ll_hw_read_rfifo1</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, patch.o(i.ll_hw_read_rfifo1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ll_hw_read_rfifo1
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_get_rfifo_info (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_ScanTRX0
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0
</UL>

<P><STRONG><a name="[1d5]"></a>ll_patch_master</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, patch.o(i.ll_patch_master))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[128]"></a>ll_processBasicIRQ_SRX</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, patch.o(i.ll_processBasicIRQ_SRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ll_processBasicIRQ_SRX
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1
</UL>

<P><STRONG><a name="[54]"></a>ll_processBasicIRQ_SRX0</STRONG> (Thumb, 2296 bytes, Stack size 56 bytes, patch.o(i.ll_processBasicIRQ_SRX0))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ll_processBasicIRQ_SRX0 &rArr; ll_hw_read_rfifo1
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event (via Veneer)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_max_length (via Veneer)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_current_fine_time (via Veneer)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_master_function (via Veneer)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_schedule_next_event (via Veneer)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_isIrkAllZero (via Veneer)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_isAddrInWhiteList (via Veneer)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_write_tfifo (via Veneer)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_tx_rx_interval (via Veneer)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_trx_settle (via Veneer)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_trx (via Veneer)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_stx (via Veneer)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_rx_timeout (via Veneer)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_rst_tfifo (via Veneer)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_rst_rfifo (via Veneer)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_ign_rfifo (via Veneer)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_go (via Veneer)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_get_tr_mode (via Veneer)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_get_rfifo_depth (via Veneer)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_clr_irq (via Veneer)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_getRPAListEntry (via Veneer)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_debug_output (via Veneer)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_ResolveRandomAddrs (via Veneer)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_CalcRandomAddr (via Veneer)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupScan (via Veneer)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llReleaseConnId (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_evt_schedule (via Veneer)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdvReportCback (via Veneer)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_read_rfifo1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.ll_patch_master)
</UL>
<P><STRONG><a name="[12a]"></a>ll_processBasicIRQ_ScanTRX</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, patch.o(i.ll_processBasicIRQ_ScanTRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ll_processBasicIRQ_ScanTRX
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1
</UL>

<P><STRONG><a name="[55]"></a>ll_processBasicIRQ_ScanTRX0</STRONG> (Thumb, 428 bytes, Stack size 48 bytes, patch.o(i.ll_processBasicIRQ_ScanTRX0))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ll_processBasicIRQ_ScanTRX0 &rArr; ll_hw_read_rfifo1
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_schedule_next_event (via Veneer)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_get_rfifo_depth (via Veneer)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_clr_irq (via Veneer)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_getRPAListEntry (via Veneer)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_debug_output (via Veneer)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupScan (via Veneer)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_evt_schedule (via Veneer)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_GeneratePseudoRandNum (via Veneer)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdvReportCback (via Veneer)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llAdjBoffUpperLimitFailure1
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_read_rfifo1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.ll_patch_master)
</UL>
<P><STRONG><a name="[129]"></a>ll_processBasicIRQ_secondaryAdvTRX</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, patch.o(i.ll_processBasicIRQ_secondaryAdvTRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ll_processBasicIRQ_secondaryAdvTRX
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1
</UL>

<P><STRONG><a name="[12d]"></a>ll_processBasicIRQ_secondaryInitSRX</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, patch.o(i.ll_processBasicIRQ_secondaryInitSRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ll_processBasicIRQ_secondaryInitSRX
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1
</UL>

<P><STRONG><a name="[12c]"></a>ll_processBasicIRQ_secondaryScanSRX</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, patch.o(i.ll_processBasicIRQ_secondaryScanSRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ll_processBasicIRQ_secondaryScanSRX
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1
</UL>

<P><STRONG><a name="[41]"></a>main</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = main &rArr; dbg_printf &rArr; log_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_patch_master
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config (via Veneer)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spif_cache_init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_clock_config (via Veneer)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init (via Veneer)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_irq_init (via Veneer)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf_init (via Veneer)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf (via Veneer)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_init (via Veneer)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_low_power_io_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[320]"></a>ms_init_pl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ms_common_pl.o(i.ms_init_pl))
<BR><BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_init (via Veneer)
</UL>

<P><STRONG><a name="[60]"></a>osalInitTasks</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, osal_blemesh.o(i.osalInitTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osalInitTasks &rArr; bleMesh_Init &rArr; bleMesh_uart_init &rArr; hal_uart_init &rArr; uart_hw_init &rArr; uart_hw_deinit &rArr; hal_clk_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_Init (via Veneer)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_Init (via Veneer)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerInit (via Veneer)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init (via Veneer)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Init (via Veneer)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Init (via Veneer)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Init (via Veneer)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init (via Veneer)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_Init (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[1e6]"></a>prov_read_device_oob_pubkey_pl</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, prov_pl.o(i.prov_read_device_oob_pubkey_pl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prov_read_device_oob_pubkey_pl
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_pubkey_handler (via Veneer)
</UL>

<P><STRONG><a name="[1e8]"></a>prov_read_static_oob_auth_pl</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, prov_pl.o(i.prov_read_static_oob_auth_pl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prov_read_static_oob_auth_pl
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_pubkey_handler (via Veneer)
</UL>

<P><STRONG><a name="[1e9]"></a>rc32k_calibration</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, rf_phy_driver.o(i.rc32k_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rc32k_calibration
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRTCCount (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_calibrate1
</UL>

<P><STRONG><a name="[68]"></a>rf_calibrate1</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rf_phy_driver.o(i.rf_calibrate1))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rf_calibrate1 &rArr; rf_tpCal_gen_cap_arrary &rArr; rf_tp_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_tpCal_gen_cap_arrary
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rxDcoc_cfg
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc32k_calibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[1ee]"></a>rf_phy_ana_cfg</STRONG> (Thumb, 228 bytes, Stack size 12 bytes, rf_phy_driver.o(i.rf_phy_ana_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rf_phy_ana_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ini
</UL>

<P><STRONG><a name="[1ec]"></a>rf_phy_bb_cfg</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, rf_phy_driver.o(i.rf_phy_bb_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rf_phy_bb_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_crc_fmt (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ini
</UL>

<P><STRONG><a name="[69]"></a>rf_phy_change_cfg0</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, rf_phy_driver.o(i.rf_phy_change_cfg0))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rf_phy_change_cfg0
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSecScan1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[63]"></a>rf_phy_ini</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rf_phy_driver.o(i.rf_phy_ini))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rf_phy_ini &rArr; rf_phy_bb_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_tx2rx_timing_config (via Veneer)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_set_txPower
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_bb_cfg
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ana_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[1ef]"></a>rf_phy_set_txPower</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, rf_phy_driver.o(i.rf_phy_set_txPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rf_phy_set_txPower
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ini
</UL>

<P><STRONG><a name="[1eb]"></a>rf_rxDcoc_cfg</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, rf_phy_driver.o(i.rf_rxDcoc_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rf_rxDcoc_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_calibrate1
</UL>

<P><STRONG><a name="[1ea]"></a>rf_tpCal_gen_cap_arrary</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, rf_phy_driver.o(i.rf_tpCal_gen_cap_arrary))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rf_tpCal_gen_cap_arrary &rArr; rf_tp_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_tp_cal
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_calibrate1
</UL>

<P><STRONG><a name="[1f1]"></a>rf_tp_cal</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, rf_phy_driver.o(i.rf_tp_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rf_tp_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_tpCal_gen_cap_arrary
</UL>

<P><STRONG><a name="[6e]"></a>wakeupProcess1</STRONG> (Thumb, 392 bytes, Stack size 24 bytes, patch.o(i.wakeupProcess1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wakeupProcess1 &rArr; wakeup_init1 &rArr; check_96MXtal_by_rcTracking
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRTCCount (via Veneer)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_irq_init (via Veneer)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sleep_flag (via Veneer)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ini
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimeUpdate (via Veneer)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_system (via Veneer)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer (via Veneer)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_counter (via Veneer)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_current_fine_time (via Veneer)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_tx2rx_timing_config (via Veneer)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_debug_output (via Veneer)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_wakeup_process (via Veneer)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[6d]"></a>wakeup_init1</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, patch.o(i.wakeup_init1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wakeup_init1 &rArr; check_96MXtal_by_rcTracking
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRTCCount (via Veneer)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_init (via Veneer)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer (via Veneer)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_max_length (via Veneer)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_counter (via Veneer)
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_timing (via Veneer)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_rx_timeout_1st (via Veneer)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_rx_timeout (via Veneer)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_loop_timeout (via Veneer)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_empty_head (via Veneer)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_ign_rfifo (via Veneer)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_96MXtal_by_rcTracking
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_16MXtal_by_rcTracking
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efuse_init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wdt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[178]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, main.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init
</UL>

<P><STRONG><a name="[16a]"></a>hal_low_power_io_init</STRONG> (Thumb, 98 bytes, Stack size 64 bytes, main.o(i.hal_low_power_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hal_low_power_io_init &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_RAM_retention_set
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_RAM_retention
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_LowCurrentLdo_enable
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pull_set (via Veneer)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[176]"></a>hal_rfphy_init</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, main.o(i.hal_rfphy_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hal_rfphy_init &rArr; hal_rom_boot_init &rArr; _rom_sec_boot_init &rArr; _efuse_chip_version_check &rArr; finidv
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_set_heap (via Veneer)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rom_boot_init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitConnectContext (via Veneer)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[106]"></a>spif_lock</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, flash.o(_section_sram_code_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spif_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_flash_info
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase_sector
</UL>

<P><STRONG><a name="[109]"></a>spif_unlock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, flash.o(_section_sram_code_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spif_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_flash_info
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase_sector
</UL>

<P><STRONG><a name="[150]"></a>_spif_wait_nobusy_x</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, flash.o(i._spif_wait_nobusy_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_rddata (via Veneer)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_cmd (via Veneer)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRTCCount (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_flash_info
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase_sector
</UL>

<P><STRONG><a name="[164]"></a>hal_cache_tag_flush</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, flash.o(i.hal_cache_tag_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_cache_tag_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase_sector
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spif_cache_config
</UL>

<P><STRONG><a name="[49]"></a>hw_spif_cache_config</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, flash.o(i.hw_spif_cache_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = hw_spif_cache_config &rArr; hal_get_flash_info &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_config (via Veneer)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_flash_info
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_tag_flush
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clk_gate_enable (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spif_cache_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash.o(i.hal_spif_cache_init)
</UL>
<P><STRONG><a name="[a3]"></a>_uart_putc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, my_printf.o(i._uart_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _uart_putc &rArr; hal_uart_send_buff &rArr; txmit_buf_use_tx_buf &rArr; hal_pwrmgr_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_buff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_printf.o(i.dbg_printf)
</UL>
<P><STRONG><a name="[3d9]"></a>log_vsprintf</STRONG> (Thumb, 608 bytes, Stack size 56 bytes, my_printf.o(i.log_vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = log_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;number
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf
</UL>

<P><STRONG><a name="[451]"></a>number</STRONG> (Thumb, 356 bytes, Stack size 128 bytes, my_printf.o(i.number))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = number
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_vsprintf
</UL>

<P><STRONG><a name="[450]"></a>skip_atoi</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, my_printf.o(i.skip_atoi))
<BR><BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_vsprintf
</UL>

<P><STRONG><a name="[426]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpio.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_handler
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init
</UL>

<P><STRONG><a name="[425]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, gpio.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_handler
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init
</UL>

<P><STRONG><a name="[430]"></a>hal_gpio_interrupt_enable</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gpio.o(i.hal_gpio_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_gpio_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_enable
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_event
</UL>

<P><STRONG><a name="[429]"></a>hal_gpio_retention_enable</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, gpio.o(i.hal_gpio_retention_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_gpio_retention_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_handler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_sleep_handler
</UL>

<P><STRONG><a name="[a8]"></a>hal_gpio_sleep_handler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, gpio.o(i.hal_gpio_sleep_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_gpio_sleep_handler &rArr; hal_gpio_wakeup_set &rArr; hal_gpio_wakeup_control
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_set
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_read
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_retention_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(i.hal_gpio_init)
</UL>
<P><STRONG><a name="[42e]"></a>hal_gpio_wakeup_control</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gpio.o(i.hal_gpio_wakeup_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_gpio_wakeup_control
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_set
</UL>

<P><STRONG><a name="[a7]"></a>hal_gpio_wakeup_handler</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, gpio.o(i.hal_gpio_wakeup_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = hal_gpio_wakeup_handler &rArr; hal_gpioin_enable &rArr; hal_gpio_pin_init &rArr; hal_gpio_cfg_analog_io &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_enable
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_write
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_read
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin2pin3_control
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_event_pin
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_retention_enable
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(i.hal_gpio_init)
</UL>
<P><STRONG><a name="[421]"></a>hal_gpioin_event</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, gpio.o(i.hal_gpioin_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_gpioin_event &rArr; hal_gpio_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_event_pin
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_GPIO_IRQHandler
</UL>

<P><STRONG><a name="[42d]"></a>hal_gpioin_event_pin</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gpio.o(i.hal_gpioin_event_pin))
<BR><BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_event
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_handler
</UL>

<P><STRONG><a name="[f4]"></a>irq_rx_handler</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, uart.o(_section_sram_code_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = irq_rx_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_UART0_IRQHandler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_UART1_IRQHandler
</UL>

<P><STRONG><a name="[f5]"></a>irq_tx_empty_handler</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, uart.o(_section_sram_code_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = irq_tx_empty_handler &rArr; hal_pwrmgr_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_UART0_IRQHandler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_UART1_IRQHandler
</UL>

<P><STRONG><a name="[43d]"></a>txmit_buf_polling</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, uart.o(i.txmit_buf_polling))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = txmit_buf_polling
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_buff
</UL>

<P><STRONG><a name="[43c]"></a>txmit_buf_use_tx_buf</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, uart.o(i.txmit_buf_use_tx_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = txmit_buf_use_tx_buf &rArr; hal_pwrmgr_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_lock (via Veneer)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_buff
</UL>

<P><STRONG><a name="[43a]"></a>uart_hw_deinit</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, uart.o(i.uart_hw_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_hw_deinit &rArr; hal_clk_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clk_reset
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_fmux
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clk_gate_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_init
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_deinit
</UL>

<P><STRONG><a name="[43b]"></a>uart_hw_init</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, uart.o(i.uart_hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = uart_hw_init &rArr; uart_hw_deinit &rArr; hal_clk_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_deinit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clk_reset
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_fmux_set
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clk_gate_enable
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pull_set
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_get_pclk (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_wakeup_process_1
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_wakeup_process_0
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[ab]"></a>uart_wakeup_process_0</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.uart_wakeup_process_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = uart_wakeup_process_0 &rArr; uart_hw_init &rArr; uart_hw_deinit &rArr; hal_clk_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(i.hal_uart_init)
</UL>
<P><STRONG><a name="[aa]"></a>uart_wakeup_process_1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.uart_wakeup_process_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = uart_wakeup_process_1 &rArr; uart_hw_init &rArr; uart_hw_deinit &rArr; hal_clk_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(i.hal_uart_init)
</UL>
<P><STRONG><a name="[175]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, pwrmgr.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_wakeup_process
</UL>

<P><STRONG><a name="[163]"></a>key_press_debonce_timer_handler</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, donglekey.o(i.key_press_debonce_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = key_press_debonce_timer_handler &rArr; hal_pwrmgr_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_read (via Veneer)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unlock
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMcuPrecisionCount (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_key_timer_handler
</UL>

<P><STRONG><a name="[162]"></a>key_release_debonce_timer_handler</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, donglekey.o(i.key_release_debonce_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = key_release_debonce_timer_handler &rArr; hal_pwrmgr_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_read (via Veneer)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unlock
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMcuPrecisionCount (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_key_timer_handler
</UL>

<P><STRONG><a name="[180]"></a>key_timer_start</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, donglekey.o(i.key_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = key_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_event_handler
</UL>

<P><STRONG><a name="[47]"></a>pin_event_handler</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, donglekey.o(i.pin_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pin_event_handler &rArr; hal_pwrmgr_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_lock
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_timer_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> donglekey.o(i.dongleKey_init)
</UL>
<P><STRONG><a name="[c7]"></a>devInfo_ReadAttrCB</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, devinfoservice.o(i.devInfo_ReadAttrCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = devInfo_ReadAttrCB
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devinfoservice.o(.constdata)
</UL>
<P><STRONG><a name="[293]"></a>gattServApp_FindAuthorizeAttrCB</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gattservapp.o(i.gattServApp_FindAuthorizeAttrCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gattServApp_FindAuthorizeAttrCB
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindServiceCBs
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessWriteReq
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessPrepareWriteReq
</UL>

<P><STRONG><a name="[28c]"></a>gattServApp_FindCharCfgItem</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gattservapp.o(i.gattServApp_FindCharCfgItem))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_WriteCharCfg
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadCharCfg
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_InitCharCfg
</UL>

<P><STRONG><a name="[413]"></a>gattServApp_FindPrepareWriteQ</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gattservapp.o(i.gattServApp_FindPrepareWriteQ))
<BR><BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessPrepareWriteReq
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessExecuteWriteReq
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_HandleConnStatusCB
</UL>

<P><STRONG><a name="[294]"></a>gattServApp_FindServiceCBs</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gattservapp.o(i.gattServApp_FindServiceCBs))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_WriteAttr
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindAuthorizeAttrCB
</UL>

<P><STRONG><a name="[88]"></a>gattServApp_HandleConnStatusCB</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, gattservapp.o(i.gattServApp_HandleConnStatusCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gattServApp_HandleConnStatusCB &rArr; GATTServApp_InitCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_State
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_InitCharCfg
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindPrepareWriteQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattservapp.o(i.GATTServApp_Init)
</UL>
<P><STRONG><a name="[414]"></a>gattServApp_ProcessExecuteWriteReq</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, gattservapp.o(i.gattServApp_ProcessExecuteWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = gattServApp_ProcessExecuteWriteReq &rArr; ATT_ExecuteWriteRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ExecuteWriteRsp
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_WriteAttr
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindPrepareWriteQ
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[415]"></a>gattServApp_ProcessFindByTypeValueReq</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, gattservapp.o(i.gattServApp_ProcessFindByTypeValueReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = gattServApp_ProcessFindByTypeValueReq &rArr; ATT_FindByTypeValueRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindNextAttr
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_FindByTypeValueRsp
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[291]"></a>gattServApp_ProcessMsg</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, gattservapp.o(i.gattServApp_ProcessMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = gattServApp_ProcessMsg &rArr; gattServApp_ProcessReadByTypeReq &rArr; ATT_ReadByTypeRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_AppCompletedMsg
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadRsp
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadBlobRsp
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ExchangeMTURsp
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ErrorRsp
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessWriteReq
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadMultiReq
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByTypeReq
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessPrepareWriteReq
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessFindByTypeValueReq
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessExecuteWriteReq
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessEvent
</UL>

<P><STRONG><a name="[41a]"></a>gattServApp_ProcessPrepareWriteReq</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, gattservapp.o(i.gattServApp_ProcessPrepareWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = gattServApp_ProcessPrepareWriteReq &rArr; ATT_PrepareWriteRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PrepareWriteRsp
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindPrepareWriteQ
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindAuthorizeAttrCB
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[418]"></a>gattServApp_ProcessReadByGrpTypeReq</STRONG> (Thumb, 332 bytes, Stack size 72 bytes, gattservapp.o(i.gattServApp_ProcessReadByGrpTypeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = gattServApp_ProcessReadByGrpTypeReq &rArr; ATT_ReadByGrpTypeRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_VerifyReadPermissions
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindNextAttr
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadByGrpTypeRsp
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[416]"></a>gattServApp_ProcessReadByTypeReq</STRONG> (Thumb, 302 bytes, Stack size 72 bytes, gattservapp.o(i.gattServApp_ProcessReadByTypeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = gattServApp_ProcessReadByTypeReq &rArr; ATT_ReadByTypeRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_VerifyReadPermissions
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadByTypeRsp
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[417]"></a>gattServApp_ProcessReadMultiReq</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, gattservapp.o(i.gattServApp_ProcessReadMultiReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = gattServApp_ProcessReadMultiReq &rArr; ATT_ReadMultiRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadMultiRsp
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[419]"></a>gattServApp_ProcessWriteReq</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, gattservapp.o(i.gattServApp_ProcessWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = gattServApp_ProcessWriteReq &rArr; ATT_WriteRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_WriteRsp
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_WriteAttr
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindAuthorizeAttrCB
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[289]"></a>gattServApp_SetNumPrepareWrites</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, gattservapp.o(i.gattServApp_SetNumPrepareWrites))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gattServApp_SetNumPrepareWrites
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_Init
</UL>

<P><STRONG><a name="[c8]"></a>gattServApp_WriteAttrCB</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, gattservapp.o(i.gattServApp_WriteAttrCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gattServApp_WriteAttrCB &rArr; GATTServApp_ProcessCCCWriteReq &rArr; GATTServApp_SendCCCUpdatedEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessCCCWriteReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattservapp.o(.constdata)
</UL>
<P><STRONG><a name="[400]"></a>gapRole_ProcessGAPMsg</STRONG> (Thumb, 490 bytes, Stack size 24 bytes, peripheral.o(i.gapRole_ProcessGAPMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = gapRole_ProcessGAPMsg &rArr; GAPBondMgr_LinkEst &rArr; GATTServApp_SendServiceChangedInd &rArr; GATT_ServiceChangedInd &rArr; GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event (via Veneer)
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_get_timeoutEx (via Veneer)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_UpdateAdvertisingData
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_EndDiscoverable
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessOSALMsg
</UL>

<P><STRONG><a name="[251]"></a>gapRole_ProcessOSALMsg</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, peripheral.o(i.gapRole_ProcessOSALMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = gapRole_ProcessOSALMsg &rArr; gapRole_ProcessGAPMsg &rArr; GAPBondMgr_LinkEst &rArr; GATTServApp_SendServiceChangedInd &rArr; GATT_ServiceChangedInd &rArr; GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_TerminateConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent
</UL>

<P><STRONG><a name="[254]"></a>gapRole_startConnUpdate</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, peripheral.o(i.gapRole_startConnUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = gapRole_startConnUpdate &rArr; L2CAP_ConnParamUpdateReq &rArr; l2capSendReq &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnParamUpdateReq
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SendUpdateParam
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent
</UL>

<P><STRONG><a name="[c9]"></a>ggs_ReadAttrCB</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, gapgattserver.o(i.ggs_ReadAttrCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ggs_ReadAttrCB
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_strlen (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapgattserver.o(.constdata)
</UL>
<P><STRONG><a name="[2b4]"></a>ggs_SetAttrWPermit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, gapgattserver.o(i.ggs_SetAttrWPermit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ggs_SetAttrWPermit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_SetParameter
</UL>

<P><STRONG><a name="[ca]"></a>ggs_WriteAttrCB</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, gapgattserver.o(i.ggs_WriteAttrCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ggs_WriteAttrCB
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_strlen (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapgattserver.o(.constdata)
</UL>
<P><STRONG><a name="[24a]"></a>gapBondMgrAuthenticate</STRONG> (Thumb, 254 bytes, Stack size 56 bytes, gapbondmgr.o(i.gapBondMgrAuthenticate))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = gapBondMgrAuthenticate &rArr; GAP_Authenticate &rArr; SM_StartPairing &rArr; smGeneratePairingReqRsp &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authenticate
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
</UL>

<P><STRONG><a name="[243]"></a>gapBondMgrBondReq</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, gapbondmgr.o(i.gapBondMgrBondReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gapBondMgrBondReq &rArr; GAP_Bond &rArr; smStartEncryption
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_read
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Bond
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
</UL>

<P><STRONG><a name="[24c]"></a>gapBondMgrFindAddr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gapbondmgr.o(i.gapBondMgrFindAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapBondMgrFindAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr
</UL>

<P><STRONG><a name="[24e]"></a>gapBondMgrGetPublicAddr</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, gapbondmgr.o(i.gapBondMgrGetPublicAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gapBondMgrGetPublicAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_read
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr
</UL>

<P><STRONG><a name="[242]"></a>gapBondMgrGetStateFlags</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, gapbondmgr.o(i.gapBondMgrGetStateFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapBondMgrGetStateFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_read
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
</UL>

<P><STRONG><a name="[247]"></a>gapBondMgrInvertCharCfgItem</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gapbondmgr.o(i.gapBondMgrInvertCharCfgItem))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
</UL>

<P><STRONG><a name="[24b]"></a>gapBondMgrSlaveSecurityReq</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, gapbondmgr.o(i.gapBondMgrSlaveSecurityReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = gapBondMgrSlaveSecurityReq &rArr; GAP_SendSlaveSecurityRequest &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SendSlaveSecurityRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
</UL>

<P><STRONG><a name="[d5]"></a>ProcessUartData</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, blemesh.o(i.ProcessUartData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ProcessUartData
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blemesh.o(.constdata)
</UL>
<P><STRONG><a name="[3ae]"></a>bleMesh_ProcessGAPMsg</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, blemesh.o(i.bleMesh_ProcessGAPMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = bleMesh_ProcessGAPMsg &rArr; blebrr_handle_evt_scan_complete &rArr; blebrr_pl_scan_setup &rArr; blebrr_update_advdata &rArr; blebrr_advertise_data_pl &rArr; blebrr_advertise_pl &rArr; BLE_gap_set_adv_enable &rArr; GAP_MakeDiscoverable &rArr; gapSetAdvParams &rArr; isLimitedDiscoverableMode &rArr; gapFindADType
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceDiscoveryRequest
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceDiscoveryCancel
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_EndDiscoverable
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_handle_le_disconnection_pl
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_handle_le_connection_pl
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_handle_evt_scan_complete
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_handle_evt_adv_report
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_handle_evt_adv_complete
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessOSALMsg
</UL>

<P><STRONG><a name="[3a4]"></a>bleMesh_ProcessOSALMsg</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, blemesh.o(i.bleMesh_ProcessOSALMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = bleMesh_ProcessOSALMsg &rArr; mesh_client_process_gattMsg &rArr; GATT_DiscAllChars &rArr; gattReadByType &rArr; ATT_ReadByTypeReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessGAPMsg
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_client_process_gattMsg
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessEvent
</UL>

<P><STRONG><a name="[9f]"></a>key_press_process</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, blemesh.o(i.key_press_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = key_press_process
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blemesh.o(i.bleMesh_Init)
</UL>
<P><STRONG><a name="[384]"></a>aes_ccm_auth</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, aes-ccm.o(i.aes_ccm_auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = aes_ccm_auth &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_aes_block
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_ae
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_ad
</UL>

<P><STRONG><a name="[383]"></a>aes_ccm_auth_start</STRONG> (Thumb, 154 bytes, Stack size 88 bytes, aes-ccm.o(i.aes_ccm_auth_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_aes_block
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_ae
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_ad
</UL>

<P><STRONG><a name="[382]"></a>aes_ccm_encr</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, aes-ccm.o(i.aes_ccm_encr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = aes_ccm_encr &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_aes_block
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_ae
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_ad
</UL>

<P><STRONG><a name="[380]"></a>aes_ccm_encr_start</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, aes-ccm.o(i.aes_ccm_encr_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aes_ccm_encr_start
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_ae
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_ad
</UL>

<P><STRONG><a name="[387]"></a>xor_aes_block</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, aes-ccm.o(i.xor_aes_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xor_aes_block
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_encr
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_auth_start
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_auth
</UL>

<P><STRONG><a name="[1]"></a>appl_mesh_prov_data_in_wt_cb</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, blebrr_pl.o(i.appl_mesh_prov_data_in_wt_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = appl_mesh_prov_data_in_wt_cb &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_recv_gattpacket
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blebrr_pl.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>appl_mesh_prov_data_out_ccd_cb</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, blebrr_pl.o(i.appl_mesh_prov_data_out_ccd_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = appl_mesh_prov_data_out_ccd_cb &rArr; blebrr_gatt_com_channel_setup_pl &rArr; blebrr_pl_gatt_connection &rArr; blebrr_scan_enable &rArr; blebrr_scan_pl &rArr; BLE_gap_set_scan_enable &rArr; GAP_DeviceDiscoveryCancel &rArr; gapSendDevDiscEvent &rArr; gapFreeScanRecs
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_com_channel_setup_pl
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_mode_get
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blebrr_pl.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>appl_mesh_proxy_data_in_wt_cb</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, blebrr_pl.o(i.appl_mesh_proxy_data_in_wt_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = appl_mesh_proxy_data_in_wt_cb &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_recv_gattpacket
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blebrr_pl.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>appl_mesh_proxy_data_out_ccd_cb</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, blebrr_pl.o(i.appl_mesh_proxy_data_out_ccd_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = appl_mesh_proxy_data_out_ccd_cb &rArr; blebrr_gatt_com_channel_setup_pl &rArr; blebrr_pl_gatt_connection &rArr; blebrr_scan_enable &rArr; blebrr_scan_pl &rArr; BLE_gap_set_scan_enable &rArr; GAP_DeviceDiscoveryCancel &rArr; gapSendDevDiscEvent &rArr; gapFreeScanRecs
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_com_channel_setup_pl
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_scan_enable
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_mode_get
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blebrr_pl.o(.data)
</UL>
<P><STRONG><a name="[396]"></a>blebrr_gatt_com_channel_setup_pl</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, blebrr_pl.o(i.blebrr_gatt_com_channel_setup_pl))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = blebrr_gatt_com_channel_setup_pl &rArr; blebrr_pl_gatt_connection &rArr; blebrr_scan_enable &rArr; blebrr_scan_pl &rArr; BLE_gap_set_scan_enable &rArr; GAP_DeviceDiscoveryCancel &rArr; gapSendDevDiscEvent &rArr; gapFreeScanRecs
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_gatt_disconnection
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_gatt_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_proxy_data_out_ccd_cb
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_prov_data_out_ccd_cb
</UL>

<P><STRONG><a name="[a1]"></a>blebrr_adv_send</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, blebrr.o(i.blebrr_adv_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = blebrr_adv_send &rArr; blebrr_bcon_send &rArr; blebrr_send &rArr; blebrr_update_advdata &rArr; blebrr_advertise_data_pl &rArr; blebrr_advertise_pl &rArr; BLE_gap_set_adv_enable &rArr; GAP_MakeDiscoverable &rArr; gapSetAdvParams &rArr; isLimitedDiscoverableMode &rArr; gapFindADType
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_scan_pl
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_get_queue_depth
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_send
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_bcon_send
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blebrr.o(i.blebrr_register)
</UL>
<P><STRONG><a name="[a2]"></a>blebrr_advscan_timeout_handler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, blebrr.o(i.blebrr_advscan_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = blebrr_advscan_timeout_handler &rArr; blebrr_advertise_pl &rArr; BLE_gap_set_adv_enable &rArr; GAP_MakeDiscoverable &rArr; gapSetAdvParams &rArr; isLimitedDiscoverableMode &rArr; gapFindADType
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_scan_pl
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_advertise_pl
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blebrr.o(i.blebrr_timer_start)
</UL>
<P><STRONG><a name="[3b6]"></a>blebrr_bcon_send</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, blebrr.o(i.blebrr_bcon_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = blebrr_bcon_send &rArr; blebrr_send &rArr; blebrr_update_advdata &rArr; blebrr_advertise_data_pl &rArr; blebrr_advertise_pl &rArr; BLE_gap_set_adv_enable &rArr; GAP_MakeDiscoverable &rArr; gapSetAdvParams &rArr; isLimitedDiscoverableMode &rArr; gapFindADType
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_free_mem
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_send
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_mode_get
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_adv_send
</UL>

<P><STRONG><a name="[3b7]"></a>blebrr_send</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, blebrr.o(i.blebrr_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = blebrr_send &rArr; blebrr_update_advdata &rArr; blebrr_advertise_data_pl &rArr; blebrr_advertise_pl &rArr; BLE_gap_set_adv_enable &rArr; GAP_MakeDiscoverable &rArr; gapSetAdvParams &rArr; isLimitedDiscoverableMode &rArr; gapFindADType
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_alloc_mem
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_scan_pl
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_update_advdata
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_advertise_pl
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_bcon_send
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_adv_send
</UL>

<P><STRONG><a name="[3c6]"></a>blebrr_timer_start</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, blebrr.o(i.blebrr_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = blebrr_timer_start &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_scan_setup
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_advertise_setup
</UL>

<P><STRONG><a name="[3c7]"></a>blebrr_update_advdata</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, blebrr.o(i.blebrr_update_advdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = blebrr_update_advdata &rArr; blebrr_advertise_data_pl &rArr; blebrr_advertise_pl &rArr; BLE_gap_set_adv_enable &rArr; GAP_MakeDiscoverable &rArr; gapSetAdvParams &rArr; isLimitedDiscoverableMode &rArr; gapFindADType
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_free_mem
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_get_queue_depth
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_advertise_data_pl
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_send
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_scan_setup
</UL>

<P><STRONG><a name="[a0]"></a>blebrr_gatt_send</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, blebrr_gatt.o(i.blebrr_gatt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = blebrr_gatt_send &rArr; blebrr_gatt_send_pl &rArr; mesh_proxy_notify_data_out &rArr; GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_send_pl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blebrr_gatt.o(i.blebrr_pl_gatt_connection)
</UL>
<P><STRONG><a name="[3cf]"></a>ll_dumpConnectionInfo</STRONG> (Thumb, 562 bytes, Stack size 8 bytes, cli_model.o(i.ll_dumpConnectionInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ll_dumpConnectionInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_internal_status
</UL>

<P><STRONG><a name="[c5]"></a>trn_sub_timeout_handler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.trn_sub_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = trn_sub_timeout_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.trn_start_heartbeat_sub_timer)
</UL>
<P><STRONG><a name="[478]"></a>ms_iv_update_state_change</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_iv_update_state_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ms_iv_update_state_change &rArr; MS_access_cm_set_iv_index &rArr; ms_access_ps_store &rArr; nvsto_write_header &rArr; nvs_write_header &rArr; flash_write_word &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_features_field
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_stop_snb_timer
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_init_seq_number
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_start_iv_update_timer
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_iv_index
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_iv_update_timeout_handler
</UL>

<P><STRONG><a name="[95]"></a>ms_iv_update_timeout_handler</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.ms_iv_update_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ms_iv_update_timeout_handler &rArr; ms_iv_update_state_change &rArr; MS_access_cm_set_iv_index &rArr; ms_access_ps_store &rArr; nvsto_write_header &rArr; nvs_write_header &rArr; flash_write_word &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_iv_update_state_change
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
</UL>
<BR>[Address Reference Count : 2]<UL><LI> libethermind_mesh_core.lib(i.MS_net_start_iv_update_timer)
<LI> libethermind_mesh_core.lib(i.ms_iv_update_timeout_handler)
</UL>
<P><STRONG><a name="[96]"></a>ms_key_refresh_timeout_handler</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, libethermind_mesh_core.lib(i.ms_key_refresh_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = ms_key_refresh_timeout_handler &rArr; MS_net_key_refresh_phase_set &rArr; MS_config_client_send_reliable_pdu &rArr; MS_access_reliable_publish &rArr; MS_access_publish_ex &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_config_client_send_reliable_pdu
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_config_client_set_publish_address
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_ps_store_disable
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_key_refresh_phase
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_start_key_refresh_timer
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_key_refresh_phase_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.MS_net_start_key_refresh_timer)
</UL>
<P><STRONG><a name="[97]"></a>ms_snb_timeout_handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.ms_snb_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ms_snb_timeout_handler &rArr; MS_net_broadcast_secure_beacon &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_broadcast_secure_beacon
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_start_snb_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.MS_net_start_snb_timer)
</UL>
<P><STRONG><a name="[e]"></a>ms_load_appkeys</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_load_appkeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ms_load_appkeys &rArr; nvsto_read &rArr; nvs_read &rArr; NV_Read &rArr; hal_flash_read &rArr; spif_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[c]"></a>ms_load_dev_key</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_load_dev_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ms_load_dev_key &rArr; nvsto_read &rArr; nvs_read &rArr; NV_Read &rArr; hal_flash_read &rArr; spif_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[10]"></a>ms_load_element_addresses</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_load_element_addresses))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ms_load_element_addresses &rArr; nvsto_read &rArr; nvs_read &rArr; NV_Read &rArr; hal_flash_read &rArr; spif_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[6]"></a>ms_load_elements</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_load_elements))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ms_load_elements &rArr; nvsto_read &rArr; nvs_read &rArr; NV_Read &rArr; hal_flash_read &rArr; spif_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[8]"></a>ms_load_models</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_load_models))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ms_load_models &rArr; nvsto_read &rArr; nvs_read &rArr; NV_Read &rArr; hal_flash_read &rArr; spif_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[14]"></a>ms_load_non_virtual_addresses</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_load_non_virtual_addresses))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ms_load_non_virtual_addresses &rArr; nvsto_read &rArr; nvs_read &rArr; NV_Read &rArr; hal_flash_read &rArr; spif_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[1a]"></a>ms_load_provisioner_address</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.ms_load_provisioner_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ms_load_provisioner_address &rArr; nvsto_read &rArr; nvs_read &rArr; NV_Read &rArr; hal_flash_read &rArr; spif_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[1c]"></a>ms_load_proxy_filter_address</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.ms_load_proxy_filter_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ms_load_proxy_filter_address &rArr; nvsto_read &rArr; nvs_read &rArr; NV_Read &rArr; hal_flash_read &rArr; spif_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[16]"></a>ms_load_seq_number</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_load_seq_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ms_load_seq_number &rArr; nvsto_read &rArr; nvs_read &rArr; NV_Read &rArr; hal_flash_read &rArr; spif_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_read
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_set_seq_num_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[a]"></a>ms_load_subnets</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_load_subnets))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ms_load_subnets &rArr; nvsto_read &rArr; nvs_read &rArr; NV_Read &rArr; hal_flash_read &rArr; spif_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[18]"></a>ms_load_tx_states_and_features</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_load_tx_states_and_features))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ms_load_tx_states_and_features &rArr; nvsto_read &rArr; nvs_read &rArr; NV_Read &rArr; hal_flash_read &rArr; spif_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[12]"></a>ms_load_virtual_addresses</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_load_virtual_addresses))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ms_load_virtual_addresses &rArr; nvsto_read &rArr; nvs_read &rArr; NV_Read &rArr; hal_flash_read &rArr; spif_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[d]"></a>ms_store_appkeys</STRONG> (Thumb, 68 bytes, Stack size 136 bytes, libethermind_mesh_core.lib(i.ms_store_appkeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ms_store_appkeys &rArr; nvsto_write &rArr; nvs_write &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[b]"></a>ms_store_dev_key</STRONG> (Thumb, 90 bytes, Stack size 128 bytes, libethermind_mesh_core.lib(i.ms_store_dev_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ms_store_dev_key &rArr; nvsto_write &rArr; nvs_write &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[f]"></a>ms_store_element_addresses</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.ms_store_element_addresses))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ms_store_element_addresses &rArr; nvsto_write &rArr; nvs_write &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[5]"></a>ms_store_elements</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, libethermind_mesh_core.lib(i.ms_store_elements))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ms_store_elements &rArr; nvsto_write &rArr; nvs_write &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[7]"></a>ms_store_models</STRONG> (Thumb, 78 bytes, Stack size 1144 bytes, libethermind_mesh_core.lib(i.ms_store_models))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = ms_store_models &rArr; nvsto_write &rArr; nvs_write &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[13]"></a>ms_store_non_virtual_addresses</STRONG> (Thumb, 68 bytes, Stack size 144 bytes, libethermind_mesh_core.lib(i.ms_store_non_virtual_addresses))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ms_store_non_virtual_addresses &rArr; nvsto_write &rArr; nvs_write &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[19]"></a>ms_store_provisioner_address</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_store_provisioner_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ms_store_provisioner_address &rArr; nvsto_write &rArr; nvs_write &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[1b]"></a>ms_store_proxy_filter_address</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.ms_store_proxy_filter_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ms_store_proxy_filter_address &rArr; nvsto_write &rArr; nvs_write &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[15]"></a>ms_store_seq_number</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.ms_store_seq_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ms_store_seq_number &rArr; nvsto_write &rArr; nvs_write &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_write
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_get_seq_num_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[9]"></a>ms_store_subnets</STRONG> (Thumb, 124 bytes, Stack size 528 bytes, libethermind_mesh_core.lib(i.ms_store_subnets))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = ms_store_subnets &rArr; nvsto_write &rArr; nvs_write &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[17]"></a>ms_store_tx_states_and_features</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.ms_store_tx_states_and_features))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ms_store_tx_states_and_features &rArr; nvsto_write &rArr; nvs_write &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[11]"></a>ms_store_virtual_addresses</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.ms_store_virtual_addresses))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ms_store_virtual_addresses &rArr; nvsto_write &rArr; nvs_write &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[31a]"></a>config_pack_key_indices</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, libethermind_mesh_core.lib(i.config_pack_key_indices))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = config_pack_key_indices
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_config_client_send_reliable_pdu
</UL>

<P><STRONG><a name="[390]"></a>aes_cmac_1bit_leftshift_16octet_stream</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, libethermind_utils.lib(i.aes_cmac_1bit_leftshift_16octet_stream))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = aes_cmac_1bit_leftshift_16octet_stream
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_generate_subkeys
</UL>

<P><STRONG><a name="[38e]"></a>aes_cmac_finalize_mac</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, libethermind_utils.lib(i.aes_cmac_finalize_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_128B_encrypt_pl
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_xor_16octet
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_generate_mac
</UL>

<P><STRONG><a name="[38a]"></a>aes_cmac_generate_mac</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, libethermind_utils.lib(i.aes_cmac_generate_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_128B_encrypt_pl
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_xor_16octet
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_finalize_mac
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac
</UL>

<P><STRONG><a name="[389]"></a>aes_cmac_generate_subkeys</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, libethermind_utils.lib(i.aes_cmac_generate_subkeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = aes_cmac_generate_subkeys &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_128B_encrypt_pl
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_xor_16octet
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_1bit_leftshift_16octet_stream
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac
</UL>

<P><STRONG><a name="[38f]"></a>aes_cmac_xor_16octet</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, libethermind_utils.lib(i.aes_cmac_xor_16octet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = aes_cmac_xor_16octet
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_generate_subkeys
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_generate_mac
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_finalize_mac
</UL>

<P><STRONG><a name="[35a]"></a>NV_Get_Free_Sector</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, libethermind_utils.lib(i.NV_Get_Free_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = NV_Get_Free_Sector &rArr; NV_Read &rArr; hal_flash_read &rArr; spif_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_open
</UL>

<P><STRONG><a name="[35b]"></a>NV_Read</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, libethermind_utils.lib(i.NV_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NV_Read &rArr; hal_flash_read &rArr; spif_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_read
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_Get_Free_Sector
</UL>

<P><STRONG><a name="[36a]"></a>UI_netkey_generate</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, appl_sample_mesh_gateway.o(i.UI_netkey_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UI_netkey_generate &rArr; hal_flash_read &rArr; spif_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read (via Veneer)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_AES128_Encrypt (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[264]"></a>gapAllocScanRecs</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gap_centdevmgr.o(i.gapAllocScanRecs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapAllocScanRecs
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_CentDevMgrInit
</UL>

<P><STRONG><a name="[1d]"></a>gapCentProcessHCICmdEvt</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gap_centdevmgr.o(i.gapCentProcessHCICmdEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gapCentProcessHCICmdEvt &rArr; gapSetScanParamStatus &rArr; gapSendDevDiscEvent &rArr; gapFreeScanRecs
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetScanParamStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap_centdevmgr.o(.data)
</UL>
<P><STRONG><a name="[3e1]"></a>gapFindScanRec</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, gap_centdevmgr.o(i.gapFindScanRec))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapFindScanRec
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessAdvertDevInfo
</UL>

<P><STRONG><a name="[262]"></a>gapFreeScanRecs</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, gap_centdevmgr.o(i.gapFreeScanRecs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gapFreeScanRecs
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_CentDevMgrInit
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDevDiscEvent
</UL>

<P><STRONG><a name="[3e8]"></a>gapProcessAdvertDevInfo</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, gap_centdevmgr.o(i.gapProcessAdvertDevInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = gapProcessAdvertDevInfo &rArr; gapFindADType
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFindADType
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapDetermineAddrType
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFindScanRec
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessScanningEvt
</UL>

<P><STRONG><a name="[20]"></a>gapProcessConnEvt</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gap_centdevmgr.o(i.gapProcessConnEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = gapProcessConnEvt &rArr; gapProcessL2CAPSignalEvt &rArr; L2CAP_ConnParamUpdateRsp &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapTerminateConnComplete
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessL2CAPSignalEvt
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessCreateLLConnCmdStatus
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnUpdateCmdStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap_centdevmgr.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>gapProcessScanningEvt</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, gap_centdevmgr.o(i.gapProcessScanningEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = gapProcessScanningEvt &rArr; gapProcessAdvertDevInfo &rArr; gapFindADType
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendScanEnable
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDeviceInfoEvent
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDevDiscEvent
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessAdvertDevInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap_centdevmgr.o(.data)
</UL>
<P><STRONG><a name="[26e]"></a>gapSendDevDiscEvent</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, gap_centdevmgr.o(i.gapSendDevDiscEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gapSendDevDiscEvent &rArr; gapFreeScanRecs
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeScanRecs
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceDiscoveryCancel
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetScanParamStatus
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessScanningEvt
</UL>

<P><STRONG><a name="[3fd]"></a>gapSendDeviceInfoEvent</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, gap_centdevmgr.o(i.gapSendDeviceInfoEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapSendDeviceInfoEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessScanningEvt
</UL>

<P><STRONG><a name="[26f]"></a>gapSendScanEnable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gap_centdevmgr.o(i.gapSendScanEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapSendScanEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetScanEnableCmd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceDiscoveryCancel
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetScanParamStatus
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessScanningEvt
</UL>

<P><STRONG><a name="[3fe]"></a>gapSendDeviceInitDoneEvent</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gap_configmgr.o(i.gapSendDeviceInitDoneEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapSendDeviceInitDoneEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapReadBufSizeCmdStatus
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapReadBD_ADDRStatus
</UL>

<P><STRONG><a name="[283]"></a>disconnectNext</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gap_linkmgr.o(i.disconnectNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = disconnectNext &rArr; linkDB_FindFirst
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_DisconnectCmd (via Veneer)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_FindFirst
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_TerminateLinkReq
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessDisconnectCompleteEvt
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnectionCompleteEvt
</UL>

<P><STRONG><a name="[25b]"></a>gapFreeAuthLink</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gap_linkmgr.o(i.gapFreeAuthLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapFreeAuthLink
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authenticate
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessDisconnectCompleteEvt
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAuthEvent
</UL>

<P><STRONG><a name="[3e4]"></a>sendAuthEvent</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, gap_linkmgr.o(i.sendAuthEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sendAuthEvent &rArr; gapFreeAuthLink
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeAuthLink
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPairingCompleteCB
</UL>

<P><STRONG><a name="[3f3]"></a>sendTerminateEvent</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, gap_linkmgr.o(i.sendTerminateEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sendTerminateEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessDisconnectCompleteEvt
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnectionCompleteEvt
</UL>

<P><STRONG><a name="[27b]"></a>gapAllocAdvRecs</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, gap_peridevmgr.o(i.gapAllocAdvRecs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapAllocAdvRecs
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PeriDevMgrInit
</UL>

<P><STRONG><a name="[275]"></a>gapFreeAdvertState</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_peridevmgr.o(i.gapFreeAdvertState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapFreeAdvertState
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvEnableStatus
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendMakeDiscEvent
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessAdvertisingEvt
</UL>

<P><STRONG><a name="[21]"></a>gapPeriProcessHCICmdCompleteEvt</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, gap_peridevmgr.o(i.gapPeriProcessHCICmdCompleteEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = gapPeriProcessHCICmdCompleteEvt &rArr; gapWriteAdvEnableStatus &rArr; isLimitedDiscoverableMode &rArr; gapFindADType
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvEnableStatus
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvDataStatus
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetAdvParamsStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap_peridevmgr.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>gapProcessAdvertisingEvt</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, gap_peridevmgr.o(i.gapProcessAdvertisingEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gapProcessAdvertisingEvt &rArr; GAP_EndDiscoverable
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_EndDiscoverable
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeAdvertState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap_peridevmgr.o(.data)
</UL>
<P><STRONG><a name="[402]"></a>gapSendMakeDiscEvent</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gap_peridevmgr.o(i.gapSendMakeDiscEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapSendMakeDiscEvent &rArr; gapFreeAdvertState
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeAdvertState
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvEnableStatus
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetAdvParamsStatus
</UL>

<P><STRONG><a name="[404]"></a>isLimitedDiscoverableMode</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gap_peridevmgr.o(i.isLimitedDiscoverableMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = isLimitedDiscoverableMode &rArr; gapFindADType
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFindADType
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvEnableStatus
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetAdvParams
</UL>

<P><STRONG><a name="[3f6]"></a>gapProcessHCICmdCompleteEvt</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, gap_task.o(i.gapProcessHCICmdCompleteEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gapProcessHCICmdCompleteEvt &rArr; gapReadBD_ADDRStatus &rArr; gapSendDeviceInitDoneEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapReadBufSizeCmdStatus
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapReadBD_ADDRStatus
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessRandomAddrComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessOSALMsg
</UL>

<P><STRONG><a name="[27c]"></a>gapProcessOSALMsg</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, gap_task.o(i.gapProcessOSALMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = gapProcessOSALMsg &rArr; L2CAP_CmdReject &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_CmdReject
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessHCICmdCompleteEvt
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessDisconnectCompleteEvt
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnectionCompleteEvt
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnUpdateCompleteEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent
</UL>

<P><STRONG><a name="[8c]"></a>gattClientHandleConnStatusCB</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, gatt_client.o(i.gattClientHandleConnStatusCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gattClientHandleConnStatusCB &rArr; gattNotifyEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_State
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattResetClientInfo
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattFindClientInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_client.o(i.GATT_InitClient)
</UL>
<P><STRONG><a name="[a6]"></a>gattClientHandleTimerCB</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gatt_client.o(i.gattClientHandleTimerCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = gattClientHandleTimerCB &rArr; ATT_ExecuteWriteReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ExecuteWriteReq
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattResetClientInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_client.o(i.gattStoreClientInfo)
</UL>
<P><STRONG><a name="[8b]"></a>gattClientProcessMsgCB</STRONG> (Thumb, 232 bytes, Stack size 288 bytes, gatt_client.o(i.gattClientProcessMsgCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 852<LI>Call Chain = gattClientProcessMsgCB &rArr; gattProcessMultiReqs &rArr; gattProcessWriteLong &rArr; ATT_PrepareWriteReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ParseHandleValueInd
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ParseErrorRsp
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_UpdateMtuSize
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattResetClientInfo
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessMultiReqs
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattFindClientInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_client.o(i.GATT_InitClient)
</UL>
<P><STRONG><a name="[406]"></a>gattFindClientInfo</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gatt_client.o(i.gattFindClientInfo))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattGetClientStatus
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattClientProcessMsgCB
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattClientHandleConnStatusCB
</UL>

<P><STRONG><a name="[29f]"></a>gattGetClientStatus</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gatt_client.o(i.gattGetClientStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gattGetClientStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattFindClientInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_DiscAllCharDescs
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattReadByType
</UL>

<P><STRONG><a name="[40c]"></a>gattProcessFindInfo</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, gatt_client.o(i.gattProcessFindInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = gattProcessFindInfo &rArr; ATT_FindInfoReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerUpdate (via Veneer)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_FindInfoReq
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessMultiReqs
</UL>

<P><STRONG><a name="[40a]"></a>gattProcessMultiReqs</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, gatt_client.o(i.gattProcessMultiReqs))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = gattProcessMultiReqs &rArr; gattProcessWriteLong &rArr; ATT_PrepareWriteReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerUpdate (via Veneer)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadBlobReq
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_FindByTypeValueReq
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattResetClientInfo
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessWriteLong
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReliableWrites
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadByType
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadByGrpType
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessFindInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattClientProcessMsgCB
</UL>

<P><STRONG><a name="[40e]"></a>gattProcessReadByGrpType</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, gatt_client.o(i.gattProcessReadByGrpType))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = gattProcessReadByGrpType &rArr; ATT_ReadByGrpTypeReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerUpdate (via Veneer)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadByGrpTypeReq
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessMultiReqs
</UL>

<P><STRONG><a name="[40d]"></a>gattProcessReadByType</STRONG> (Thumb, 344 bytes, Stack size 48 bytes, gatt_client.o(i.gattProcessReadByType))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = gattProcessReadByType &rArr; ATT_ReadByTypeReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_CompareUUID
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerUpdate (via Veneer)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadByTypeReq
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessMultiReqs
</UL>

<P><STRONG><a name="[410]"></a>gattProcessReliableWrites</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, gatt_client.o(i.gattProcessReliableWrites))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = gattProcessReliableWrites &rArr; ATT_PrepareWriteReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerUpdate (via Veneer)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PrepareWriteReq
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ExecuteWriteReq
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessMultiReqs
</UL>

<P><STRONG><a name="[40f]"></a>gattProcessWriteLong</STRONG> (Thumb, 158 bytes, Stack size 272 bytes, gatt_client.o(i.gattProcessWriteLong))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = gattProcessWriteLong &rArr; ATT_PrepareWriteReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerUpdate (via Veneer)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PrepareWriteReq
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ExecuteWriteReq
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessMultiReqs
</UL>

<P><STRONG><a name="[2a2]"></a>gattReadByType</STRONG> (Thumb, 100 bytes, Stack size 72 bytes, gatt_client.o(i.gattReadByType))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = gattReadByType &rArr; ATT_ReadByTypeReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadByTypeReq
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattStoreClientInfo
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattGetClientStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_DiscAllChars
</UL>

<P><STRONG><a name="[408]"></a>gattResetClientInfo</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gatt_client.o(i.gattResetClientInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gattResetClientInfo &rArr; gattStopTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattStopTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessMultiReqs
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattClientProcessMsgCB
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattClientHandleTimerCB
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattClientHandleConnStatusCB
</UL>

<P><STRONG><a name="[2a0]"></a>gattStoreClientInfo</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, gatt_client.o(i.gattStoreClientInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gattStoreClientInfo &rArr; gattStartTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_DiscAllCharDescs
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattReadByType
</UL>

<P><STRONG><a name="[40b]"></a>gattFindServerInfo</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gatt_server.o(i.gattFindServerInfo))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerProcessMsgCB
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerHandleConnStatusCB
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattGetServerStatus
</UL>

<P><STRONG><a name="[2a6]"></a>gattGetServerStatus</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gatt_server.o(i.gattGetServerStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gattGetServerStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattFindServerInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Notification
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Indication
</UL>

<P><STRONG><a name="[e2]"></a>gattProcessExchangeMTUReq</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gatt_server.o(i.gattProcessExchangeMTUReq))
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>gattProcessExecuteWriteReq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gatt_server.o(i.gattProcessExecuteWriteReq))
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>gattProcessFindByTypeValueReq</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gatt_server.o(i.gattProcessFindByTypeValueReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gattProcessFindByTypeValueReq &rArr; GATT_FindHandleUUID &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>gattProcessFindInfoReq</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, gatt_server.o(i.gattProcessFindInfoReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = gattProcessFindInfoReq &rArr; ATT_FindInfoRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_FindInfoRsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>gattProcessReadByGrpTypeReq</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gatt_server.o(i.gattProcessReadByGrpTypeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gattProcessReadByGrpTypeReq &rArr; GATT_FindHandleUUID &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_CompareUUID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>gattProcessReadByTypeReq</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gatt_server.o(i.gattProcessReadByTypeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gattProcessReadByTypeReq &rArr; GATT_FindHandleUUID &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>gattProcessReadMultiReq</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, gatt_server.o(i.gattProcessReadMultiReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gattProcessReadMultiReq &rArr; GATT_VerifyReadPermissions &rArr; linkDB_Authen
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_VerifyReadPermissions
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>gattProcessReadReq</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gatt_server.o(i.gattProcessReadReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gattProcessReadReq &rArr; GATT_VerifyReadPermissions &rArr; linkDB_Authen
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_VerifyReadPermissions
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>gattProcessWriteReq</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gatt_server.o(i.gattProcessWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gattProcessWriteReq &rArr; GATT_VerifyWritePermissions &rArr; linkDB_Authen
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_VerifyWritePermissions
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[412]"></a>gattResetServerInfo</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gatt_server.o(i.gattResetServerInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gattResetServerInfo &rArr; gattStopTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattStopTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerProcessMsgCB
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerHandleConnStatusCB
</UL>

<P><STRONG><a name="[8e]"></a>gattServerHandleConnStatusCB</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, gatt_server.o(i.gattServerHandleConnStatusCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gattServerHandleConnStatusCB &rArr; gattNotifyEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_State
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattResetServerInfo
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattFindServerInfo
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(i.GATT_InitServer)
</UL>
<P><STRONG><a name="[8a]"></a>gattServerHandleTimerCB</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gatt_server.o(i.gattServerHandleTimerCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gattServerHandleTimerCB &rArr; gattNotifyEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(i.GATT_Indication)
</UL>
<P><STRONG><a name="[8d]"></a>gattServerProcessMsgCB</STRONG> (Thumb, 200 bytes, Stack size 288 bytes, gatt_server.o(i.gattServerProcessMsgCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = gattServerProcessMsgCB &rArr; ATT_ErrorRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ErrorRsp
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattResetServerInfo
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattFindServerInfo
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(i.GATT_InitServer)
</UL>
<P><STRONG><a name="[2a4]"></a>gattServiceLastHandle</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, gatt_server.o(i.gattServiceLastHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gattServiceLastHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServiceNumAttrs
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindNextAttr
</UL>

<P><STRONG><a name="[2af]"></a>gattProcessRxData</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, gatt_task.o(i.gattProcessRxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = gattProcessRxData &rArr; ATT_ErrorRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ErrorRsp
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ParsePacket
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_free (via Veneer)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HostNumCompletedPkts
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ProcessEvent
</UL>

<P><STRONG><a name="[442]"></a>l2capProcessRsp</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, l2cap_task.o(i.l2capProcessRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = l2capProcessRsp &rArr; l2capNotifySignal
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capStopTimer
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capParseParamUpdateRsp
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capParseCmdReject
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifySignal
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capFreeChannel
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capFindLocalId
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessSignal
</UL>

<P><STRONG><a name="[2bf]"></a>l2capProcessRxData</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, l2cap_task.o(i.l2capProcessRxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = l2capProcessRxData &rArr; l2capProcessSignal &rArr; L2CAP_CmdReject &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_free (via Veneer)
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capParsePacket
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyData
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessSignal
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HostNumCompletedPkts
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ProcessEvent
</UL>

<P><STRONG><a name="[448]"></a>l2capProcessSignal</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, l2cap_task.o(i.l2capProcessSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = l2capProcessSignal &rArr; L2CAP_CmdReject &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capParseSignalHdr
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifySignal
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capHandleRxError
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ParseParamUpdateReq
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRsp
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_CmdReject
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRxData
</UL>

<P><STRONG><a name="[44f]"></a>reportStatusChange</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, linkdb.o(i.reportStatusChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = reportStatusChange
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Remove
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Add
</UL>

<P><STRONG><a name="[1fd]"></a>TRNG_Output</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, patch.o(_section_xip_code_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TRNG_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRTCCount (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_INIT
</UL>

<P><STRONG><a name="[1f7]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, patch.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1
</UL>

<P><STRONG><a name="[154]"></a>check_16MXtal_by_rcTracking</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, patch.o(i.check_16MXtal_by_rcTracking))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = check_16MXtal_by_rcTracking
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRTCCount (via Veneer)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sleep_flag (via Veneer)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_enter_sleep_rtc_reset
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_counter (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1
</UL>

<P><STRONG><a name="[157]"></a>check_96MXtal_by_rcTracking</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, patch.o(i.check_96MXtal_by_rcTracking))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = check_96MXtal_by_rcTracking
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRTCCount (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1
</UL>

<P><STRONG><a name="[1d1]"></a>llAdjBoffUpperLimitFailure1</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, patch.o(i.llAdjBoffUpperLimitFailure1))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_ScanTRX0
</UL>

<P><STRONG><a name="[ac]"></a>l2capHandleTimerCB</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, l2cap_util.o(i.l2capHandleTimerCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = l2capHandleTimerCB &rArr; l2capNotifySignal
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifySignal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cap_util.o(i.l2capSendReq)
</UL>
<P><STRONG><a name="[41d]"></a>generate_subkey</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, sm_mgr.o(i.generate_subkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_128
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEncryptLocal
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leftshift_onebit
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CMAC
</UL>

<P><STRONG><a name="[41f]"></a>leftshift_onebit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sm_mgr.o(i.leftshift_onebit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = leftshift_onebit
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_subkey
</UL>

<P><STRONG><a name="[4bb]"></a>smEncrypt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sm_mgr.o(i.smEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smEncrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ah
</UL>

<P><STRONG><a name="[41e]"></a>smEncryptLocal</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sm_mgr.o(i.smEncryptLocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smEncryptLocal
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CMAC
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_subkey
</UL>

<P><STRONG><a name="[361]"></a>sm_CMAC</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, sm_mgr.o(i.sm_CMAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_128
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEncryptLocal
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_subkey
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_VerifyAuthenSig
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_GenerateAuthenSig
</UL>

<P><STRONG><a name="[420]"></a>xor_128</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, sm_mgr.o(i.xor_128))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = xor_128
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CMAC
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_subkey
</UL>

<P><STRONG><a name="[364]"></a>smFreePairingParams</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, sm_pairing.o(i.smFreePairingParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = smFreePairingParams &rArr; smStopRspTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smStopRspTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_StartPairing
</UL>

<P><STRONG><a name="[4be]"></a>smSetPairingReqRsp</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sm_pairing.o(i.smSetPairingReqRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smSetPairingReqRsp &rArr; smUint8ToAuthReq
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smUint8ToAuthReq
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGeneratePairingReqRsp
</UL>

<P><STRONG><a name="[149]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[143]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vprintf
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[14d]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[14c]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[46]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
